[build-system]
requires = [
    "setuptools>=42",
    "wheel",
]
build-backend = "setuptools.build_meta"

[tool.setuptools]
packages = [
    "Tools",
    "Libraries",
]

[project]
name="PyKotor"
version="1.7"
description="Read, modify and write files used by KotOR's game engine."
authors = [{name = "NickHugi"}]
maintainers = [{name = "th3w1zard1", email = "halomastar@gmail.com"}]
readme = {file = "README.md", content-type = "text/markdown"}
license = {text = "GPLv3 License"}
keywords = ["kotor", "library", "holocron", "toolset", "pykotor", "editor", "holopatcher", "tslpatcher"]
requires-python = ">= 3.8"
dependencies = ["ply>=3.11,<4"]  # required for the nss compiler lexer

[project.optional-dependencies]
font                 = ["Pillow>=9.5"]    # required for TXI/TGA fonts
secure_xml           = ["defusedxml~=0.7"]    # secure XML parsing
encodings = ["charset-normalizer>=2.0,<3.4"]  # used for localized string decodings
gl = [
  "django>2.1; os_name != 'nt'",
  "django>2.0; os_name == 'nt'",
  "numpy~=1.22",      # ( might need 1.22.2 )
  "PyOpenGL~=3.1",    # ( might need 3.1.6 )
  "PyGLM>=2.0,<2.8",  # ( might need 2.5.7 )
]

[project.urls]
Homepage = "https://github.com/NickHugi/PyKotor"
Documentation = "https://github.com/NickHugi/PyKotor/blob/master/README.md"
Repository = "https://github.com/NickHugi/PyKotor.git"
Issues = "https://github.com/NickHugi/PyKotor/issues"
#Changelog = "https://github.com/NickHugi/PyKotor/blob/master/CHANGELOG.md"

########################################################
## define only linter configurations below this point ##
########################################################

[tool.black]
line-length = 175
target-version = ['py38']
include = '\.pyi?$'
exclude = '''
/(
    \.git
| \.hg
| \.github
| \.mypy_cache
| \.tox
| \.venv
| venv
| _build
| buck-out
| build
| __pycache__
| dist
| nuitka_dist
| \.history
| \.idea
| \.chat
| \.ruff_cache
| \.trunk
| .mdx
| .mdl
)/
'''

[tool.pyright]
reportMissingImports = true
reportMissingTypeStubs = true
pythonVersion = "3.8"

[tool.isort]
atomic = true
profile = "black"
line_length = 175
skip_gitignore = true
multi_line_output = 3

[tool.ruff]
line-length = 175

# Enable preview features.
preview = false

fix = true
force-exclude = true
show-fixes = true
output-format = "grouped"  # Group violations by containing file.
respect-gitignore = false

src = [
    "Libraries/PyKotor/src",
    "Libraries/PyKotorGL/src",
    "Libraries/PyKotorFont/src",
    "Libraries/Utility/src",
    "Tools/HolocronToolset/src",
    "Tools/BatchPatcher/src",
    "Tools/HoloPatcher/src",
    "Tools/KotorDiff/src",
    "Tools/GuiDuplicator/src",
    "Tools/MDLDecompile/src",
    "tests"
]

[tool.ruff.lint]
ignore-init-module-imports = true
external = ["V"]
task-tags = ["TODO", "FIXME", "HACK"]
select = ["ALL"]
exclude = [".venv"]
unfixable = [
    "F841",
    "ERA001",
    "N815",
    "RUF100",   # Unused `noqa` directive
    #"UP035",  # replaces deprecated/outdated imports (we want to support older versions of python in the future)
    #"UP038",  # non-pep604-isinstance (python 3.10 syntax)
]
ignore = [
# The following rules are too strict to be realistically used by ruff:
    "ANN101",   # Checks that instance method self arguments have type annotations.
    "ANN102",   # Checks that class method cls arguments have type annotations.
    "ANN401",   # Dynamically typed expressions (typing.Any) are disallowed in {name}
    "ANN204",   # Missing return type annotation for special method
    "ARG002",   # Unused method argument: `method`
    "COM812",   # missing-trailing-comma
    "ERA001",   # Found commented out code.
#    "FBT001",   # Boolean positional arg in function definition
#    "FBT002",   # Boolean default value in function definition
    "D100",     # Missing docstring in public module
    "D101",     # Missing docstring in public class
    "D102",     # Missing docstring in public method
    "D103",     # Missing docstring in public function
    "D104",     # Missing docstring in public package
    "D105",     # Missing docstring in magic method
    "D107",     # Missing docstring in __init__
    "D205",     # 1 blank line required between summary line and description
#    "D213",     # Multi-line docstring summary should start at the second line
#    "D400",     # First line should end with a period
    "D401",     # First line of docstring should be in imperative mood
    "D413",     # Missing blank line after last section 'xyz'
#    "D403",     # First word of the first line should be capitalized: {} -> {}
#    "D404",     # First word of the docstring should not be "This"
    "D417",     # Missing argument description in the docstring for {definition}: {name}
    "N802",     # Function name `screenToWorld` should be lowercase
    "N806",     # Variable `jumpToOffset` in function should be lowercase
    "N815",     # Variable `var` in class scope should not be mixedCase
    "PLR0904",  # Too many public methods
    "RUF100",   # Unused `noqa` directive (non-enabled: `PLC0415`)
    "T201",     # 'print' found
    "TD001",    # Invalid TODO tag: `FIXME`
    "TRY003",   # Avoid specifying long messages outside the exception class
    "EM101",    # Exception must not use a string literal, assign to variable first
    "EM102",    # Exception must not use an f-string literal, assign to variable first
    "SIM108",   # Use ternary operator instead of 'if' 'else' block
    "SIM114",   # Combine `if` branches using logical `or` operator

# The following are currently violated by the codebase.
#    "D205",     # 1 blank line required between summary line and description
#    "E402",     # Module level import not at top of file
#    "FIX004",   # Line contains HACK, consider resolving the issue
#    "PD901",    # df is a bad variable name. Be kinder to your future self.
#    "PERF203",  # `try`-`except` within a loop incurs performance overhead
#    "PLR0913",  # Too many arguments to function call (N > 5)
#    "PLR2004",  # Magic value used in comparison, consider replacing X with a constant variable
#    "S101",     # Use of assert detected
#    "S314",     # Using `xml` to parse untrusted data is known to be vulnerable to XML attacks; use `defusedxml` equivalents
#    "S605",     # Starting a process with a shell, possible injection detected
#    "SLF001",   # Private member accessed
#
# According to ruff documentation, the following rules should be avoided when using its formatter:
#
#    "W191",     # tab-indentation
#    "E111",     # indentation-with-invalid-multiple
#    "E114",     # indentation-with-invalid-multiple-comment
#    "E117",     # over-indented
#    "D206",     # indent-with-spaces
#    "D300",     # triple-single-quotes
#    "Q000",     # bad-quotes-inline-string
#    "Q001",     # bad-quotes-multiline-string
#    "Q002",     # bad-quotes-docstring
#    "Q003",     # avoidable-escaped-quote
#    "COM812",   # missing-trailing-comma
#    "COM819",   # prohibited-trailing-comma
    "ISC001",
]

[tool.ruff.lint.per-file-ignores]
"*.pyi" = [
  "I002", # from __future__ import annotations
]
"tests/*.py" = ["ALL"]
".github/*py" = ["INP001"]
"__init__.py" = ["I001", "F401"]
"globalsettings.py" = ["I001", "F401"]
"Tools/HolocronToolset/src/toolset/*.py" = ["FBT003", "N802", "N803", "N806", "A001"]
"Tools/HolocronToolset/src/toolset/uic/*.py" = ["ALL"]
"resources_rc.py" = ["ALL"]
".mdx" = ["ALL"]
".mdl" = ["ALL"]
"pykotor/resource/formats/ncs/compiler/*.py" = ["ALL"]
"tests/results" = ["ALL"]

[tool.ruff.lint.flake8-pytest-style]
fixture-parentheses = false
mark-parentheses = false
parametrize-names-type = "list"
parametrize-values-row-type = "list"
parametrize-values-type = "list"  # default
raises-require-match-for = ["requests.RequestException"]

[tool.ruff.lint.flake8-annotations]
ignore-fully-untyped = true
mypy-init-return = true
suppress-none-returning = true

[tool.ruff.lint.flake8-bandit]
check-typed-exception = true

[tool.ruff.lint.flake8-quotes]
docstring-quotes = "double"
inline-quotes = "double"
multiline-quotes = "double"

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"  # Disallow all relative imports.

[tool.ruff.lint.flake8-type-checking]
# Add quotes around type annotations, if doing so would allow an import to be moved into a type-checking block.
quote-annotations = true  # Does nothing when from __future__ import annotations is used
exempt-modules = ["typing", "typing_extensions"]
strict = true

[tool.ruff.lint.flake8-unused-arguments]
ignore-variadic-names = true

[tool.ruff.lint.isort]
case-sensitive = true
force-wrap-aliases = false
combine-as-imports = true
lines-between-types = 1
no-sections = false
required-imports = ["from __future__ import annotations"]

[tool.ruff.format]
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
preview = false

[tool.ruff.lint.pyupgrade]
keep-runtime-typing = false

[tool.mccabe]
max-complexity = 25

[tool.bandit]
exclude_dirs = ["tests"]
tests = ["B201", "B301"]
skips = ["B101", "B601"]

[tool.ruff.lint.pycodestyle]
max-doc-length = 200

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.style]
based_on_style = "google"
split_before_named_assigns = true
split_complex_comprehension = true
split_arguments_when_comma_terminated = true

[tool.pylintrc]
max-line-length = 200

[tool.pytest.ini_options]
log_cli = true
log_cli_level = "CRITICAL"
log_cli_format = "%(message)s"

log_file = "pytest.log"
log_file_level = "DEBUG"
log_file_format = "%(asctime)s [%(levelname)8s] %(message)s (%(filename)s:%(lineno)s)"
log_file_date_format = "%Y-%m-%d %H:%M:%S"