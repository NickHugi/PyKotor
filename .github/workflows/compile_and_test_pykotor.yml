name: PyKotor tests/compilations

on: [push]

permissions:
  contents: read

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        python-version: [3.8, 3.9, 3.10, 3.11, 3.12]

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.8
      uses: actions/setup-python@v3
      with:
        python-version: "3.8"

    - name: Install python venv from install_python_venv.ps1
      run: |
        ./install_python_venv.ps1 -noprompt
      shell: pwsh

    - name: Install holopatcher dependencies
      run: |
        ./compile/deps_holopatcher.ps1 -noprompt
      shell: pwsh
      continue-on-error: true
    
    - name: Compile HoloPatcher
      run: |
        ./compile/compile_holopatcher.ps1 -noprompt
      shell: pwsh
      continue-on-error: true

    - name: Install Holocron Toolset dependencies
      run: |
        ./compile/deps_toolset.ps1 -noprompt
      shell: pwsh
      continue-on-error: true

    - name: Compile Holocron Toolset
      run: |
        ./compile/compile_toolset.ps1 -noprompt
      shell: pwsh
      continue-on-error: true

    - name: Install BatchPatcher dependencies
      run: |
        ./compile/deps_batchpatcher.ps1 -noprompt
      shell: pwsh
      continue-on-error: true

    - name: Compile BatchPatcher
      run: |
        ./compile/compile_batchpatcher.ps1 -noprompt
      shell: pwsh
      continue-on-error: true

    - name: Compile KotorDiff
      run: |
        ./compile/compile_kotordiff.ps1 -noprompt
      shell: pwsh
      continue-on-error: true

    - name: Compile GUIDuplicator
      run: |
        ./compile/compile_gui_duplicator.ps1 -noprompt
      shell: pwsh
      continue-on-error: true

    - name: Upload compiled binaries
      uses: actions/upload-artifact@v3
      if: always()  # This ensures the step runs regardless of previous step's success or failure
      with:
        name: dist-folder
        path: ./dist/**

    - name: Install development packages
      run: |
        pip install -r requirements-dev.txt
      shell: pwsh

    - name: Run all unittests/pytests
      run: |
        python -m pytest tests -v -ra -o log_cli=true --capture=no --junitxml=pytest_report.xml --html=pytest_report.html --self-contained-html --tb=no --continue-on-collection-errors
      shell: pwsh

    - name: Configure Git Identity
      run: |
        git config --global user.name "GitHub Action"
        git config --global user.email "action@github.com"

    - name: Update README with custom test status badges
      env:
        OS_NAME: ${{ matrix.os }}
        PYTHON_VERSION: ${{ matrix.python-version }}
      run: |
        $ErrorActionPreference = 'Stop' # This will halt the script on any errors
        $OSBadge = $env:OS_NAME -replace '-latest', '' # Removes the '-latest' from OS names
        $BadgeName = "tests-$OSBadge-${env:PYTHON_VERSION}"
        
        # Extract test counts from the pytest report
        $TestResults = [xml](Get-Content ./pytest_report.xml)
        $PassedTests = $TestResults.testsuite.tests - $TestResults.testsuite.failures
        $FailedTests = $TestResults.testsuite.failures
        $TotalTests = $TestResults.testsuite.tests
        
        # Generate badge URL
        $BadgeURL = "https://img.shields.io/badge/$BadgeName-$PassedTests%20passed%2C%20$FailedTests%20failed-brightgreen"
        
        # Check if README already has the badge for the current matrix parameters
        $ReadmePath = "./README.md"
        $ReadmeContent = Get-Content $ReadmePath -Raw
        $BadgeRegex = "\!\[$BadgeName\]\(https:\/\/img\.shields\.io\/badge\/.*\)"
        
        if ($ReadmeContent -match $BadgeRegex) {
          # Badge exists, update it
          $NewReadmeContent = $ReadmeContent -replace $BadgeRegex, "![$BadgeName]($BadgeURL)"
        } else {
          # Badge doesn't exist, add it
          $NewReadmeContent = $ReadmeContent + "`n![Test Status]($BadgeURL)"
        }

        # Write the new README content to the file
        $NewReadmeContent | Set-Content $ReadmePath
        
        # Git configuration and commit
        git config --global user.name "github-actions"
        git config --global user.email "github-actions@github.com"
        git add $ReadmePath
        git commit -m "Update README with custom test status badge for $BadgeName"
        git push
      shell: pwsh
      if: success() # This ensures the step only runs if the previous steps succeeded

    - name: Upload Pytest Reports
      uses: actions/upload-artifact@v3
      if: always()  # Ensures this step runs even if the previous step fails
      with:
        name: pytest-reports
        path: |
          pytest_report.html
          pytest_report.xml