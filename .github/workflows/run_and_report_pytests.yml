name: Test PyKotor

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
  
on:
  - push
  - workflow_dispatch

permissions:
  contents: write

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false  # Disable automatic cancellation of other jobs
      matrix:
        os: [windows-2019, ubuntu-20.04, macos-12]  # make sure you update the above one too.
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
        architecture: ['x86', 'x64']
        python_pypy: ['python', 'pypy']
        include:
          - arch: x86
            vc_redist2015: "https://download.microsoft.com/download/9/3/F/93FCF1E7-E6A4-478B-96E7-D4B285925B00/vc_redist.x86.exe"
            vc_redist-latest: "https://aka.ms/vs/17/release/vc_redist.x86.exe"
            vc_redist2019: "https://aka.ms/vs/17/release/vc_redist.x86.exe"
          - arch: x64
            vc_redist2015: "https://download.microsoft.com/download/9/3/F/93FCF1E7-E6A4-478B-96E7-D4B285925B00/vc_redist.x64.exe"
            vc_redist-latest: "https://aka.ms/vs/17/release/vc_redist.x64.exe"
            vc_redist2019: "https://aka.ms/vs/17/release/vc_redist.x64.exe"
        exclude:
          # unix x86 is definitely not supported.
          - os: ubuntu-20.04
            architecture: x86
          - os: macos-12
            architecture: x86
          - python_pypy: 'pypy'
            python-version: '3.11'
          - python_pypy: 'pypy'
            python-version: '3.12'
    outputs:
      matrix-os: ${{ toJson(matrix.os) }}
      matrix-python-version: ${{ toJson(matrix.python-version) }}

    steps:
    - name: Determine Python version string
      id: set-python-version
      run: |
        if ( "${{ matrix.python_pypy }}" -eq "pypy" ) {
          Add-Content -Path $env:GITHUB_ENV -Value "PYTHON_VERSION=pypy-${{ matrix.python-version }}"
        } else {
          Add-Content -Path $env:GITHUB_ENV -Value "PYTHON_VERSION=${{ matrix.python-version }}"
        }
      shell: pwsh

    - uses: actions/checkout@v4
    - name: Set up ${{ matrix.python_pypy }} ${{ matrix.python-version }}
      if: ${{ runner.os != 'macOS' && (runner.os != 'Linux' || matrix.python_pypy == 'pypy') }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        architecture: ${{ matrix.architecture }}

    - name: Set up ${{ matrix.python_pypy }} ${{ matrix.python-version }} macOS
      if: ${{ runner.os == 'macOS' }}
      run: |  # warning: `brew link --overwrite python@ver` is unsafe on any non-virtualized macos.
        echo "NONINTERACTIVE DEFAULT: $NONINTERACTIVE"
        export NONINTERACTIVE=1
        echo "NONINTERACTIVE NEW: $NONINTERACTIVE"
        brew analytics on
        brew update
        brew install ${{ matrix.python_pypy }}@${{ matrix.python-version }} || brew link --overwrite ${{ matrix.python_pypy }}@${{ matrix.python-version }}

    - name: Set up ${{ matrix.python_pypy }} ${{ matrix.python-version }} Linux  # macos too?
      if: ${{ runner.os == 'Linux' && matrix.python_pypy == 'python' }}
      run: |
        sudo apt-get update
        sudo apt-get install build-essential zlib1g-dev libncurses5-dev libgdbm-dev libssl-dev libreadline-dev libffi-dev libsqlite3-dev libbz2-dev tk-dev -y
        $pyVersion = switch ("${{ matrix.python-version }}") {
          "3.7" { "3.7.17" }
          "3.8" { "3.8.18" }
          "3.9" { "3.9.18" }
          "3.10" { "3.10.13" }
          "3.11" { "3.11.8" }
          "3.12" { "3.12.2" }
        }
        Write-Output "Downloading ${{ matrix.python_pypy }} '$pyVersion'..."
        Invoke-WebRequest -Uri https://www.python.org/ftp/python/$pyVersion/Python-$pyVersion.tgz -OutFile Python-$pyVersion.tgz
        tar -xvf Python-$pyVersion.tgz
        $current_working_dir = (Get-Location).Path
        Set-Location -LiteralPath "Python-$pyVersion" -ErrorAction Stop
        $env:LDFLAGS="-Wl,-rpath=/usr/local/lib"
        sudo ./configure --enable-optimizations --with-ensurepip=install --enable-shared --disable-new-dtags
        sudo make -j $(nproc)
        sudo make altinstall
        Set-Location -LiteralPath $current_working_dir
      shell: pwsh
    
    - name: Reset APT sources to default
      if: ${{ runner.os == 'Linux' }}
      run: |
        echo "Resetting APT sources to default Ubuntu repositories"
        sudo rm /etc/apt/sources.list
        echo "deb http://archive.ubuntu.com/ubuntu $(lsb_release -cs) main restricted universe multiverse" | sudo tee -a /etc/apt/sources.list
        echo "deb http://archive.ubuntu.com/ubuntu $(lsb_release -cs)-updates main restricted universe multiverse" | sudo tee -a /etc/apt/sources.list
        echo "deb http://archive.ubuntu.com/ubuntu $(lsb_release -cs)-backports main restricted universe multiverse" | sudo tee -a /etc/apt/sources.list
        echo "deb http://security.ubuntu.com/ubuntu $(lsb_release -cs)-security main restricted universe multiverse" | sudo tee -a /etc/apt/sources.list
        sudo apt-get update -y

    - name: Setup python venvs
      run: |  # create the venv early to work around an issue with the matrix runners' concurrency
        $pythonExeName = "${{ matrix.python_pypy }}"
        if ("${{ runner.os }}" -ne "Windows")
        {
          $pythonExeName = "${{ matrix.python_pypy }}${{ matrix.python-version }}"
          # LD_LIBRARY_PATH must be updated. However this won't be permanent, just long enough to create the venv.
          $env:LD_LIBRARY_PATH = "/usr/local/lib:$env:LD_LIBRARY_PATH"
        }
        & $pythonExeName -m venv .venv_${{ matrix.os }}_${{ matrix.python_pypy }}_${{ matrix.python-version }}_${{ matrix.architecture }}
      shell: pwsh

    - name: Install development packages
      if: ${{ success() || failure() }}
      run: |
        . ./install_python_venv.ps1 -noprompt -venv_name .venv_${{ matrix.os }}_${{ matrix.python_pypy }}_${{ matrix.python-version }}_${{ matrix.architecture }}
        & $pythonExePath -m pip install --upgrade pip
        if ($env:python_version -eq "3.7") {
          pip install -r requirements-dev-py37.txt --prefer-binary
        }
        else {
          pip install -r requirements-dev.txt --prefer-binary
        }
        pip list --outdated --format=json | ConvertFrom-Json | ForEach-Object { Write-Host "Upgrading '$($_.name)'"; pip install -U $_.name --upgrade-strategy "eager" }
      shell: pwsh

    - name: Run all unittests/pytests
      if: ${{ success() || failure() }}
      run: |
        . ./install_python_venv.ps1 -noprompt -venv_name .venv_${{ matrix.os }}_${{ matrix.python_pypy }}_${{ matrix.python-version }}_${{ matrix.architecture }}
        & $pythonExePath -m pytest tests -v -ra -o log_cli=true --capture=no --junitxml=pytest_report.xml --json --json-file=pytest_report.json --html=pytest_report.html --self-contained-html --tb=no --continue-on-collection-errors
      shell: pwsh
      continue-on-error: true

    - name: Upload Pytest Reports
      if: ${{ success() || failure() }}
      uses: actions/upload-artifact@v4
      with:
        name: pytest_report_${{ matrix.os }}_${{ matrix.python_pypy }}_${{ matrix.python-version }}_${{ matrix.architecture }}
        path: |
          pytest_report.json
          pytest_report.html
          pytest_report.xml
        retention-days: 90

  add-test-result-status-badges:
    needs: build  # do not start this job until all 'build' jobs complete
    if: ${{ success() || failure() }}
    runs-on: ubuntu-latest
    concurrency: 
      group: add-test-status-badges-${{ github.ref }}
      cancel-in-progress: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: all_pytest_reports
          pattern: pytest_report_*

      - name: Extract and update README with custom test status badges
        shell: pwsh
        run: |
          $testsResultsPath = "tests/results"
          $testsResultsCommitPath = Join-Path -Path $testsResultsPath -ChildPath "${{ github.sha }}"

          # Remove old tests to ensure every result is commit-specific.
          Remove-Item -Path $testsResultsPath -Recurse -Force -ErrorAction SilentlyContinue

          # Create the new tests directory for this commit.
          New-Item -ItemType Directory -Force -Path $testsResultsCommitPath -ErrorAction SilentlyContinue

          $artifact_reports_dir = "./all_pytest_reports"
          New-Item -ItemType Directory -Force -Path $artifact_reports_dir -ErrorAction SilentlyContinue
          Dir -Recurse $artifact_reports_dir | Get-Childitem
          Get-ChildItem $artifact_reports_dir | ForEach-Object {
            Write-Output "Moving '$($_.FullName)'' to '$testsResultsCommitPath'..."
            Move-Item -LiteralPath $_.FullName -Destination $testsResultsCommitPath
          }

          # Git configuration and commit
          $branchName = "${{ github.ref_name }}"
          git config --global user.name "GitHub Action"
          git config --global user.email "action@github.com"

          git fetch origin $branchName
          git add $testsResultsPath --force
          git add $testsResultsCommitPath --force
          git commit -m "Add test results"
          git push --force-with-lease origin HEAD:${{ github.ref_name }}
