

########################################################
## define only linter configurations below this point ##
########################################################

[tool.isort]
atomic = true
profile = "black"
line_length = 175
skip_gitignore = true
multi_line_output = 3

[tool.pyright.defineConstant]
PYQT5 = true
PYSIDE2 = false
PYQT6 = false
PYSIDE6 = false

[tool.yapf]
column_limit = 175
ALLOW_SPLIT_BEFORE_DEFAULT_OR_NAMED_ASSIGNS = false
ALLOW_SPLIT_BEFORE_DICT_VALUE = false
DISABLE_SPLIT_LIST_WITH_COMMENT = true
INDENT_DICTIONARY_VALUE = true
join_multiple_lines = false
no_spaces_around_selected_binary_operators = "*,/"
split_before_dict_set_generator = true
split_before_expression_after_opening_paren = false
split_complex_comprehension = true
split_penalty_after_opening_bracket = 50
split_penalty_excess_character = 75  # Lower penalty for going over the column limit
split_penalty_for_added_line_split = 100  # Discourage adding new line splits

[tool.ruff]
line-length = 175
preview = false
fix = true
force-exclude = true
show-fixes = true
output-format = "grouped"  # Group violations by containing file.
respect-gitignore = false

src = [
    "src"
]

[tool.ruff.lint]
task-tags = ["TODO", "FIXME", "HACK"]
exclude = [".venv", ".venv*", "*.history*"]
unfixable = [
    "F841",
    "ERA001",
    "N815",
    "RUF100",   # Unused `noqa` directive
    #"UP035",  # replaces deprecated/outdated imports (we want to support older versions of python in the future)
    #"UP038",  # non-pep604-isinstance (python 3.10 syntax)
]

[tool.ruff.lint.per-file-ignores]
"*.pyi" = [
    "I002", # from __future__ import annotations
]
".history/**" = ["ALL"]
".github/*py" = ["INP001"]
"__init__.py" = ["I001", "F401"]
"resources_rc.py" = ["ALL"]

[tool.ruff.lint.flake8-pytest-style]
fixture-parentheses = false
mark-parentheses = false
parametrize-names-type = "list"
parametrize-values-row-type = "list"
parametrize-values-type = "list"  # default
raises-require-match-for = ["requests.RequestException"]

[tool.ruff.lint.flake8-annotations]
ignore-fully-untyped = true
mypy-init-return = true
suppress-none-returning = true

[tool.ruff.lint.flake8-bandit]
check-typed-exception = true

[tool.ruff.lint.flake8-quotes]
docstring-quotes = "double"
inline-quotes = "double"
multiline-quotes = "double"

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"  # Disallow all relative imports.

[tool.ruff.lint.flake8-type-checking]
# Add quotes around type annotations, if doing so would allow an import to be moved into a type-checking block.
quote-annotations = true  # Does nothing when from __future__ import annotations is used
exempt-modules = ["typing", "typing_extensions"]
strict = true

[tool.ruff.lint.flake8-unused-arguments]
ignore-variadic-names = true

[tool.ruff.lint.isort]
case-sensitive = true
force-wrap-aliases = false
combine-as-imports = true
lines-between-types = 1
required-imports = ["from __future__ import annotations"]

[tool.ruff.format]
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
preview = false

[tool.ruff.lint.pyupgrade]
keep-runtime-typing = false

[tool.mccabe]
max-complexity = 25

[tool.bandit]
tests = ["B201", "B301"]
skips = ["B101", "B601"]

[tool.ruff.lint.pycodestyle]
max-doc-length = 200

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.style]
based_on_style = "google"
split_before_named_assigns = true
split_complex_comprehension = true
split_arguments_when_comma_terminated = true

[tool.pylintrc]
max-line-length = 200

[tool.pytest.ini_options]
log_cli = true
log_cli_level = "CRITICAL"
log_cli_format = "%(message)s"

log_file = "pytest.log"
log_file_level = "DEBUG"
log_file_format = "%(asctime)s [%(levelname)8s] %(message)s (%(filename)s:%(lineno)s)"
log_file_date_format = "%Y-%m-%d %H:%M:%S"
