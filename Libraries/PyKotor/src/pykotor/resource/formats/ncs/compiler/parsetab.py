
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
from __future__ import annotations

_tabversion = "3.10"

_lr_method = "LALR"

_lr_signature = "leftORleftANDleftBITWISE_ORleftBITWISE_XORleftBITWISE_ANDleftEQUALSNOT_EQUALSleftGREATER_THANLESS_THANGREATER_THAN_OR_EQUALSLESS_THAN_OR_EQUALSleftBITWISE_LEFTBITWISE_RIGHTleftADDMINUSleftMULTIPLYDIVIDEMODrightBITWISE_NOTNOTleftINCREMENTDECREMENTACTION_TYPE ADD ADDITION_ASSIGNMENT_OPERATOR AND BITWISE_AND BITWISE_LEFT BITWISE_NOT BITWISE_OR BITWISE_RIGHT BITWISE_XOR BREAK_CONTROL CASE_CONTROL CONTINUE_CONTROL DECREMENT DEFAULT_CONTROL DIVIDE DIVISION_ASSIGNMENT_OPERATOR DO_CONTROL EFFECT_TYPE ELSE_CONTROL EQUALS EVENT_TYPE FALSE_VALUE FLOAT_TYPE FLOAT_VALUE FOR_CONTROL GREATER_THAN GREATER_THAN_OR_EQUALS IDENTIFIER IF_CONTROL INCLUDE INCREMENT INT_HEX_VALUE INT_TYPE INT_VALUE ITEMPROPERTY_TYPE LESS_THAN LESS_THAN_OR_EQUALS LOCATION_TYPE MINUS MOD MULTIPLICATION_ASSIGNMENT_OPERATOR MULTIPLY NOP NOT NOT_EQUALS OBJECTINVALID_VALUE OBJECTSELF_VALUE OBJECT_TYPE OR RETURN STRING_TYPE STRING_VALUE STRUCT SUBTRACTION_ASSIGNMENT_OPERATOR SWITCH_CONTROL TALENT_TYPE TRUE_VALUE VECTOR_TYPE VOID_TYPE WHILE_CONTROL\n        code_root : code_root code_root_object\n                  |\n        \n        code_root_object : function_definition\n                         | include_script\n                         | function_forward_declaration\n                         | global_variable_declaration\n                         | global_variable_initialization\n                         | struct_definition\n        \n        struct_definition : STRUCT IDENTIFIER '{' struct_members '}' ';'\n        \n        struct_members : struct_members struct_member\n                       |\n        \n        struct_member : data_type IDENTIFIER ';'\n        \n        include_script : INCLUDE STRING_VALUE\n        \n        global_variable_initialization : data_type IDENTIFIER '=' expression ';'\n        \n        global_variable_declaration : data_type IDENTIFIER ';'\n        \n        function_forward_declaration : data_type IDENTIFIER '(' function_definition_params ')' ';'\n        \n        function_definition : data_type IDENTIFIER '(' function_definition_params ')' '{' code_block '}'\n        \n        function_definition_params : function_definition_params ',' function_definition_param\n                                   | function_definition_param\n                                   |\n        \n        function_definition_param : data_type IDENTIFIER\n        \n        function_definition_param : data_type IDENTIFIER '=' expression\n        \n        code_block : code_block statement\n                   | statement\n                   |\n        \n        while_loop : WHILE_CONTROL '(' expression ')' '{' code_block '}'\n        \n        do_while_loop : DO_CONTROL '{' code_block '}' WHILE_CONTROL '(' expression ')' ';'\n        \n        for_loop : FOR_CONTROL '(' expression ';' expression ';' expression ')' '{' code_block '}'\n        \n        scoped_block : '{' code_block '}'\n        \n        statement : ';'\n                  | declaration_statement\n                  | condition_statement\n                  | return_statement\n                  | while_loop\n                  | do_while_loop\n                  | for_loop\n                  | switch_statement\n                  | break_statement\n                  | continue_statement\n                  | scoped_block\n        \n        statement : NOP STRING_VALUE ';'\n        \n        statement : expression ';'\n        \n        break_statement : BREAK_CONTROL ';'\n        \n        continue_statement : CONTINUE_CONTROL ';'\n        \n        declaration_statement : data_type variable_declarators ';'\n        \n        variable_declarators : variable_declarators ',' variable_declarator\n                             | variable_declarator\n        \n        variable_declarator : IDENTIFIER\n        \n        variable_declarator : IDENTIFIER '=' expression\n        \n        assignment : field_access '=' expression\n        \n        assignment : field_access ADDITION_ASSIGNMENT_OPERATOR expression\n        \n        assignment : field_access SUBTRACTION_ASSIGNMENT_OPERATOR expression\n        \n        assignment : field_access MULTIPLICATION_ASSIGNMENT_OPERATOR expression\n        \n        assignment : field_access DIVISION_ASSIGNMENT_OPERATOR expression\n        \n        condition_statement : if_statement else_if_statements else_statement\n        \n        if_statement : IF_CONTROL '(' expression ')' '{' code_block '}'\n        \n        if_statement : IF_CONTROL '(' expression ')' statement\n        \n        else_statement : ELSE_CONTROL '{' code_block '}'\n                       |\n        \n        else_statement : ELSE_CONTROL statement\n        \n        else_if_statement : ELSE_CONTROL IF_CONTROL '(' expression ')' '{' code_block '}'\n        \n        else_if_statement : ELSE_CONTROL IF_CONTROL '(' expression ')' statement\n        \n        else_if_statements : else_if_statements else_if_statement\n                           |\n        \n        expression : '(' expression ')'\n        \n        expression : expression GREATER_THAN expression\n                   | expression GREATER_THAN_OR_EQUALS expression\n                   | expression LESS_THAN expression\n                   | expression LESS_THAN_OR_EQUALS expression\n                   | expression AND expression\n                   | expression NOT_EQUALS expression\n                   | expression EQUALS expression\n                   | expression OR expression\n                   | expression ADD expression\n                   | expression MINUS expression\n                   | expression MULTIPLY expression\n                   | expression DIVIDE expression\n                   | expression BITWISE_OR expression\n                   | expression BITWISE_XOR expression\n                   | expression BITWISE_AND expression\n                   | expression BITWISE_LEFT expression\n                   | expression BITWISE_RIGHT expression\n                   | expression MOD expression\n        \n        expression : MINUS expression\n                   | BITWISE_NOT expression\n                   | NOT expression\n        \n        return_statement : RETURN ';'\n                         | RETURN expression ';'\n        \n        expression : function_call\n                   | IDENTIFIER\n                   | assignment\n                   | constant_expression\n        \n        constant_expression : INT_VALUE\n                            | FLOAT_VALUE\n                            | STRING_VALUE\n                            | OBJECTSELF_VALUE\n                            | OBJECTINVALID_VALUE\n                            | TRUE_VALUE\n                            | FALSE_VALUE\n                            | INT_HEX_VALUE\n        \n        expression : field_access\n        \n        function_call : IDENTIFIER '(' function_call_params ')'\n        \n        function_call_params : function_call_params ',' expression\n                             | expression\n                             |\n        \n        data_type : INT_TYPE\n                  | FLOAT_TYPE\n                  | OBJECT_TYPE\n                  | VOID_TYPE\n                  | EVENT_TYPE\n                  | EFFECT_TYPE\n                  | ITEMPROPERTY_TYPE\n                  | LOCATION_TYPE\n                  | STRING_TYPE\n                  | TALENT_TYPE\n                  | VECTOR_TYPE\n                  | ACTION_TYPE\n                  | STRUCT IDENTIFIER\n        \n        field_access : IDENTIFIER\n                     | IDENTIFIER '.' IDENTIFIER\n                     | field_access '.' IDENTIFIER\n        \n        expression : INCREMENT field_access\n        \n        expression : field_access INCREMENT\n        \n        expression : DECREMENT field_access\n        \n        expression : field_access DECREMENT\n        \n        expression : '[' FLOAT_VALUE ',' FLOAT_VALUE ',' FLOAT_VALUE ']'\n        \n        switch_statement : SWITCH_CONTROL '(' expression ')' '{' switch_blocks '}'\n        \n        switch_blocks : switch_blocks switch_block\n                      |\n        \n        switch_block : switch_labels block_statements\n        \n        switch_labels : switch_labels switch_label\n                      |\n        \n        switch_label : CASE_CONTROL expression ':'\n        \n        switch_label : DEFAULT_CONTROL ':'\n        \n        block_statements : block_statements statement\n                         |\n        "

_lr_action_items = {
    "INCLUDE": (
      [0, 1, 2, 3, 4, 5, 6, 7, 8, 25, 28, 63, 103, 134, 171],
      [-2, 10, -1, -3, -4, -5, -6, -7, -8, -13, -15, -14, -16, -9, -17]
    ),
    "STRUCT": (
       [0, 1, 2, 3, 4, 5, 6, 7, 8, 25, 27, 28, 30, 56, 59, 63, 99, 102, 103, 134, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 154, 166, 170, 171, 172, 174, 175, 176, 179, 182, 183, 187, 190, 191, 192, 193, 194, 195, 197, 204, 205, 211, 213, 215, 218, 219, 220, 221, 223, 226, 227, 228, 229, 232, 233, 234, 235, 236, 237, 240, 241, 244, 245, 246, 247, 249, 250, 251, 252, 253],
       [-2, 11, -1, -3, -4, -5, -6, -7, -8, -13, 34, -15, -11, 34, 34, -14, -10, 34, -16, -9, 34, 34, -24, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -40, -64, -12, 34, -17, -23, -42, -59, -87, 34, -43, -44, -45, -29, -41, -55, -63, 34, -88, 34, 34, -60, 34, 34, 34, -129, 34, -57, -29, 34, -132, 34, 34, -26, -127, -128, -136, -29, 34, -57, 34, -131, 34, -27, 34, -135, -134, -29, 34, -133, -28]
    ),
    "INT_TYPE": (
        [0, 1, 2, 3, 4, 5, 6, 7, 8, 25, 27, 28, 30, 56, 59, 63, 99, 102, 103, 134, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 154, 166, 170, 171, 172, 174, 175, 176, 179, 182, 183, 187, 190, 191, 192, 193, 194, 195, 197, 204, 205, 211, 213, 215, 218, 219, 220, 221, 223, 226, 227, 228, 229, 232, 233, 234, 235, 236, 237, 240, 241, 244, 245, 246, 247, 249, 250, 251, 252, 253],
        [-2, 12, -1, -3, -4, -5, -6, -7, -8, -13, 12, -15, -11, 12, 12, -14, -10, 12, -16, -9, 12, 12, -24, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -40, -64, -12, 12, -17, -23, -42, -59, -87, 12, -43, -44, -45, -29, -41, -55, -63, 12, -88, 12, 12, -60, 12, 12, 12, -129, 12, -57, -29, 12, -132, 12, 12, -26, -127, -128, -136, -29, 12, -57, 12, -131, 12, -27, 12, -135, -134, -29, 12, -133, -28]
    ),
    "FLOAT_TYPE": (
       [0, 1, 2, 3, 4, 5, 6, 7, 8, 25, 27, 28, 30, 56, 59, 63, 99, 102, 103, 134, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 154, 166, 170, 171, 172, 174, 175, 176, 179, 182, 183, 187, 190, 191, 192, 193, 194, 195, 197, 204, 205, 211, 213, 215, 218, 219, 220, 221, 223, 226, 227, 228, 229, 232, 233, 234, 235, 236, 237, 240, 241, 244, 245, 246, 247, 249, 250, 251, 252, 253],
       [-2, 13, -1, -3, -4, -5, -6, -7, -8, -13, 13, -15, -11, 13, 13, -14, -10, 13, -16, -9, 13, 13, -24, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -40, -64, -12, 13, -17, -23, -42, -59, -87, 13, -43, -44, -45, -29, -41, -55, -63, 13, -88, 13, 13, -60, 13, 13, 13, -129, 13, -57, -29, 13, -132, 13, 13, -26, -127, -128, -136, -29, 13, -57, 13, -131, 13, -27, 13, -135, -134, -29, 13, -133, -28]
    ),
    "OBJECT_TYPE": (
       [0, 1, 2, 3, 4, 5, 6, 7, 8, 25, 27, 28, 30, 56, 59, 63, 99, 102, 103, 134, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 154, 166, 170, 171, 172, 174, 175, 176, 179, 182, 183, 187, 190, 191, 192, 193, 194, 195, 197, 204, 205, 211, 213, 215, 218, 219, 220, 221, 223, 226, 227, 228, 229, 232, 233, 234, 235, 236, 237, 240, 241, 244, 245, 246, 247, 249, 250, 251, 252, 253],
       [-2, 14, -1, -3, -4, -5, -6, -7, -8, -13, 14, -15, -11, 14, 14, -14, -10, 14, -16, -9, 14, 14, -24, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -40, -64, -12, 14, -17, -23, -42, -59, -87, 14, -43, -44, -45, -29, -41, -55, -63, 14, -88, 14, 14, -60, 14, 14, 14, -129, 14, -57, -29, 14, -132, 14, 14, -26, -127, -128, -136, -29, 14, -57, 14, -131, 14, -27, 14, -135, -134, -29, 14, -133, -28]
    ),
    "VOID_TYPE": (
        [0, 1, 2, 3, 4, 5, 6, 7, 8, 25, 27, 28, 30, 56, 59, 63, 99, 102, 103, 134, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 154, 166, 170, 171, 172, 174, 175, 176, 179, 182, 183, 187, 190, 191, 192, 193, 194, 195, 197, 204, 205, 211, 213, 215, 218, 219, 220, 221, 223, 226, 227, 228, 229, 232, 233, 234, 235, 236, 237, 240, 241, 244, 245, 246, 247, 249, 250, 251, 252, 253],
        [-2, 15, -1, -3, -4, -5, -6, -7, -8, -13, 15, -15, -11, 15, 15, -14, -10, 15, -16, -9, 15, 15, -24, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -40, -64, -12, 15, -17, -23, -42, -59, -87, 15, -43, -44, -45, -29, -41, -55, -63, 15, -88, 15, 15, -60, 15, 15, 15, -129, 15, -57, -29, 15, -132, 15, 15, -26, -127, -128, -136, -29, 15, -57, 15, -131, 15, -27, 15, -135, -134, -29, 15, -133, -28]
    ),
    "EVENT_TYPE": (
        [0, 1, 2, 3, 4, 5, 6, 7, 8, 25, 27, 28, 30, 56, 59, 63, 99, 102, 103, 134, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 154, 166, 170, 171, 172, 174, 175, 176, 179, 182, 183, 187, 190, 191, 192, 193, 194, 195, 197, 204, 205, 211, 213, 215, 218, 219, 220, 221, 223, 226, 227, 228, 229, 232, 233, 234, 235, 236, 237, 240, 241, 244, 245, 246, 247, 249, 250, 251, 252, 253],
        [-2, 16, -1, -3, -4, -5, -6, -7, -8, -13, 16, -15, -11, 16, 16, -14, -10, 16, -16, -9, 16, 16, -24, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -40, -64, -12, 16, -17, -23, -42, -59, -87, 16, -43, -44, -45, -29, -41, -55, -63, 16, -88, 16, 16, -60, 16, 16, 16, -129, 16, -57, -29, 16, -132, 16, 16, -26, -127, -128, -136, -29, 16, -57, 16, -131, 16, -27, 16, -135, -134, -29, 16, -133, -28]
    ),
    "EFFECT_TYPE": (
       [0, 1, 2, 3, 4, 5, 6, 7, 8, 25, 27, 28, 30, 56, 59, 63, 99, 102, 103, 134, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 154, 166, 170, 171, 172, 174, 175, 176, 179, 182, 183, 187, 190, 191, 192, 193, 194, 195, 197, 204, 205, 211, 213, 215, 218, 219, 220, 221, 223, 226, 227, 228, 229, 232, 233, 234, 235, 236, 237, 240, 241, 244, 245, 246, 247, 249, 250, 251, 252, 253],
       [-2, 17, -1, -3, -4, -5, -6, -7, -8, -13, 17, -15, -11, 17, 17, -14, -10, 17, -16, -9, 17, 17, -24, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -40, -64, -12, 17, -17, -23, -42, -59, -87, 17, -43, -44, -45, -29, -41, -55, -63, 17, -88, 17, 17, -60, 17, 17, 17, -129, 17, -57, -29, 17, -132, 17, 17, -26, -127, -128, -136, -29, 17, -57, 17, -131, 17, -27, 17, -135, -134, -29, 17, -133, -28]
    ),
    "ITEMPROPERTY_TYPE": (
       [0, 1, 2, 3, 4, 5, 6, 7, 8, 25, 27, 28, 30, 56, 59, 63, 99, 102, 103, 134, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 154, 166, 170, 171, 172, 174, 175, 176, 179, 182, 183, 187, 190, 191, 192, 193, 194, 195, 197, 204, 205, 211, 213, 215, 218, 219, 220, 221, 223, 226, 227, 228, 229, 232, 233, 234, 235, 236, 237, 240, 241, 244, 245, 246, 247, 249, 250, 251, 252, 253],
       [-2, 18, -1, -3, -4, -5, -6, -7, -8, -13, 18, -15, -11, 18, 18, -14, -10, 18, -16, -9, 18, 18, -24, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -40, -64, -12, 18, -17, -23, -42, -59, -87, 18, -43, -44, -45, -29, -41, -55, -63, 18, -88, 18, 18, -60, 18, 18, 18, -129, 18, -57, -29, 18, -132, 18, 18, -26, -127, -128, -136, -29, 18, -57, 18, -131, 18, -27, 18, -135, -134, -29, 18, -133, -28]
    ),
    "LOCATION_TYPE": (
       [0, 1, 2, 3, 4, 5, 6, 7, 8, 25, 27, 28, 30, 56, 59, 63, 99, 102, 103, 134, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 154, 166, 170, 171, 172, 174, 175, 176, 179, 182, 183, 187, 190, 191, 192, 193, 194, 195, 197, 204, 205, 211, 213, 215, 218, 219, 220, 221, 223, 226, 227, 228, 229, 232, 233, 234, 235, 236, 237, 240, 241, 244, 245, 246, 247, 249, 250, 251, 252, 253],
       [-2, 19, -1, -3, -4, -5, -6, -7, -8, -13, 19, -15, -11, 19, 19, -14, -10, 19, -16, -9, 19, 19, -24, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -40, -64, -12, 19, -17, -23, -42, -59, -87, 19, -43, -44, -45, -29, -41, -55, -63, 19, -88, 19, 19, -60, 19, 19, 19, -129, 19, -57, -29, 19, -132, 19, 19, -26, -127, -128, -136, -29, 19, -57, 19, -131, 19, -27, 19, -135, -134, -29, 19, -133, -28]
    ),
    "STRING_TYPE": (
       [0, 1, 2, 3, 4, 5, 6, 7, 8, 25, 27, 28, 30, 56, 59, 63, 99, 102, 103, 134, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 154, 166, 170, 171, 172, 174, 175, 176, 179, 182, 183, 187, 190, 191, 192, 193, 194, 195, 197, 204, 205, 211, 213, 215, 218, 219, 220, 221, 223, 226, 227, 228, 229, 232, 233, 234, 235, 236, 237, 240, 241, 244, 245, 246, 247, 249, 250, 251, 252, 253],
       [-2, 20, -1, -3, -4, -5, -6, -7, -8, -13, 20, -15, -11, 20, 20, -14, -10, 20, -16, -9, 20, 20, -24, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -40, -64, -12, 20, -17, -23, -42, -59, -87, 20, -43, -44, -45, -29, -41, -55, -63, 20, -88, 20, 20, -60, 20, 20, 20, -129, 20, -57, -29, 20, -132, 20, 20, -26, -127, -128, -136, -29, 20, -57, 20, -131, 20, -27, 20, -135, -134, -29, 20, -133, -28]
    ),
    "TALENT_TYPE": (
       [0, 1, 2, 3, 4, 5, 6, 7, 8, 25, 27, 28, 30, 56, 59, 63, 99, 102, 103, 134, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 154, 166, 170, 171, 172, 174, 175, 176, 179, 182, 183, 187, 190, 191, 192, 193, 194, 195, 197, 204, 205, 211, 213, 215, 218, 219, 220, 221, 223, 226, 227, 228, 229, 232, 233, 234, 235, 236, 237, 240, 241, 244, 245, 246, 247, 249, 250, 251, 252, 253],
       [-2, 21, -1, -3, -4, -5, -6, -7, -8, -13, 21, -15, -11, 21, 21, -14, -10, 21, -16, -9, 21, 21, -24, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -40, -64, -12, 21, -17, -23, -42, -59, -87, 21, -43, -44, -45, -29, -41, -55, -63, 21, -88, 21, 21, -60, 21, 21, 21, -129, 21, -57, -29, 21, -132, 21, 21, -26, -127, -128, -136, -29, 21, -57, 21, -131, 21, -27, 21, -135, -134, -29, 21, -133, -28]
    ),
    "VECTOR_TYPE": (
       [0, 1, 2, 3, 4, 5, 6, 7, 8, 25, 27, 28, 30, 56, 59, 63, 99, 102, 103, 134, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 154, 166, 170, 171, 172, 174, 175, 176, 179, 182, 183, 187, 190, 191, 192, 193, 194, 195, 197, 204, 205, 211, 213, 215, 218, 219, 220, 221, 223, 226, 227, 228, 229, 232, 233, 234, 235, 236, 237, 240, 241, 244, 245, 246, 247, 249, 250, 251, 252, 253],
       [-2, 22, -1, -3, -4, -5, -6, -7, -8, -13, 22, -15, -11, 22, 22, -14, -10, 22, -16, -9, 22, 22, -24, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -40, -64, -12, 22, -17, -23, -42, -59, -87, 22, -43, -44, -45, -29, -41, -55, -63, 22, -88, 22, 22, -60, 22, 22, 22, -129, 22, -57, -29, 22, -132, 22, 22, -26, -127, -128, -136, -29, 22, -57, 22, -131, 22, -27, 22, -135, -134, -29, 22, -133, -28]
    ),
    "ACTION_TYPE": (
       [0, 1, 2, 3, 4, 5, 6, 7, 8, 25, 27, 28, 30, 56, 59, 63, 99, 102, 103, 134, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 154, 166, 170, 171, 172, 174, 175, 176, 179, 182, 183, 187, 190, 191, 192, 193, 194, 195, 197, 204, 205, 211, 213, 215, 218, 219, 220, 221, 223, 226, 227, 228, 229, 232, 233, 234, 235, 236, 237, 240, 241, 244, 245, 246, 247, 249, 250, 251, 252, 253],
       [-2, 23, -1, -3, -4, -5, -6, -7, -8, -13, 23, -15, -11, 23, 23, -14, -10, 23, -16, -9, 23, 23, -24, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -40, -64, -12, 23, -17, -23, -42, -59, -87, 23, -43, -44, -45, -29, -41, -55, -63, 23, -88, 23, 23, -60, 23, 23, 23, -129, 23, -57, -29, 23, -132, 23, 23, -26, -127, -128, -136, -29, 23, -57, 23, -131, 23, -27, 23, -135, -134, -29, 23, -133, -28]
    ),
    "$end": (
       [0, 1, 2, 3, 4, 5, 6, 7, 8, 25, 28, 63, 103, 134, 171],
       [-2, 0, -1, -3, -4, -5, -6, -7, -8, -13, -15, -14, -16, -9, -17]
    ),
    "IDENTIFIER": (
       [9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 26, 29, 31, 34, 37, 38, 39, 40, 45, 46, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 88, 89, 90, 91, 92, 93, 100, 101, 102, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 154, 155, 164, 170, 172, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 204, 205, 209, 211, 213, 214, 215, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 232, 233, 234, 235, 236, 237, 240, 241, 242, 244, 245, 246, 247, 249, 250, 251, 252, 253],
       [24, 26, -106, -107, -108, -109, -110, -111, -112, -113, -114, -115, -116, -117, -118, 35, 57, 60, 35, 35, 35, 35, 95, 95, -118, 35, 107, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 132, 135, 35, 35, 169, 35, 35, -24, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -40, -64, 35, 35, 35, -23, -42, -59, -87, 35, 35, 35, 35, -43, -44, 35, -45, 169, 35, -29, -41, -55, -63, 35, -88, 35, 35, -60, 35, 35, 35, 35, 35, -129, 35, -57, -29, 35, 35, 35, -132, 35, 35, -26, -127, -128, -136, -29, 35, -57, 35, -131, 35, 35, -27, 35, -135, -134, -29, 35, -133, -28]
    ),
    "STRING_VALUE": (
       [10, 29, 37, 38, 39, 40, 61, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 88, 89, 90, 91, 92, 101, 102, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 164, 170, 172, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 187, 189, 190, 191, 192, 193, 194, 195, 197, 204, 205, 209, 211, 213, 214, 215, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 232, 233, 234, 235, 236, 237, 240, 241, 242, 244, 245, 246, 247, 249, 250, 251, 252, 253],
       [25, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, -24, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -40, 173, -64, 50, 50, 50, -23, -42, -59, -87, 50, 50, 50, 50, -43, -44, 50, -45, 50, -29, -41, -55, -63, 50, -88, 50, 50, -60, 50, 50, 50, 50, 50, -129, 50, -57, -29, 50, 50, 50, -132, 50, 50, -26, -127, -128, -136, -29, 50, -57, 50, -131, 50, 50, -27, 50, -135, -134, -29, 50, -133, -28]
    ),
    "(": (
       [24, 29, 35, 37, 38, 39, 40, 61, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 88, 89, 90, 91, 92, 101, 102, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 154, 155, 156, 158, 159, 162, 164, 170, 172, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 187, 189, 190, 191, 192, 193, 194, 195, 197, 204, 205, 206, 209, 211, 213, 214, 215, 216, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 232, 233, 234, 235, 236, 237, 240, 241, 242, 244, 245, 246, 247, 249, 250, 251, 252, 253],
       [27, 37, 61, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, -24, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -40, -64, 37, 178, 180, 181, 184, 37, 37, -23, -42, -59, -87, 37, 37, 37, 37, -43, -44, 37, -45, 37, -29, -41, -55, -63, 37, -88, 37, 37, -60, 214, 37, 37, 37, 37, 37, 224, -129, 37, -57, -29, 37, 37, 37, -132, 37, 37, -26, -127, -128, -136, -29, 37, -57, 37, -131, 37, 37, -27, 37, -135, -134, -29, 37, -133, -28]
    ),
    ";": (
       [24, 35, 36, 41, 42, 43, 44, 48, 49, 50, 51, 52, 53, 54, 55, 58, 83, 84, 85, 86, 87, 94, 95, 96, 98, 102, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 154, 155, 160, 161, 163, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 179, 182, 183, 187, 190, 191, 192, 193, 194, 195, 197, 198, 202, 203, 204, 205, 211, 212, 213, 215, 217, 218, 219, 220, 221, 223, 226, 227, 228, 229, 232, 233, 234, 235, 236, 237, 238, 240, 241, 244, 245, 246, 247, 249, 250, 251, 252, 253],
       [28, -90, 63, -89, -91, -92, -101, -94, -93, -95, -96, -97, -98, -99, -100, 103, -84, -85, -86, -123, -125, -122, -119, -124, 134, 141, -120, -66, -67, -68, -69, -70, -71, -72, -73, -74, -75, -76, -77, -78, -79, -80, -81, -82, -83, -65, -50, -51, -52, -53, -54, -121, 166, 141, 141, -24, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -40, 174, -64, 176, 182, 183, -102, 187, -47, -48, 141, -23, 191, -42, -59, -87, 195, 141, -43, -44, -45, -29, -41, -55, -63, 141, -88, 141, 209, -46, -49, 141, -60, 141, -126, 141, 141, 225, -129, 141, -57, -29, 141, -132, 141, 141, -26, -127, -128, -136, -29, 141, -57, 245, 141, -131, 141, -27, 141, -135, -134, -29, 141, -133, -28]
    ),
    "=": (
       [24, 35, 44, 57, 107, 132, 169],
       [29, -119, 88, 101, -120, -121, 189]
    ),
    "{": (
       [26, 58, 102, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 154, 157, 170, 172, 174, 175, 176, 179, 182, 183, 187, 190, 191, 192, 193, 194, 195, 197, 204, 205, 207, 210, 211, 213, 215, 218, 219, 220, 221, 223, 226, 227, 228, 229, 232, 233, 234, 235, 236, 237, 239, 240, 241, 244, 245, 246, 247, 249, 250, 251, 252, 253],
       [30, 102, 138, 138, 138, -24, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -40, -64, 179, 138, -23, -42, -59, -87, 138, -43, -44, -45, -29, -41, -55, -63, 204, -88, 138, 138, -60, 215, 218, 219, 138, 138, -129, 138, -57, -29, 138, -132, 138, 236, -26, -127, -128, -136, -29, 138, -57, 246, 138, -131, 138, -27, 138, -135, -134, -29, 138, -133, -28],
    ),
    ")": (
       [27, 32, 33, 35, 41, 42, 43, 44, 48, 49, 50, 51, 52, 53, 54, 55, 57, 61, 82, 83, 84, 85, 86, 87, 94, 95, 96, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 136, 163, 185, 196, 199, 200, 212, 222, 230, 231],
       [-20, 58, -19, -90, -89, -91, -92, -101, -94, -93, -95, -96, -97, -98, -99, -100, -21, -105, 126, -84, -85, -86, -123, -125, -122, -119, -124, -18, 163, -104, -120, -66, -67, -68, -69, -70, -71, -72, -73, -74, -75, -76, -77, -78, -79, -80, -81, -82, -83, -65, -50, -51, -52, -53, -54, -121, -22, -102, -103, 207, 210, 211, -126, 228, 238, 239]
    ),
    ",": (
       [27, 32, 33, 35, 41, 42, 43, 44, 48, 49, 50, 51, 52, 53, 54, 55, 57, 61, 83, 84, 85, 86, 87, 94, 95, 96, 97, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 136, 163, 165, 167, 168, 169, 185, 202, 203, 212],
       [-20, 59, -19, -90, -89, -91, -92, -101, -94, -93, -95, -96, -97, -98, -99, -100, -21, -105, -84, -85, -86, -123, -125, -122, -119, -124, 133, -18, 164, -104, -120, -66, -67, -68, -69, -70, -71, -72, -73, -74, -75, -76, -77, -78, -79, -80, -81, -82, -83, -65, -50, -51, -52, -53, -54, -121, -22, -102, 186, 188, -47, -48, -103, -46, -49, -126]
    ),
    "MINUS": (
       [29, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 48, 49, 50, 51, 52, 53, 54, 55, 61, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 101, 102, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 154, 155, 163, 164, 170, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 203, 204, 205, 209, 211, 212, 213, 214, 215, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253],
       [38, -90, 73, 38, 38, 38, 38, -89, -91, -92, -101, -94, -93, -95, -96, -97, -98, -99, -100, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 73, -84, -85, -86, -123, -125, 38, 38, 38, 38, 38, -122, -119, -124, 38, 38, 73, -120, 73, 73, 73, 73, 73, 73, 73, 73, -74, -75, -76, -77, 73, 73, 73, 73, 73, -83, -65, 73, 73, 73, 73, 73, -121, 73, 38, 38, -24, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -40, 73, -64, 38, -102, 38, 38, -23, -42, -59, -87, 73, 38, 38, 38, 38, -43, -44, 38, 73, -45, 38, -29, -41, -55, -63, 38, -88, 73, 38, 73, 73, 73, 73, 38, -60, 38, 38, -126, 38, 38, 38, 73, -129, 38, -57, -29, 73, 38, 38, 38, -132, 38, 38, -26, 73, 73, -127, -128, -136, -29, 38, -57, 38, -131, 38, 38, -27, 38, -135, 73, -134, -29, 38, -133, -28]
    ),
    "BITWISE_NOT": (
        [29, 37, 38, 39, 40, 61, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 88, 89, 90, 91, 92, 101, 102, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 154, 155, 164, 170, 172, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 187, 189, 190, 191, 192, 193, 194, 195, 197, 204, 205, 209, 211, 213, 214, 215, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 232, 233, 234, 235, 236, 237, 240, 241, 242, 244, 245, 246, 247, 249, 250, 251, 252, 253],
        [39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, -24, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -40, -64, 39, 39, 39, -23, -42, -59, -87, 39, 39, 39, 39, -43, -44, 39, -45, 39, -29, -41, -55, -63, 39, -88, 39, 39, -60, 39, 39, 39, 39, 39, -129, 39, -57, -29, 39, 39, 39, -132, 39, 39, -26, -127, -128, -136, -29, 39, -57, 39, -131, 39, 39, -27, 39, -135, -134, -29, 39, -133, -28]
    ),
    "NOT": (
        [29, 37, 38, 39, 40, 61, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 88, 89, 90, 91, 92, 101, 102, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 154, 155, 164, 170, 172, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 187, 189, 190, 191, 192, 193, 194, 195, 197, 204, 205, 209, 211, 213, 214, 215, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 232, 233, 234, 235, 236, 237, 240, 241, 242, 244, 245, 246, 247, 249, 250, 251, 252, 253],
        [40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, -24, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -40, -64, 40, 40, 40, -23, -42, -59, -87, 40, 40, 40, 40, -43, -44, 40, -45, 40, -29, -41, -55, -63, 40, -88, 40, 40, -60, 40, 40, 40, 40, 40, -129, 40, -57, -29, 40, 40, 40, -132, 40, 40, -26, -127, -128, -136, -29, 40, -57, 40, -131, 40, 40, -27, 40, -135, -134, -29, 40, -133, -28]
    ),
    "INCREMENT": (
        [29, 35, 37, 38, 39, 40, 44, 61, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 88, 89, 90, 91, 92, 101, 102, 107, 132, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 154, 155, 164, 170, 172, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 187, 189, 190, 191, 192, 193, 194, 195, 197, 204, 205, 209, 211, 213, 214, 215, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 232, 233, 234, 235, 236, 237, 240, 241, 242, 244, 245, 246, 247, 249, 250, 251, 252, 253],
        [45, -119, 45, 45, 45, 45, 86, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, -120, -121, 45, 45, -24, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -40, -64, 45, 45, 45, -23, -42, -59, -87, 45, 45, 45, 45, -43, -44, 45, -45, 45, -29, -41, -55, -63, 45, -88, 45, 45, -60, 45, 45, 45, 45, 45, -129, 45, -57, -29, 45, 45, 45, -132, 45, 45, -26, -127, -128, -136, -29, 45, -57, 45, -131, 45, 45, -27, 45, -135, -134, -29, 45, -133, -28]
    ),
    "DECREMENT": (
        [29, 35, 37, 38, 39, 40, 44, 61, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 88, 89, 90, 91, 92, 101, 102, 107, 132, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 154, 155, 164, 170, 172, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 187, 189, 190, 191, 192, 193, 194, 195, 197, 204, 205, 209, 211, 213, 214, 215, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 232, 233, 234, 235, 236, 237, 240, 241, 242, 244, 245, 246, 247, 249, 250, 251, 252, 253],
        [46, -119, 46, 46, 46, 46, 87, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, -120, -121, 46, 46, -24, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -40, -64, 46, 46, 46, -23, -42, -59, -87, 46, 46, 46, 46, -43, -44, 46, -45, 46, -29, -41, -55, -63, 46, -88, 46, 46, -60, 46, 46, 46, 46, 46, -129, 46, -57, -29, 46, 46, 46, -132, 46, 46, -26, -127, -128, -136, -29, 46, -57, 46, -131, 46, 46, -27, 46, -135, -134, -29, 46, -133, -28]
    ),
    "[": (
        [29, 37, 38, 39, 40, 61, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 88, 89, 90, 91, 92, 101, 102, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 154, 155, 164, 170, 172, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 187, 189, 190, 191, 192, 193, 194, 195, 197, 204, 205, 209, 211, 213, 214, 215, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 232, 233, 234, 235, 236, 237, 240, 241, 242, 244, 245, 246, 247, 249, 250, 251, 252, 253],
        [47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, -24, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -40, -64, 47, 47, 47, -23, -42, -59, -87, 47, 47, 47, 47, -43, -44, 47, -45, 47, -29, -41, -55, -63, 47, -88, 47, 47, -60, 47, 47, 47, 47, 47, -129, 47, -57, -29, 47, 47, 47, -132, 47, 47, -26, -127, -128, -136, -29, 47, -57, 47, -131, 47, 47, -27, 47, -135, -134, -29, 47, -133, -28]
    ),
    "INT_VALUE": (
        [29, 37, 38, 39, 40, 61, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 88, 89, 90, 91, 92, 101, 102, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 154, 155, 164, 170, 172, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 187, 189, 190, 191, 192, 193, 194, 195, 197, 204, 205, 209, 211, 213, 214, 215, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 232, 233, 234, 235, 236, 237, 240, 241, 242, 244, 245, 246, 247, 249, 250, 251, 252, 253],
        [49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, -24, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -40, -64, 49, 49, 49, -23, -42, -59, -87, 49, 49, 49, 49, -43, -44, 49, -45, 49, -29, -41, -55, -63, 49, -88, 49, 49, -60, 49, 49, 49, 49, 49, -129, 49, -57, -29, 49, 49, 49, -132, 49, 49, -26, -127, -128, -136, -29, 49, -57, 49, -131, 49, 49, -27, 49, -135, -134, -29, 49, -133, -28]
    ),
    "FLOAT_VALUE": (
        [29, 37, 38, 39, 40, 47, 61, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 88, 89, 90, 91, 92, 101, 102, 133, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 154, 155, 164, 170, 172, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 186, 187, 189, 190, 191, 192, 193, 194, 195, 197, 204, 205, 209, 211, 213, 214, 215, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 232, 233, 234, 235, 236, 237, 240, 241, 242, 244, 245, 246, 247, 249, 250, 251, 252, 253],
        [48, 48, 48, 48, 48, 97, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 165, 48, 48, -24, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -40, -64, 48, 48, 48, -23, -42, -59, -87, 48, 48, 48, 48, -43, -44, 48, 201, -45, 48, -29, -41, -55, -63, 48, -88, 48, 48, -60, 48, 48, 48, 48, 48, -129, 48, -57, -29, 48, 48, 48, -132, 48, 48, -26, -127, -128, -136, -29, 48, -57, 48, -131, 48, 48, -27, 48, -135, -134, -29, 48, -133, -28]
    ),
    "OBJECTSELF_VALUE": (
        [29, 37, 38, 39, 40, 61, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 88, 89, 90, 91, 92, 101, 102, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 154, 155, 164, 170, 172, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 187, 189, 190, 191, 192, 193, 194, 195, 197, 204, 205, 209, 211, 213, 214, 215, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 232, 233, 234, 235, 236, 237, 240, 241, 242, 244, 245, 246, 247, 249, 250, 251, 252, 253],
        [51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, -24, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -40, -64, 51, 51, 51, -23, -42, -59, -87, 51, 51, 51, 51, -43, -44, 51, -45, 51, -29, -41, -55, -63, 51, -88, 51, 51, -60, 51, 51, 51, 51, 51, -129, 51, -57, -29, 51, 51, 51, -132, 51, 51, -26, -127, -128, -136, -29, 51, -57, 51, -131, 51, 51, -27, 51, -135, -134, -29, 51, -133, -28]
    ),
    "OBJECTINVALID_VALUE": (
        [29, 37, 38, 39, 40, 61, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 88, 89, 90, 91, 92, 101, 102, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 154, 155, 164, 170, 172, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 187, 189, 190, 191, 192, 193, 194, 195, 197, 204, 205, 209, 211, 213, 214, 215, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 232, 233, 234, 235, 236, 237, 240, 241, 242, 244, 245, 246, 247, 249, 250, 251, 252, 253],
        [52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, -24, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -40, -64, 52, 52, 52, -23, -42, -59, -87, 52, 52, 52, 52, -43, -44, 52, -45, 52, -29, -41, -55, -63, 52, -88, 52, 52, -60, 52, 52, 52, 52, 52, -129, 52, -57, -29, 52, 52, 52, -132, 52, 52, -26, -127, -128, -136, -29, 52, -57, 52, -131, 52, 52, -27, 52, -135, -134, -29, 52, -133, -28]
    ),
    "TRUE_VALUE": (
        [29, 37, 38, 39, 40, 61, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 88, 89, 90, 91, 92, 101, 102, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 154, 155, 164, 170, 172, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 187, 189, 190, 191, 192, 193, 194, 195, 197, 204, 205, 209, 211, 213, 214, 215, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 232, 233, 234, 235, 236, 237, 240, 241, 242, 244, 245, 246, 247, 249, 250, 251, 252, 253],
        [53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, -24, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -40, -64, 53, 53, 53, -23, -42, -59, -87, 53, 53, 53, 53, -43, -44, 53, -45, 53, -29, -41, -55, -63, 53, -88, 53, 53, -60, 53, 53, 53, 53, 53, -129, 53, -57, -29, 53, 53, 53, -132, 53, 53, -26, -127, -128, -136, -29, 53, -57, 53, -131, 53, 53, -27, 53, -135, -134, -29, 53, -133, -28]
    ),
    "FALSE_VALUE": (
        [29, 37, 38, 39, 40, 61, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 88, 89, 90, 91, 92, 101, 102, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 154, 155, 164, 170, 172, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 187, 189, 190, 191, 192, 193, 194, 195, 197, 204, 205, 209, 211, 213, 214, 215, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 232, 233, 234, 235, 236, 237, 240, 241, 242, 244, 245, 246, 247, 249, 250, 251, 252, 253],
        [54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, -24, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -40, -64, 54, 54, 54, -23, -42, -59, -87, 54, 54, 54, 54, -43, -44, 54, -45, 54, -29, -41, -55, -63, 54, -88, 54, 54, -60, 54, 54, 54, 54, 54, -129, 54, -57, -29, 54, 54, 54, -132, 54, 54, -26, -127, -128, -136, -29, 54, -57, 54, -131, 54, 54, -27, 54, -135, -134, -29, 54, -133, -28]
    ),
    "INT_HEX_VALUE": (
        [29, 37, 38, 39, 40, 61, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 88, 89, 90, 91, 92, 101, 102, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 154, 155, 164, 170, 172, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 187, 189, 190, 191, 192, 193, 194, 195, 197, 204, 205, 209, 211, 213, 214, 215, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 232, 233, 234, 235, 236, 237, 240, 241, 242, 244, 245, 246, 247, 249, 250, 251, 252, 253],
        [55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, -24, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -40, -64, 55, 55, 55, -23, -42, -59, -87, 55, 55, 55, 55, -43, -44, 55, -45, 55, -29, -41, -55, -63, 55, -88, 55, 55, -60, 55, 55, 55, 55, 55, -129, 55, -57, -29, 55, 55, 55, -132, 55, 55, -26, -127, -128, -136, -29, 55, -57, 55, -131, 55, 55, -27, 55, -135, -134, -29, 55, -133, -28]
    ),
    "}": (
        [30, 56, 99, 102, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 154, 166, 170, 172, 174, 175, 176, 179, 182, 183, 187, 190, 191, 192, 193, 195, 197, 204, 205, 213, 215, 218, 219, 220, 221, 223, 226, 227, 229, 232, 233, 234, 235, 236, 237, 240, 241, 244, 245, 246, 247, 249, 250, 251, 252, 253],
        [-11, 98, -10, -25, -25, 171, -24, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -40, -64, -12, 190, -23, -42, -59, -87, -25, -43, -44, -45, -29, -41, -55, -63, -88, 208, -25, -60, 221, -25, -129, -25, -57, -29, 229, 232, 235, -26, -127, -128, -136, -29, -25, -57, -130, -131, 250, -27, -25, -135, -134, -29, 253, -133, -28]
    ),
    "GREATER_THAN": (
        [35, 36, 41, 42, 43, 44, 48, 49, 50, 51, 52, 53, 54, 55, 82, 83, 84, 85, 86, 87, 94, 95, 96, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 136, 153, 163, 177, 185, 196, 198, 199, 200, 203, 212, 217, 222, 230, 231, 248],
        [-90, 64, -89, -91, -92, -101, -94, -93, -95, -96, -97, -98, -99, -100, 64, -84, -85, -86, -123, -125, -122, -119, -124, 64, -120, -66, -67, -68, -69, 64, 64, 64, 64, -74, -75, -76, -77, 64, 64, 64, -81, -82, -83, -65, 64, 64, 64, 64, 64, -121, 64, 64, -102, 64, 64, 64, 64, 64, 64, 64, -126, 64, 64, 64, 64, 64]
    ),
    "GREATER_THAN_OR_EQUALS": (
        [35, 36, 41, 42, 43, 44, 48, 49, 50, 51, 52, 53, 54, 55, 82, 83, 84, 85, 86, 87, 94, 95, 96, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 136, 153, 163, 177, 185, 196, 198, 199, 200, 203, 212, 217, 222, 230, 231, 248],
        [-90, 65, -89, -91, -92, -101, -94, -93, -95, -96, -97, -98, -99, -100, 65, -84, -85, -86, -123, -125, -122, -119, -124, 65, -120, -66, -67, -68, -69, 65, 65, 65, 65, -74, -75, -76, -77, 65, 65, 65, -81, -82, -83, -65, 65, 65, 65, 65, 65, -121, 65, 65, -102, 65, 65, 65, 65, 65, 65, 65, -126, 65, 65, 65, 65, 65]
    ),
    "LESS_THAN": (
        [35, 36, 41, 42, 43, 44, 48, 49, 50, 51, 52, 53, 54, 55, 82, 83, 84, 85, 86, 87, 94, 95, 96, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 136, 153, 163, 177, 185, 196, 198, 199, 200, 203, 212, 217, 222, 230, 231, 248],
        [-90, 66, -89, -91, -92, -101, -94, -93, -95, -96, -97, -98, -99, -100, 66, -84, -85, -86, -123, -125, -122, -119, -124, 66, -120, -66, -67, -68, -69, 66, 66, 66, 66, -74, -75, -76, -77, 66, 66, 66, -81, -82, -83, -65, 66, 66, 66, 66, 66, -121, 66, 66, -102, 66, 66, 66, 66, 66, 66, 66, -126, 66, 66, 66, 66, 66]
    ),
    "LESS_THAN_OR_EQUALS": (
        [35, 36, 41, 42, 43, 44, 48, 49, 50, 51, 52, 53, 54, 55, 82, 83, 84, 85, 86, 87, 94, 95, 96, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 136, 153, 163, 177, 185, 196, 198, 199, 200, 203, 212, 217, 222, 230, 231, 248],
        [-90, 67, -89, -91, -92, -101, -94, -93, -95, -96, -97, -98, -99, -100, 67, -84, -85, -86, -123, -125, -122, -119, -124, 67, -120, -66, -67, -68, -69, 67, 67, 67, 67, -74, -75, -76, -77, 67, 67, 67, -81, -82, -83, -65, 67, 67, 67, 67, 67, -121, 67, 67, -102, 67, 67, 67, 67, 67, 67, 67, -126, 67, 67, 67, 67, 67]
    ),
    "AND": (
        [35, 36, 41, 42, 43, 44, 48, 49, 50, 51, 52, 53, 54, 55, 82, 83, 84, 85, 86, 87, 94, 95, 96, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 136, 153, 163, 177, 185, 196, 198, 199, 200, 203, 212, 217, 222, 230, 231, 248],
        [-90, 68, -89, -91, -92, -101, -94, -93, -95, -96, -97, -98, -99, -100, 68, -84, -85, -86, -123, -125, -122, -119, -124, 68, -120, -66, -67, -68, -69, -70, -71, -72, 68, -74, -75, -76, -77, -78, -79, -80, -81, -82, -83, -65, 68, 68, 68, 68, 68, -121, 68, 68, -102, 68, 68, 68, 68, 68, 68, 68, -126, 68, 68, 68, 68, 68]
    ),
    "NOT_EQUALS": (
        [35, 36, 41, 42, 43, 44, 48, 49, 50, 51, 52, 53, 54, 55, 82, 83, 84, 85, 86, 87, 94, 95, 96, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 136, 153, 163, 177, 185, 196, 198, 199, 200, 203, 212, 217, 222, 230, 231, 248],
        [-90, 69, -89, -91, -92, -101, -94, -93, -95, -96, -97, -98, -99, -100, 69, -84, -85, -86, -123, -125, -122, -119, -124, 69, -120, -66, -67, -68, -69, 69, -71, -72, 69, -74, -75, -76, -77, 69, 69, 69, -81, -82, -83, -65, 69, 69, 69, 69, 69, -121, 69, 69, -102, 69, 69, 69, 69, 69, 69, 69, -126, 69, 69, 69, 69, 69]
    ),
    "EQUALS": (
        [35, 36, 41, 42, 43, 44, 48, 49, 50, 51, 52, 53, 54, 55, 82, 83, 84, 85, 86, 87, 94, 95, 96, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 136, 153, 163, 177, 185, 196, 198, 199, 200, 203, 212, 217, 222, 230, 231, 248],
        [-90, 70, -89, -91, -92, -101, -94, -93, -95, -96, -97, -98, -99, -100, 70, -84, -85, -86, -123, -125, -122, -119, -124, 70, -120, -66, -67, -68, -69, 70, -71, -72, 70, -74, -75, -76, -77, 70, 70, 70, -81, -82, -83, -65, 70, 70, 70, 70, 70, -121, 70, 70, -102, 70, 70, 70, 70, 70, 70, 70, -126, 70, 70, 70, 70, 70]
    ),
    "OR": (
        [35, 36, 41, 42, 43, 44, 48, 49, 50, 51, 52, 53, 54, 55, 82, 83, 84, 85, 86, 87, 94, 95, 96, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 136, 153, 163, 177, 185, 196, 198, 199, 200, 203, 212, 217, 222, 230, 231, 248],
        [-90, 71, -89, -91, -92, -101, -94, -93, -95, -96, -97, -98, -99, -100, 71, -84, -85, -86, -123, -125, -122, -119, -124, 71, -120, -66, -67, -68, -69, -70, -71, -72, -73, -74, -75, -76, -77, -78, -79, -80, -81, -82, -83, -65, 71, 71, 71, 71, 71, -121, 71, 71, -102, 71, 71, 71, 71, 71, 71, 71, -126, 71, 71, 71, 71, 71]
    ),
    "ADD": (
        [35, 36, 41, 42, 43, 44, 48, 49, 50, 51, 52, 53, 54, 55, 82, 83, 84, 85, 86, 87, 94, 95, 96, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 136, 153, 163, 177, 185, 196, 198, 199, 200, 203, 212, 217, 222, 230, 231, 248],
        [-90, 72, -89, -91, -92, -101, -94, -93, -95, -96, -97, -98, -99, -100, 72, -84, -85, -86, -123, -125, -122, -119, -124, 72, -120, 72, 72, 72, 72, 72, 72, 72, 72, -74, -75, -76, -77, 72, 72, 72, 72, 72, -83, -65, 72, 72, 72, 72, 72, -121, 72, 72, -102, 72, 72, 72, 72, 72, 72, 72, -126, 72, 72, 72, 72, 72]
    ),
    "MULTIPLY": (
        [35, 36, 41, 42, 43, 44, 48, 49, 50, 51, 52, 53, 54, 55, 82, 83, 84, 85, 86, 87, 94, 95, 96, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 136, 153, 163, 177, 185, 196, 198, 199, 200, 203, 212, 217, 222, 230, 231, 248],
        [-90, 74, -89, -91, -92, -101, -94, -93, -95, -96, -97, -98, -99, -100, 74, 74, -85, -86, -123, -125, -122, -119, -124, 74, -120, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, -76, -77, 74, 74, 74, 74, 74, -83, -65, 74, 74, 74, 74, 74, -121, 74, 74, -102, 74, 74, 74, 74, 74, 74, 74, -126, 74, 74, 74, 74, 74]
    ),
    "DIVIDE": (
        [35, 36, 41, 42, 43, 44, 48, 49, 50, 51, 52, 53, 54, 55, 82, 83, 84, 85, 86, 87, 94, 95, 96, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 136, 153, 163, 177, 185, 196, 198, 199, 200, 203, 212, 217, 222, 230, 231, 248],
        [-90, 75, -89, -91, -92, -101, -94, -93, -95, -96, -97, -98, -99, -100, 75, 75, -85, -86, -123, -125, -122, -119, -124, 75, -120, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, -76, -77, 75, 75, 75, 75, 75, -83, -65, 75, 75, 75, 75, 75, -121, 75, 75, -102, 75, 75, 75, 75, 75, 75, 75, -126, 75, 75, 75, 75, 75]
    ),
    "BITWISE_OR": (
        [35, 36, 41, 42, 43, 44, 48, 49, 50, 51, 52, 53, 54, 55, 82, 83, 84, 85, 86, 87, 94, 95, 96, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 136, 153, 163, 177, 185, 196, 198, 199, 200, 203, 212, 217, 222, 230, 231, 248],
        [-90, 76, -89, -91, -92, -101, -94, -93, -95, -96, -97, -98, -99, -100, 76, -84, -85, -86, -123, -125, -122, -119, -124, 76, -120, -66, -67, -68, -69, 76, -71, -72, 76, -74, -75, -76, -77, -78, -79, -80, -81, -82, -83, -65, 76, 76, 76, 76, 76, -121, 76, 76, -102, 76, 76, 76, 76, 76, 76, 76, -126, 76, 76, 76, 76, 76]
    ),
    "BITWISE_XOR": (
        [35, 36, 41, 42, 43, 44, 48, 49, 50, 51, 52, 53, 54, 55, 82, 83, 84, 85, 86, 87, 94, 95, 96, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 136, 153, 163, 177, 185, 196, 198, 199, 200, 203, 212, 217, 222, 230, 231, 248],
        [-90, 77, -89, -91, -92, -101, -94, -93, -95, -96, -97, -98, -99, -100, 77, -84, -85, -86, -123, -125, -122, -119, -124, 77, -120, -66, -67, -68, -69, 77, -71, -72, 77, -74, -75, -76, -77, 77, -79, -80, -81, -82, -83, -65, 77, 77, 77, 77, 77, -121, 77, 77, -102, 77, 77, 77, 77, 77, 77, 77, -126, 77, 77, 77, 77, 77]
    ),
    "BITWISE_AND": (
        [35, 36, 41, 42, 43, 44, 48, 49, 50, 51, 52, 53, 54, 55, 82, 83, 84, 85, 86, 87, 94, 95, 96, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 136, 153, 163, 177, 185, 196, 198, 199, 200, 203, 212, 217, 222, 230, 231, 248],
        [-90, 78, -89, -91, -92, -101, -94, -93, -95, -96, -97, -98, -99, -100, 78, -84, -85, -86, -123, -125, -122, -119, -124, 78, -120, -66, -67, -68, -69, 78, -71, -72, 78, -74, -75, -76, -77, 78, 78, -80, -81, -82, -83, -65, 78, 78, 78, 78, 78, -121, 78, 78, -102, 78, 78, 78, 78, 78, 78, 78, -126, 78, 78, 78, 78, 78]
    ),
    "BITWISE_LEFT": (
        [35, 36, 41, 42, 43, 44, 48, 49, 50, 51, 52, 53, 54, 55, 82, 83, 84, 85, 86, 87, 94, 95, 96, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 136, 153, 163, 177, 185, 196, 198, 199, 200, 203, 212, 217, 222, 230, 231, 248],
        [-90, 79, -89, -91, -92, -101, -94, -93, -95, -96, -97, -98, -99, -100, 79, -84, -85, -86, -123, -125, -122, -119, -124, 79, -120, 79, 79, 79, 79, 79, 79, 79, 79, -74, -75, -76, -77, 79, 79, 79, -81, -82, -83, -65, 79, 79, 79, 79, 79, -121, 79, 79, -102, 79, 79, 79, 79, 79, 79, 79, -126, 79, 79, 79, 79, 79]
    ),
    "BITWISE_RIGHT": (
        [35, 36, 41, 42, 43, 44, 48, 49, 50, 51, 52, 53, 54, 55, 82, 83, 84, 85, 86, 87, 94, 95, 96, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 136, 153, 163, 177, 185, 196, 198, 199, 200, 203, 212, 217, 222, 230, 231, 248],
        [-90, 80, -89, -91, -92, -101, -94, -93, -95, -96, -97, -98, -99, -100, 80, -84, -85, -86, -123, -125, -122, -119, -124, 80, -120, 80, 80, 80, 80, 80, 80, 80, 80, -74, -75, -76, -77, 80, 80, 80, -81, -82, -83, -65, 80, 80, 80, 80, 80, -121, 80, 80, -102, 80, 80, 80, 80, 80, 80, 80, -126, 80, 80, 80, 80, 80]
    ),
    "MOD": (
        [35, 36, 41, 42, 43, 44, 48, 49, 50, 51, 52, 53, 54, 55, 82, 83, 84, 85, 86, 87, 94, 95, 96, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 136, 153, 163, 177, 185, 196, 198, 199, 200, 203, 212, 217, 222, 230, 231, 248],
        [-90, 81, -89, -91, -92, -101, -94, -93, -95, -96, -97, -98, -99, -100, 81, 81, -85, -86, -123, -125, -122, -119, -124, 81, -120, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, -76, -77, 81, 81, 81, 81, 81, -83, -65, 81, 81, 81, 81, 81, -121, 81, 81, -102, 81, 81, 81, 81, 81, 81, 81, -126, 81, 81, 81, 81, 81]
    ),
    ":": (
        [35, 41, 42, 43, 44, 48, 49, 50, 51, 52, 53, 54, 55, 83, 84, 85, 86, 87, 94, 95, 96, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 163, 212, 243, 248],
        [-90, -89, -91, -92, -101, -94, -93, -95, -96, -97, -98, -99, -100, -84, -85, -86, -123, -125, -122, -119, -124, -120, -66, -67, -68, -69, -70, -71, -72, -73, -74, -75, -76, -77, -78, -79, -80, -81, -82, -83, -65, -50, -51, -52, -53, -54, -121, -102, -126, 249, 252]
    ),
    "ADDITION_ASSIGNMENT_OPERATOR": ([35, 44, 107, 132], [-119, 89, -120, -121]),
    "SUBTRACTION_ASSIGNMENT_OPERATOR": ([35, 44, 107, 132], [-119, 90, -120, -121]),
    "MULTIPLICATION_ASSIGNMENT_OPERATOR": ([35, 44, 107, 132], [-119, 91, -120, -121]),
    "DIVISION_ASSIGNMENT_OPERATOR": ([35, 44, 107, 132], [-119, 92, -120, -121]),
    ".": ([35, 44, 94, 95, 96, 107, 132], [62, 93, 93, 62, 93, -120, -121]),
    "NOP": (
        [102, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 154, 170, 172, 174, 175, 176, 179, 182, 183, 187, 190, 191, 192, 193, 194, 195, 197, 204, 205, 211, 213, 215, 218, 219, 220, 221, 223, 226, 227, 228, 229, 232, 233, 234, 235, 236, 237, 240, 241, 244, 245, 246, 247, 249, 250, 251, 252, 253],
        [152, 152, 152, -24, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -40, -64, 152, -23, -42, -59, -87, 152, -43, -44, -45, -29, -41, -55, -63, 152, -88, 152, 152, -60, 152, 152, 152, -129, 152, -57, -29, 152, -132, 152, 152, -26, -127, -128, -136, -29, 152, -57, 152, -131, 152, -27, 152, -135, -134, -29, 152, -133, -28]
    ),
    "RETURN": (
        [102, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 154, 170, 172, 174, 175, 176, 179, 182, 183, 187, 190, 191, 192, 193, 194, 195, 197, 204, 205, 211, 213, 215, 218, 219, 220, 221, 223, 226, 227, 228, 229, 232, 233, 234, 235, 236, 237, 240, 241, 244, 245, 246, 247, 249, 250, 251, 252, 253],
        [155, 155, 155, -24, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -40, -64, 155, -23, -42, -59, -87, 155, -43, -44, -45, -29, -41, -55, -63, 155, -88, 155, 155, -60, 155, 155, 155, -129, 155, -57, -29, 155, -132, 155, 155, -26, -127, -128, -136, -29, 155, -57, 155, -131, 155, -27, 155, -135, -134, -29, 155, -133, -28]
    ),
    "WHILE_CONTROL": (
        [102, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 154, 170, 172, 174, 175, 176, 179, 182, 183, 187, 190, 191, 192, 193, 194, 195, 197, 204, 205, 208, 211, 213, 215, 218, 219, 220, 221, 223, 226, 227, 228, 229, 232, 233, 234, 235, 236, 237, 240, 241, 244, 245, 246, 247, 249, 250, 251, 252, 253],
        [156, 156, 156, -24, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -40, -64, 156, -23, -42, -59, -87, 156, -43, -44, -45, -29, -41, -55, -63, 156, -88, 156, 156, -60, 216, 156, 156, 156, -129, 156, -57, -29, 156, -132, 156, 156, -26, -127, -128, -136, -29, 156, -57, 156, -131, 156, -27, 156, -135, -134, -29, 156, -133, -28]
    ),
    "DO_CONTROL": (
        [102, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 154, 170, 172, 174, 175, 176, 179, 182, 183, 187, 190, 191, 192, 193, 194, 195, 197, 204, 205, 211, 213, 215, 218, 219, 220, 221, 223, 226, 227, 228, 229, 232, 233, 234, 235, 236, 237, 240, 241, 244, 245, 246, 247, 249, 250, 251, 252, 253],
        [157, 157, 157, -24, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -40, -64, 157, -23, -42, -59, -87, 157, -43, -44, -45, -29, -41, -55, -63, 157, -88, 157, 157, -60, 157, 157, 157, -129, 157, -57, -29, 157, -132, 157, 157, -26, -127, -128, -136, -29, 157, -57, 157, -131, 157, -27, 157, -135, -134, -29, 157, -133, -28]
    ),
    "FOR_CONTROL": (
        [102, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 154, 170, 172, 174, 175, 176, 179, 182, 183, 187, 190, 191, 192, 193, 194, 195, 197, 204, 205, 211, 213, 215, 218, 219, 220, 221, 223, 226, 227, 228, 229, 232, 233, 234, 235, 236, 237, 240, 241, 244, 245, 246, 247, 249, 250, 251, 252, 253],
        [158, 158, 158, -24, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -40, -64, 158, -23, -42, -59, -87, 158, -43, -44, -45, -29, -41, -55, -63, 158, -88, 158, 158, -60, 158, 158, 158, -129, 158, -57, -29, 158, -132, 158, 158, -26, -127, -128, -136, -29, 158, -57, 158, -131, 158, -27, 158, -135, -134, -29, 158, -133, -28]
    ),
    "SWITCH_CONTROL": (
        [102, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 154, 170, 172, 174, 175, 176, 179, 182, 183, 187, 190, 191, 192, 193, 194, 195, 197, 204, 205, 211, 213, 215, 218, 219, 220, 221, 223, 226, 227, 228, 229, 232, 233, 234, 235, 236, 237, 240, 241, 244, 245, 246, 247, 249, 250, 251, 252, 253],
        [159, 159, 159, -24, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -40, -64, 159, -23, -42, -59, -87, 159, -43, -44, -45, -29, -41, -55, -63, 159, -88, 159, 159, -60, 159, 159, 159, -129, 159, -57, -29, 159, -132, 159, 159, -26, -127, -128, -136, -29, 159, -57, 159, -131, 159, -27, 159, -135, -134, -29, 159, -133, -28]
    ),
    "BREAK_CONTROL": (
        [102, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 154, 170, 172, 174, 175, 176, 179, 182, 183, 187, 190, 191, 192, 193, 194, 195, 197, 204, 205, 211, 213, 215, 218, 219, 220, 221, 223, 226, 227, 228, 229, 232, 233, 234, 235, 236, 237, 240, 241, 244, 245, 246, 247, 249, 250, 251, 252, 253],
        [160, 160, 160, -24, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -40, -64, 160, -23, -42, -59, -87, 160, -43, -44, -45, -29, -41, -55, -63, 160, -88, 160, 160, -60, 160, 160, 160, -129, 160, -57, -29, 160, -132, 160, 160, -26, -127, -128, -136, -29, 160, -57, 160, -131, 160, -27, 160, -135, -134, -29, 160, -133, -28]
    ),
    "CONTINUE_CONTROL": (
        [102, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 154, 170, 172, 174, 175, 176, 179, 182, 183, 187, 190, 191, 192, 193, 194, 195, 197, 204, 205, 211, 213, 215, 218, 219, 220, 221, 223, 226, 227, 228, 229, 232, 233, 234, 235, 236, 237, 240, 241, 244, 245, 246, 247, 249, 250, 251, 252, 253],
        [161, 161, 161, -24, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -40, -64, 161, -23, -42, -59, -87, 161, -43, -44, -45, -29, -41, -55, -63, 161, -88, 161, 161, -60, 161, 161, 161, -129, 161, -57, -29, 161, -132, 161, 161, -26, -127, -128, -136, -29, 161, -57, 161, -131, 161, -27, 161, -135, -134, -29, 161, -133, -28]
    ),
    "IF_CONTROL": (
        [102, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 154, 170, 172, 174, 175, 176, 179, 182, 183, 187, 190, 191, 192, 193, 194, 195, 197, 204, 205, 211, 213, 215, 218, 219, 220, 221, 223, 226, 227, 228, 229, 232, 233, 234, 235, 236, 237, 240, 241, 244, 245, 246, 247, 249, 250, 251, 252, 253],
        [162, 162, 162, -24, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -40, -64, 162, -23, -42, -59, -87, 162, -43, -44, -45, -29, -41, -55, -63, 206, -88, 162, 162, -60, 162, 162, 162, -129, 162, -57, -29, 162, -132, 162, 162, -26, -127, -128, -136, -29, 162, -57, 162, -131, 162, -27, 162, -135, -134, -29, 162, -133, -28]
    ),
    "ELSE_CONTROL": (
        [141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 154, 174, 175, 176, 182, 183, 187, 191, 192, 193, 195, 205, 220, 221, 229, 232, 235, 237, 245, 250, 253],
        [-30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -40, -64, -42, 194, -87, -43, -44, -45, -41, -55, -63, -88, -60, -57, -29, -26, -127, -29, -57, -27, -29, -28]
    ),
    "CASE_CONTROL": (
        [141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 154, 174, 175, 176, 182, 183, 187, 190, 191, 192, 193, 195, 205, 218, 220, 221, 226, 229, 232, 233, 234, 235, 237, 240, 241, 245, 247, 249, 250, 252, 253],
        [-30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -40, -64, -42, -59, -87, -43, -44, -45, -29, -41, -55, -63, -88, -60, -129, -57, -29, -132, -26, -127, -128, 242, -29, -57, -130, -131, -27, -135, -134, -29, -133, -28]
    ),
    "DEFAULT_CONTROL": (
        [141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 154, 174, 175, 176, 182, 183, 187, 190, 191, 192, 193, 195, 205, 218, 220, 221, 226, 229, 232, 233, 234, 235, 237, 240, 241, 245, 247, 249, 250, 252, 253],
        [-30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -40, -64, -42, -59, -87, -43, -44, -45, -29, -41, -55, -63, -88, -60, -129, -57, -29, -132, -26, -127, -128, 243, -29, -57, -130, -131, -27, -135, -134, -29, -133, -28]
    ),
    "]": (
        [201],
        [212]
    ),
}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x, _y in zip(_v[0], _v[1]):
      if _x not in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {
   "code_root": (
        [0],
        [1]
    ),
   "code_root_object": (
        [1],
        [2]
    ),
   "function_definition": (
        [1],
        [3]
    ),
   "include_script": (
        [1],
        [4]
    ),
   "function_forward_declaration": (
        [1],
        [5]
    ),
   "global_variable_declaration": (
        [1],
        [6]
    ),
   "global_variable_initialization": (
        [1],
        [7]
    ),
   "struct_definition": (
        [1],
        [8]
    ),
   "data_type": (
        [1, 27, 56, 59, 102, 138, 139, 170, 179, 194, 197, 204, 211, 213, 215, 219, 223, 227, 228, 236, 240, 244, 246, 251],
        [9, 31, 100, 31, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137]
    ),
    "function_definition_params": (
        [27],
        [32]
    ),
    "function_definition_param": (
        [27, 59],
        [33, 104]
    ),
    "expression": (
       [29, 37, 38, 39, 40, 61, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 88, 89, 90, 91, 92, 101, 102, 138, 139, 155, 164, 170, 178, 179, 180, 181, 184, 189, 194, 197, 204, 209, 211, 213, 214, 215, 219, 223, 224, 225, 227, 228, 236, 240, 242, 244, 246, 251],
       [36, 82, 83, 84, 85, 106, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 130, 131, 136, 153, 153, 153, 177, 185, 153, 196, 153, 198, 199, 200, 203, 153, 153, 153, 217, 153, 153, 222, 153, 153, 153, 230, 231, 153, 153, 153, 153, 248, 153, 153, 153]
    ),
    "function_call": (
       [29, 37, 38, 39, 40, 61, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 88, 89, 90, 91, 92, 101, 102, 138, 139, 155, 164, 170, 178, 179, 180, 181, 184, 189, 194, 197, 204, 209, 211, 213, 214, 215, 219, 223, 224, 225, 227, 228, 236, 240, 242, 244, 246, 251],
       [41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41]
    ),
    "assignment": (
       [29, 37, 38, 39, 40, 61, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 88, 89, 90, 91, 92, 101, 102, 138, 139, 155, 164, 170, 178, 179, 180, 181, 184, 189, 194, 197, 204, 209, 211, 213, 214, 215, 219, 223, 224, 225, 227, 228, 236, 240, 242, 244, 246, 251],
       [42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42]
    ),
    "constant_expression": (
       [29, 37, 38, 39, 40, 61, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 88, 89, 90, 91, 92, 101, 102, 138, 139, 155, 164, 170, 178, 179, 180, 181, 184, 189, 194, 197, 204, 209, 211, 213, 214, 215, 219, 223, 224, 225, 227, 228, 236, 240, 242, 244, 246, 251],
       [43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43]
    ),
    "field_access": (
       [29, 37, 38, 39, 40, 45, 46, 61, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 88, 89, 90, 91, 92, 101, 102, 138, 139, 155, 164, 170, 178, 179, 180, 181, 184, 189, 194, 197, 204, 209, 211, 213, 214, 215, 219, 223, 224, 225, 227, 228, 236, 240, 242, 244, 246, 251],
       [44, 44, 44, 44, 44, 94, 96, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44]
    ),
    "struct_members": (
        [30],
        [56]
    ),
    "struct_member": (
        [56],
        [99]
    ),
    "function_call_params": (
        [61],
        [105]
    ),
    "code_block": (
       [102, 138, 179, 204, 215, 219, 236, 246],
       [139, 170, 197, 213, 223, 227, 244, 251]
    ),
    "statement": (
       [102, 138, 139, 170, 179, 194, 197, 204, 211, 213, 215, 219, 223, 227, 228, 236, 240, 244, 246, 251],
       [140, 140, 172, 172, 140, 205, 172, 140, 220, 172, 140, 140, 172, 172, 237, 140, 247, 172, 140, 172]
    ),
    "declaration_statement": (
       [102, 138, 139, 170, 179, 194, 197, 204, 211, 213, 215, 219, 223, 227, 228, 236, 240, 244, 246, 251],
       [142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142]
    ),
    "condition_statement": (
       [102, 138, 139, 170, 179, 194, 197, 204, 211, 213, 215, 219, 223, 227, 228, 236, 240, 244, 246, 251],
       [143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143]
    ),
    "return_statement": (
       [102, 138, 139, 170, 179, 194, 197, 204, 211, 213, 215, 219, 223, 227, 228, 236, 240, 244, 246, 251],
       [144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144]
    ),
    "while_loop": (
       [102, 138, 139, 170, 179, 194, 197, 204, 211, 213, 215, 219, 223, 227, 228, 236, 240, 244, 246, 251],
       [145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145]
    ),
    "do_while_loop": (
       [102, 138, 139, 170, 179, 194, 197, 204, 211, 213, 215, 219, 223, 227, 228, 236, 240, 244, 246, 251],
       [146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146]
    ),
    "for_loop": (
       [102, 138, 139, 170, 179, 194, 197, 204, 211, 213, 215, 219, 223, 227, 228, 236, 240, 244, 246, 251],
       [147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147]
    ),
    "switch_statement": (
       [102, 138, 139, 170, 179, 194, 197, 204, 211, 213, 215, 219, 223, 227, 228, 236, 240, 244, 246, 251],
       [148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148]
    ),
    "break_statement": (
       [102, 138, 139, 170, 179, 194, 197, 204, 211, 213, 215, 219, 223, 227, 228, 236, 240, 244, 246, 251],
       [149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149]
    ),
    "continue_statement": (
       [102, 138, 139, 170, 179, 194, 197, 204, 211, 213, 215, 219, 223, 227, 228, 236, 240, 244, 246, 251],
       [150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150]
    ),
    "scoped_block": (
       [102, 138, 139, 170, 179, 194, 197, 204, 211, 213, 215, 219, 223, 227, 228, 236, 240, 244, 246, 251],
       [151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151]
    ),
    "if_statement": (
       [102, 138, 139, 170, 179, 194, 197, 204, 211, 213, 215, 219, 223, 227, 228, 236, 240, 244, 246, 251],
       [154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154]
    ),
    "variable_declarators": ([137], [167]),
    "variable_declarator": ([137, 188], [168, 202]),
    "else_if_statements": ([154], [175]),
    "else_statement": ([175], [192]),
    "else_if_statement": ([175], [193]),
    "switch_blocks": ([218], [226]),
    "switch_block": ([226], [233]),
    "switch_labels": ([226], [234]),
    "block_statements": ([234], [240]),
    "switch_label": ([234], [241]),
}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if _x not in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> code_root", "S'", 1, None, None, None),
  ("code_root -> code_root code_root_object", "code_root", 2, "p_code_root", "parser.py", 104),
  ("code_root -> <empty>", "code_root", 0, "p_code_root", "parser.py", 105),
  ("code_root_object -> function_definition", "code_root_object", 1, "p_code_root_object", "parser.py", 116),
  ("code_root_object -> include_script", "code_root_object", 1, "p_code_root_object", "parser.py", 117),
  ("code_root_object -> function_forward_declaration", "code_root_object", 1, "p_code_root_object", "parser.py", 118),
  ("code_root_object -> global_variable_declaration", "code_root_object", 1, "p_code_root_object", "parser.py", 119),
  ("code_root_object -> global_variable_initialization", "code_root_object", 1, "p_code_root_object", "parser.py", 120),
  ("code_root_object -> struct_definition", "code_root_object", 1, "p_code_root_object", "parser.py", 121),
  ("struct_definition -> STRUCT IDENTIFIER { struct_members } ;", "struct_definition", 6, "p_struct_definition", "parser.py", 127),
  ("struct_members -> struct_members struct_member", "struct_members", 2, "p_struct_members", "parser.py", 133),
  ("struct_members -> <empty>", "struct_members", 0, "p_struct_members", "parser.py", 134),
  ("struct_member -> data_type IDENTIFIER ;", "struct_member", 3, "p_struct_member", "parser.py", 144),
  ("include_script -> INCLUDE STRING_VALUE", "include_script", 2, "p_include_script", "parser.py", 150),
  ("global_variable_initialization -> data_type IDENTIFIER = expression ;", "global_variable_initialization", 5, "p_global_variable_initialization", "parser.py", 156),
  ("global_variable_declaration -> data_type IDENTIFIER ;", "global_variable_declaration", 3, "p_global_variable_declaration", "parser.py", 162),
  ("function_forward_declaration -> data_type IDENTIFIER ( function_definition_params ) ;", "function_forward_declaration", 6, "p_function_forward_declaration", "parser.py", 168),
  ("function_definition -> data_type IDENTIFIER ( function_definition_params ) { code_block }", "function_definition", 8, "p_function_definition", "parser.py", 174),
  ("function_definition_params -> function_definition_params , function_definition_param", "function_definition_params", 3, "p_function_definition_params", "parser.py", 180),
  ("function_definition_params -> function_definition_param", "function_definition_params", 1, "p_function_definition_params", "parser.py", 181),
  ("function_definition_params -> <empty>", "function_definition_params", 0, "p_function_definition_params", "parser.py", 182),
  ("function_definition_param -> data_type IDENTIFIER", "function_definition_param", 2, "p_function_definition_param", "parser.py", 194),
  ("function_definition_param -> data_type IDENTIFIER = expression", "function_definition_param", 4, "p_function_definition_param_with_default", "parser.py", 200),
  ("code_block -> code_block statement", "code_block", 2, "p_code_block", "parser.py", 206),
  ("code_block -> statement", "code_block", 1, "p_code_block", "parser.py", 207),
  ("code_block -> <empty>", "code_block", 0, "p_code_block", "parser.py", 208),
  ("while_loop -> WHILE_CONTROL ( expression ) { code_block }", "while_loop", 7, "p_while_loop", "parser.py", 223),
  ("do_while_loop -> DO_CONTROL { code_block } WHILE_CONTROL ( expression ) ;", "do_while_loop", 9, "p_do_while_loop", "parser.py", 229),
  ("for_loop -> FOR_CONTROL ( expression ; expression ; expression ) { code_block }", "for_loop", 11, "p_for_loop", "parser.py", 235),
  ("scoped_block -> { code_block }", "scoped_block", 3, "p_scoped_block", "parser.py", 241),
  ("statement -> ;", "statement", 1, "p_statement", "parser.py", 247),
  ("statement -> declaration_statement", "statement", 1, "p_statement", "parser.py", 248),
  ("statement -> condition_statement", "statement", 1, "p_statement", "parser.py", 249),
  ("statement -> return_statement", "statement", 1, "p_statement", "parser.py", 250),
  ("statement -> while_loop", "statement", 1, "p_statement", "parser.py", 251),
  ("statement -> do_while_loop", "statement", 1, "p_statement", "parser.py", 252),
  ("statement -> for_loop", "statement", 1, "p_statement", "parser.py", 253),
  ("statement -> switch_statement", "statement", 1, "p_statement", "parser.py", 254),
  ("statement -> break_statement", "statement", 1, "p_statement", "parser.py", 255),
  ("statement -> continue_statement", "statement", 1, "p_statement", "parser.py", 256),
  ("statement -> scoped_block", "statement", 1, "p_statement", "parser.py", 257),
  ("statement -> NOP STRING_VALUE ;", "statement", 3, "p_nop_statement", "parser.py", 267),
  ("statement -> expression ;", "statement", 2, "p_expression_statement", "parser.py", 273),
  ("break_statement -> BREAK_CONTROL ;", "break_statement", 2, "p_break_statement", "parser.py", 279),
  ("continue_statement -> CONTINUE_CONTROL ;", "continue_statement", 2, "p_continue_statement", "parser.py", 285),
  ("declaration_statement -> data_type variable_declarators ;", "declaration_statement", 3, "p_declaration_statement", "parser.py", 291),
  ("variable_declarators -> variable_declarators , variable_declarator", "variable_declarators", 3, "p_variable_declarators", "parser.py", 297),
  ("variable_declarators -> variable_declarator", "variable_declarators", 1, "p_variable_declarators", "parser.py", 298),
  ("variable_declarator -> IDENTIFIER", "variable_declarator", 1, "p_variable_declarator_no_initializer", "parser.py", 308),
  ("variable_declarator -> IDENTIFIER = expression", "variable_declarator", 3, "p_variable_declarator_initializer", "parser.py", 314),
  ("assignment -> field_access = expression", "assignment", 3, "p_normal_assignment", "parser.py", 320),
  ("assignment -> field_access ADDITION_ASSIGNMENT_OPERATOR expression", "assignment", 3, "p_addition_assignment", "parser.py", 326),
  ("assignment -> field_access SUBTRACTION_ASSIGNMENT_OPERATOR expression", "assignment", 3, "p_subtraction_assignment", "parser.py", 332),
  ("assignment -> field_access MULTIPLICATION_ASSIGNMENT_OPERATOR expression", "assignment", 3, "p_multiplication_assignment", "parser.py", 338),
  ("assignment -> field_access DIVISION_ASSIGNMENT_OPERATOR expression", "assignment", 3, "p_division_assignment", "parser.py", 344),
  ("condition_statement -> if_statement else_if_statements else_statement", "condition_statement", 3, "p_condition_statement", "parser.py", 351),
  ("if_statement -> IF_CONTROL ( expression ) { code_block }", "if_statement", 7, "p_if_statement", "parser.py", 359),
  ("if_statement -> IF_CONTROL ( expression ) statement", "if_statement", 5, "p_if_statement_single", "parser.py", 365),
  ("else_statement -> ELSE_CONTROL { code_block }", "else_statement", 4, "p_else_statement", "parser.py", 373),
  ("else_statement -> <empty>", "else_statement", 0, "p_else_statement", "parser.py", 374),
  ("else_statement -> ELSE_CONTROL statement", "else_statement", 2, "p_else_statement_single", "parser.py", 383),
  ("else_if_statement -> ELSE_CONTROL IF_CONTROL ( expression ) { code_block }", "else_if_statement", 8, "p_else_if_statement", "parser.py", 391),
  ("else_if_statement -> ELSE_CONTROL IF_CONTROL ( expression ) statement", "else_if_statement", 6, "p_else_if_statement_single", "parser.py", 397),
  ("else_if_statements -> else_if_statements else_if_statement", "else_if_statements", 2, "p_else_if_statements", "parser.py", 405),
  ("else_if_statements -> <empty>", "else_if_statements", 0, "p_else_if_statements", "parser.py", 406),
  ("expression -> ( expression )", "expression", 3, "p_parenthesis_expression", "parser.py", 418),
  ("expression -> expression GREATER_THAN expression", "expression", 3, "p_binary_operator", "parser.py", 424),
  ("expression -> expression GREATER_THAN_OR_EQUALS expression", "expression", 3, "p_binary_operator", "parser.py", 425),
  ("expression -> expression LESS_THAN expression", "expression", 3, "p_binary_operator", "parser.py", 426),
  ("expression -> expression LESS_THAN_OR_EQUALS expression", "expression", 3, "p_binary_operator", "parser.py", 427),
  ("expression -> expression AND expression", "expression", 3, "p_binary_operator", "parser.py", 428),
  ("expression -> expression NOT_EQUALS expression", "expression", 3, "p_binary_operator", "parser.py", 429),
  ("expression -> expression EQUALS expression", "expression", 3, "p_binary_operator", "parser.py", 430),
  ("expression -> expression OR expression", "expression", 3, "p_binary_operator", "parser.py", 431),
  ("expression -> expression ADD expression", "expression", 3, "p_binary_operator", "parser.py", 432),
  ("expression -> expression MINUS expression", "expression", 3, "p_binary_operator", "parser.py", 433),
  ("expression -> expression MULTIPLY expression", "expression", 3, "p_binary_operator", "parser.py", 434),
  ("expression -> expression DIVIDE expression", "expression", 3, "p_binary_operator", "parser.py", 435),
  ("expression -> expression BITWISE_OR expression", "expression", 3, "p_binary_operator", "parser.py", 436),
  ("expression -> expression BITWISE_XOR expression", "expression", 3, "p_binary_operator", "parser.py", 437),
  ("expression -> expression BITWISE_AND expression", "expression", 3, "p_binary_operator", "parser.py", 438),
  ("expression -> expression BITWISE_LEFT expression", "expression", 3, "p_binary_operator", "parser.py", 439),
  ("expression -> expression BITWISE_RIGHT expression", "expression", 3, "p_binary_operator", "parser.py", 440),
  ("expression -> expression MOD expression", "expression", 3, "p_binary_operator", "parser.py", 441),
  ("expression -> MINUS expression", "expression", 2, "p_unary_expression", "parser.py", 447),
  ("expression -> BITWISE_NOT expression", "expression", 2, "p_unary_expression", "parser.py", 448),
  ("expression -> NOT expression", "expression", 2, "p_unary_expression", "parser.py", 449),
  ("return_statement -> RETURN ;", "return_statement", 2, "p_return_statement", "parser.py", 455),
  ("return_statement -> RETURN expression ;", "return_statement", 3, "p_return_statement", "parser.py", 456),
  ("expression -> function_call", "expression", 1, "p_expression", "parser.py", 465),
  ("expression -> IDENTIFIER", "expression", 1, "p_expression", "parser.py", 466),
  ("expression -> assignment", "expression", 1, "p_expression", "parser.py", 467),
  ("expression -> constant_expression", "expression", 1, "p_expression", "parser.py", 468),
  ("constant_expression -> INT_VALUE", "constant_expression", 1, "p_constant_expression", "parser.py", 477),
  ("constant_expression -> FLOAT_VALUE", "constant_expression", 1, "p_constant_expression", "parser.py", 478),
  ("constant_expression -> STRING_VALUE", "constant_expression", 1, "p_constant_expression", "parser.py", 479),
  ("constant_expression -> OBJECTSELF_VALUE", "constant_expression", 1, "p_constant_expression", "parser.py", 480),
  ("constant_expression -> OBJECTINVALID_VALUE", "constant_expression", 1, "p_constant_expression", "parser.py", 481),
  ("constant_expression -> TRUE_VALUE", "constant_expression", 1, "p_constant_expression", "parser.py", 482),
  ("constant_expression -> FALSE_VALUE", "constant_expression", 1, "p_constant_expression", "parser.py", 483),
  ("constant_expression -> INT_HEX_VALUE", "constant_expression", 1, "p_constant_expression", "parser.py", 484),
  ("expression -> field_access", "expression", 1, "p_field_access_expression", "parser.py", 490),
  ("function_call -> IDENTIFIER ( function_call_params )", "function_call", 4, "p_function_call", "parser.py", 496),
  ("function_call_params -> function_call_params , expression", "function_call_params", 3, "p_function_call_params", "parser.py", 511),
  ("function_call_params -> expression", "function_call_params", 1, "p_function_call_params", "parser.py", 512),
  ("function_call_params -> <empty>", "function_call_params", 0, "p_function_call_params", "parser.py", 513),
  ("data_type -> INT_TYPE", "data_type", 1, "p_data_type", "parser.py", 525),
  ("data_type -> FLOAT_TYPE", "data_type", 1, "p_data_type", "parser.py", 526),
  ("data_type -> OBJECT_TYPE", "data_type", 1, "p_data_type", "parser.py", 527),
  ("data_type -> VOID_TYPE", "data_type", 1, "p_data_type", "parser.py", 528),
  ("data_type -> EVENT_TYPE", "data_type", 1, "p_data_type", "parser.py", 529),
  ("data_type -> EFFECT_TYPE", "data_type", 1, "p_data_type", "parser.py", 530),
  ("data_type -> ITEMPROPERTY_TYPE", "data_type", 1, "p_data_type", "parser.py", 531),
  ("data_type -> LOCATION_TYPE", "data_type", 1, "p_data_type", "parser.py", 532),
  ("data_type -> STRING_TYPE", "data_type", 1, "p_data_type", "parser.py", 533),
  ("data_type -> TALENT_TYPE", "data_type", 1, "p_data_type", "parser.py", 534),
  ("data_type -> VECTOR_TYPE", "data_type", 1, "p_data_type", "parser.py", 535),
  ("data_type -> ACTION_TYPE", "data_type", 1, "p_data_type", "parser.py", 536),
  ("data_type -> STRUCT IDENTIFIER", "data_type", 2, "p_data_type", "parser.py", 537),
  ("field_access -> IDENTIFIER", "field_access", 1, "p_field_access", "parser.py", 546),
  ("field_access -> IDENTIFIER . IDENTIFIER", "field_access", 3, "p_field_access", "parser.py", 547),
  ("field_access -> field_access . IDENTIFIER", "field_access", 3, "p_field_access", "parser.py", 548),
  ("expression -> INCREMENT field_access", "expression", 2, "p_prefix_increment_expression", "parser.py", 560),
  ("expression -> field_access INCREMENT", "expression", 2, "p_postfix_increment_expression", "parser.py", 566),
  ("expression -> DECREMENT field_access", "expression", 2, "p_prefix_decrement_expression", "parser.py", 572),
  ("expression -> field_access DECREMENT", "expression", 2, "p_postfix_decrement_expression", "parser.py", 578),
  ("expression -> [ FLOAT_VALUE , FLOAT_VALUE , FLOAT_VALUE ]", "expression", 7, "p_vector_expression", "parser.py", 584),
  ("switch_statement -> SWITCH_CONTROL ( expression ) { switch_blocks }", "switch_statement", 7, "p_switch_statement", "parser.py", 591),
  ("switch_blocks -> switch_blocks switch_block", "switch_blocks", 2, "p_switch_blocks", "parser.py", 597),
  ("switch_blocks -> <empty>", "switch_blocks", 0, "p_switch_blocks", "parser.py", 598),
  ("switch_block -> switch_labels block_statements", "switch_block", 2, "p_switch_block", "parser.py", 608),
  ("switch_labels -> switch_labels switch_label", "switch_labels", 2, "p_switch_labels", "parser.py", 614),
  ("switch_labels -> <empty>", "switch_labels", 0, "p_switch_labels", "parser.py", 615),
  ("switch_label -> CASE_CONTROL expression :", "switch_label", 3, "p_expression_switch_label", "parser.py", 625),
  ("switch_label -> DEFAULT_CONTROL :", "switch_label", 2, "p_default_switch_label", "parser.py", 631),
  ("block_statements -> block_statements statement", "block_statements", 2, "p_block_statements", "parser.py", 637),
  ("block_statements -> <empty>", "block_statements", 0, "p_block_statements", "parser.py", 638),
]
