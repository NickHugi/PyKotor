# PyKotor Development Environment

```bash
(.venv_pypy) PS G:\GitHub\PyKotor> uv --help                                                                                
An extremely fast Python package manager.

Usage: uv.exe [OPTIONS] <COMMAND>

Commands:
  run      Run a command or script
  init     Create a new project
  add      Add dependencies to the project
  remove   Remove dependencies from the project
  version  Read or update the project's version
  sync     Update the project's environment
  lock     Update the project's lockfile
  export   Export the project's lockfile to an alternate format
  tree     Display the project's dependency tree
  tool     Run and install commands provided by Python packages
  python   Manage Python versions and installations
  pip      Manage Python packages with a pip-compatible interface
  venv     Create a virtual environment
  build    Build Python packages into source distributions and wheels
  publish  Upload distributions to an index
  cache    Manage uv's cache
  self     Manage the uv executable
  help     Display documentation for a command

Cache options:
  -n, --no-cache               Avoid reading from or writing to the cache, instead using a temporary directory for the      
                               duration of the operation [env: UV_NO_CACHE=]
      --cache-dir <CACHE_DIR>  Path to the cache directory [env: UV_CACHE_DIR=]

Python options:
      --managed-python       Require use of uv-managed Python versions [env: UV_MANAGED_PYTHON=]
      --no-managed-python    Disable use of uv-managed Python versions [env: UV_NO_MANAGED_PYTHON=]
      --no-python-downloads  Disable automatic downloads of Python. [env: "UV_PYTHON_DOWNLOADS=never"]

Global options:
  -q, --quiet...
          Use quiet output
  -v, --verbose...
          Use verbose output
      --color <COLOR_CHOICE>
          Control the use of color in output [possible values: auto, always, never]
      --native-tls
          Whether to load TLS certificates from the platform's native certificate store [env: UV_NATIVE_TLS=]
      --offline
          Disable network access [env: UV_OFFLINE=]
      --allow-insecure-host <ALLOW_INSECURE_HOST>
          Allow insecure connections to a host [env: UV_INSECURE_HOST=]
      --no-progress
          Hide all progress outputs [env: UV_NO_PROGRESS=]
      --directory <DIRECTORY>
          Change to the given directory prior to running the command
      --project <PROJECT>
          Run the command within the given project directory [env: UV_PROJECT=]
      --config-file <CONFIG_FILE>
          The path to a `uv.toml` file to use for configuration [env: UV_CONFIG_FILE=]
      --no-config
          Avoid discovering configuration files (`pyproject.toml`, `uv.toml`) [env: UV_NO_CONFIG=]
  -h, --help
          Display the concise help for this command
  -V, --version
          Display the uv version

Use `uv help` for more details.
````
obviously use the correct uv syntax for selecting .venv_pypy when running Python in the terminal, never use the 'python' command always use UV.

Always statically type all variables, using the lowercase variant of the builtins. e.g. dict instead of Dict. When you do this ensure the following rqeuierments are met:
- always import `from __future__ import annotations`
- NEVER use `any`
- ALWAYS put stuff in TYPE_CHECKING blocks if it isn't being used by runtime code.
- Import `Self` and `Literal` types from `typing_extensions` and SOLELY do this in a TYPE_CHECKING block.
- NEVER import Union, Dict, List, Set, Tuple, etc. Those are old and deprecated.
- NEVER type cast with quotations.
`

NEVER run the `pip` command directly, always run through `uv pip`. NEVER use `uv run pip`

ALWAYS run pip like this: `.\.venv_pypy\Scripts\Activate.ps1; uv pip install --python .\.venv_pypy\Scripts\python.exe -r requirements-dev.txt`

log lines or debugging must log at least one or more variables. Never log a static string. Any and all conditionals should have a logging statement.

Don't use bare except blocks, always specify at least Exception. Within each in most cases always print at least the traceback.

Library (shared) pykotor code should go in Libraries/PyKotor/src/pykotor. `pykotor` is a shared namespace between all of the libraries (excluding utility).

Always use PurePath if the path isn't a real path on disk (e.g. relative paths, or paths within an archive/capsule). Otherwise always use CaseAwarePath.