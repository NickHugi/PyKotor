# -*- coding: utf-8 -*-

################################################################################
## Form generated from reading UI file 'nss.ui'
##
## Created by: Qt User Interface Compiler version 5.15.2
##
## WARNING! All changes made in this file will be lost when recompiling UI file!
################################################################################

from PySide2.QtCore import *
from PySide2.QtGui import *
from PySide2.QtWidgets import *

from utility.ui_libraries.qt.widgets.itemviews.tree import RobustTreeView
from toolset.gui.common.widgets.code_editor import CodeEditor


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        if not MainWindow.objectName():
            MainWindow.setObjectName(u"MainWindow")
        MainWindow.resize(1180, 690)
        self.actionNew = QAction(MainWindow)
        self.actionNew.setObjectName(u"actionNew")
        self.actionOpen = QAction(MainWindow)
        self.actionOpen.setObjectName(u"actionOpen")
        self.actionSave = QAction(MainWindow)
        self.actionSave.setObjectName(u"actionSave")
        self.actionSave_As = QAction(MainWindow)
        self.actionSave_As.setObjectName(u"actionSave_As")
        self.actionSave_All = QAction(MainWindow)
        self.actionSave_All.setObjectName(u"actionSave_All")
        self.actionClose = QAction(MainWindow)
        self.actionClose.setObjectName(u"actionClose")
        self.actionClose_All = QAction(MainWindow)
        self.actionClose_All.setObjectName(u"actionClose_All")
        self.actionCompile = QAction(MainWindow)
        self.actionCompile.setObjectName(u"actionCompile")
        self.actionRun = QAction(MainWindow)
        self.actionRun.setObjectName(u"actionRun")
        self.actionRun.setVisible(False)
        self.actionPrint = QAction(MainWindow)
        self.actionPrint.setObjectName(u"actionPrint")
        self.actionPrint.setVisible(False)
        self.actionPrint.setIconVisibleInMenu(False)
        self.actionExit = QAction(MainWindow)
        self.actionExit.setObjectName(u"actionExit")
        self.actionUndo = QAction(MainWindow)
        self.actionUndo.setObjectName(u"actionUndo")
        self.actionRedo = QAction(MainWindow)
        self.actionRedo.setObjectName(u"actionRedo")
        self.actionCut = QAction(MainWindow)
        self.actionCut.setObjectName(u"actionCut")
        self.actionCopy = QAction(MainWindow)
        self.actionCopy.setObjectName(u"actionCopy")
        self.actionPaste = QAction(MainWindow)
        self.actionPaste.setObjectName(u"actionPaste")
        self.actionFind = QAction(MainWindow)
        self.actionFind.setObjectName(u"actionFind")
        self.actionReplace = QAction(MainWindow)
        self.actionReplace.setObjectName(u"actionReplace")
        self.actionFind_in_Files = QAction(MainWindow)
        self.actionFind_in_Files.setObjectName(u"actionFind_in_Files")
        self.actionGo_to_Line = QAction(MainWindow)
        self.actionGo_to_Line.setObjectName(u"actionGo_to_Line")
        self.actionGo_to_Function = QAction(MainWindow)
        self.actionGo_to_Function.setObjectName(u"actionGo_to_Function")
        self.actionToggle_Comment = QAction(MainWindow)
        self.actionToggle_Comment.setObjectName(u"actionToggle_Comment")
        self.actionIndent = QAction(MainWindow)
        self.actionIndent.setObjectName(u"actionIndent")
        self.actionUnindent = QAction(MainWindow)
        self.actionUnindent.setObjectName(u"actionUnindent")
        self.actionToggleFileExplorer = QAction(MainWindow)
        self.actionToggleFileExplorer.setObjectName(u"actionToggleFileExplorer")
        self.actionToggleTerminal = QAction(MainWindow)
        self.actionToggleTerminal.setObjectName(u"actionToggleTerminal")
        self.actionToggle_Output_Panel = QAction(MainWindow)
        self.actionToggle_Output_Panel.setObjectName(u"actionToggle_Output_Panel")
        self.actionZoom_In = QAction(MainWindow)
        self.actionZoom_In.setObjectName(u"actionZoom_In")
        self.actionZoom_Out = QAction(MainWindow)
        self.actionZoom_Out.setObjectName(u"actionZoom_Out")
        self.actionReset_Zoom = QAction(MainWindow)
        self.actionReset_Zoom.setObjectName(u"actionReset_Zoom")
        self.actionToggle_Line_Numbers = QAction(MainWindow)
        self.actionToggle_Line_Numbers.setObjectName(u"actionToggle_Line_Numbers")
        self.actionToggle_Minimap = QAction(MainWindow)
        self.actionToggle_Minimap.setObjectName(u"actionToggle_Minimap")
        self.actionToggle_Wrap_Lines = QAction(MainWindow)
        self.actionToggle_Wrap_Lines.setObjectName(u"actionToggle_Wrap_Lines")
        self.actionManage_Snippets = QAction(MainWindow)
        self.actionManage_Snippets.setObjectName(u"actionManage_Snippets")
        self.actionManage_Plugins = QAction(MainWindow)
        self.actionManage_Plugins.setObjectName(u"actionManage_Plugins")
        self.actionManage_Plugins.setVisible(False)
        self.actionFormat_Code = QAction(MainWindow)
        self.actionFormat_Code.setObjectName(u"actionFormat_Code")
        self.actionAnalyze_Code = QAction(MainWindow)
        self.actionAnalyze_Code.setObjectName(u"actionAnalyze_Code")
        self.actionGenerate_Documentation = QAction(MainWindow)
        self.actionGenerate_Documentation.setObjectName(u"actionGenerate_Documentation")
        self.actionExport_to_HTML = QAction(MainWindow)
        self.actionExport_to_HTML.setObjectName(u"actionExport_to_HTML")
        self.actionStart_Debugging = QAction(MainWindow)
        self.actionStart_Debugging.setObjectName(u"actionStart_Debugging")
        self.actionStop_Debugging = QAction(MainWindow)
        self.actionStop_Debugging.setObjectName(u"actionStop_Debugging")
        self.actionStep_Over = QAction(MainWindow)
        self.actionStep_Over.setObjectName(u"actionStep_Over")
        self.actionStep_Into = QAction(MainWindow)
        self.actionStep_Into.setObjectName(u"actionStep_Into")
        self.actionStep_Out = QAction(MainWindow)
        self.actionStep_Out.setObjectName(u"actionStep_Out")
        self.actionToggle_Breakpoint = QAction(MainWindow)
        self.actionToggle_Breakpoint.setObjectName(u"actionToggle_Breakpoint")
        self.actionClear_All_Breakpoints = QAction(MainWindow)
        self.actionClear_All_Breakpoints.setObjectName(u"actionClear_All_Breakpoints")
        self.actionDocumentation = QAction(MainWindow)
        self.actionDocumentation.setObjectName(u"actionDocumentation")
        self.actionKeyboard_Shortcuts = QAction(MainWindow)
        self.actionKeyboard_Shortcuts.setObjectName(u"actionKeyboard_Shortcuts")
        self.actionCheck_for_Updates = QAction(MainWindow)
        self.actionCheck_for_Updates.setObjectName(u"actionCheck_for_Updates")
        self.actionAbout = QAction(MainWindow)
        self.actionAbout.setObjectName(u"actionAbout")
        self.actionK1 = QAction(MainWindow)
        self.actionK1.setObjectName(u"actionK1")
        self.actionK1.setCheckable(True)
        self.actionTSL = QAction(MainWindow)
        self.actionTSL.setObjectName(u"actionTSL")
        self.actionTSL.setCheckable(True)
        self.actionTSL.setChecked(True)
        self.centralwidget = QWidget(MainWindow)
        self.centralwidget.setObjectName(u"centralwidget")
        self.vboxlytCentralWidget = QVBoxLayout(self.centralwidget)
        self.vboxlytCentralWidget.setObjectName(u"vboxlytCentralWidget")
        self.middleTopHorizLyt = QHBoxLayout()
        self.middleTopHorizLyt.setObjectName(u"middleTopHorizLyt")
        self.horizontalSpacer = QSpacerItem(40, 20, QSizePolicy.Expanding, QSizePolicy.Minimum)

        self.middleTopHorizLyt.addItem(self.horizontalSpacer)

        self.gameSelector = QComboBox(self.centralwidget)
        self.gameSelector.addItem("")
        self.gameSelector.addItem("")
        self.gameSelector.setObjectName(u"gameSelector")
        sizePolicy = QSizePolicy(QSizePolicy.Preferred, QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.gameSelector.sizePolicy().hasHeightForWidth())
        self.gameSelector.setSizePolicy(sizePolicy)

        self.middleTopHorizLyt.addWidget(self.gameSelector)


        self.vboxlytCentralWidget.addLayout(self.middleTopHorizLyt)

        self.verticalSpacer = QSpacerItem(20, 40, QSizePolicy.Expanding, QSizePolicy.Minimum)

        self.vboxlytCentralWidget.addItem(self.verticalSpacer)

        self.editorTabs = QTabWidget(self.centralwidget)
        self.editorTabs.setObjectName(u"editorTabs")
        sizePolicy1 = QSizePolicy(QSizePolicy.Expanding, QSizePolicy.Preferred)
        sizePolicy1.setHorizontalStretch(0)
        sizePolicy1.setVerticalStretch(0)
        sizePolicy1.setHeightForWidth(self.editorTabs.sizePolicy().hasHeightForWidth())
        self.editorTabs.setSizePolicy(sizePolicy1)
        font = QFont()
        font.setStyleStrategy(QFont.NoAntialias)
        self.editorTabs.setFont(font)
        self.editorTabs.setAcceptDrops(True)
        self.editorTabs.setTabsClosable(True)
        self.editorTabs.setMovable(True)
        self.tab = QWidget()
        self.tab.setObjectName(u"tab")
        self.verticalLayout_6 = QVBoxLayout(self.tab)
        self.verticalLayout_6.setObjectName(u"verticalLayout_6")
        self.searchBar = QLineEdit(self.tab)
        self.searchBar.setObjectName(u"searchBar")

        self.verticalLayout_6.addWidget(self.searchBar)

        self.codeEdit = CodeEditor(self.tab)
        self.codeEdit.setObjectName(u"codeEdit")

        self.verticalLayout_6.addWidget(self.codeEdit)

        self.editorTabs.addTab(self.tab, "")

        self.vboxlytCentralWidget.addWidget(self.editorTabs)

        self.panelTabs = QTabWidget(self.centralwidget)
        self.panelTabs.setObjectName(u"panelTabs")
        font1 = QFont()
        font1.setFamily(u"Segoe UI")
        font1.setPointSize(10)
        self.panelTabs.setFont(font1)
        self.panelTabs.setMovable(True)
        self.panelTabs.setTabBarAutoHide(True)
        self.outputTab = QWidget()
        self.outputTab.setObjectName(u"outputTab")
        self.vertLytPanelTabs = QVBoxLayout(self.outputTab)
        self.vertLytPanelTabs.setObjectName(u"vertLytPanelTabs")
        self.outputEdit = QPlainTextEdit(self.outputTab)
        self.outputEdit.setObjectName(u"outputEdit")
        font2 = QFont()
        font2.setFamily(u"Lucida Console")
        font2.setPointSize(10)
        self.outputEdit.setFont(font2)
        self.outputEdit.viewport().setProperty("cursor", QCursor(Qt.IBeamCursor))
        self.outputEdit.setTabChangesFocus(True)
        self.outputEdit.setReadOnly(True)

        self.vertLytPanelTabs.addWidget(self.outputEdit)

        self.panelTabs.addTab(self.outputTab, "")
        self.terminalTab = QWidget()
        self.terminalTab.setObjectName(u"terminalTab")
        self.verticalLayout_13 = QVBoxLayout(self.terminalTab)
        self.verticalLayout_13.setObjectName(u"verticalLayout_13")
        self.terminalWidget = QWidget(self.terminalTab)
        self.terminalWidget.setObjectName(u"terminalWidget")
        self.terminalWidget.setMinimumSize(QSize(0, 100))

        self.verticalLayout_13.addWidget(self.terminalWidget)

        self.panelTabs.addTab(self.terminalTab, "")
        self.debugTab = QWidget()
        self.debugTab.setObjectName(u"debugTab")
        self.verticalLayout_12 = QVBoxLayout(self.debugTab)
        self.verticalLayout_12.setObjectName(u"verticalLayout_12")
        self.debugTable = QTableWidget(self.debugTab)
        if (self.debugTable.columnCount() < 3):
            self.debugTable.setColumnCount(3)
        __qtablewidgetitem = QTableWidgetItem()
        self.debugTable.setHorizontalHeaderItem(0, __qtablewidgetitem)
        __qtablewidgetitem1 = QTableWidgetItem()
        self.debugTable.setHorizontalHeaderItem(1, __qtablewidgetitem1)
        __qtablewidgetitem2 = QTableWidgetItem()
        self.debugTable.setHorizontalHeaderItem(2, __qtablewidgetitem2)
        self.debugTable.setObjectName(u"debugTable")

        self.verticalLayout_12.addWidget(self.debugTable)

        self.panelTabs.addTab(self.debugTab, "")
        self.findResultsTab = QWidget()
        self.findResultsTab.setObjectName(u"findResultsTab")
        self.verticalLayout_11 = QVBoxLayout(self.findResultsTab)
        self.verticalLayout_11.setObjectName(u"verticalLayout_11")
        self.findResultsTree = QTreeWidget(self.findResultsTab)
        self.findResultsTree.setObjectName(u"findResultsTree")

        self.verticalLayout_11.addWidget(self.findResultsTree)

        self.panelTabs.addTab(self.findResultsTab, "")
        self.outlineTab = QWidget()
        self.outlineTab.setObjectName(u"outlineTab")
        self.verticalLayout_4 = QVBoxLayout(self.outlineTab)
        self.verticalLayout_4.setObjectName(u"verticalLayout_4")
        self.outlineView = QTreeWidget(self.outlineTab)
        self.outlineView.setObjectName(u"outlineView")

        self.verticalLayout_4.addWidget(self.outlineView)

        self.panelTabs.addTab(self.outlineTab, "")
        self.learnTab = QWidget()
        self.learnTab.setObjectName(u"learnTab")
        self.vertLytLearnTab = QVBoxLayout(self.learnTab)
        self.vertLytLearnTab.setObjectName(u"vertLytLearnTab")
        self.horizontalLayout_5 = QHBoxLayout()
        self.horizontalLayout_5.setObjectName(u"horizontalLayout_5")
        self.functionSearchEdit = QLineEdit(self.learnTab)
        self.functionSearchEdit.setObjectName(u"functionSearchEdit")

        self.horizontalLayout_5.addWidget(self.functionSearchEdit)

        self.constantSearchEdit = QLineEdit(self.learnTab)
        self.constantSearchEdit.setObjectName(u"constantSearchEdit")

        self.horizontalLayout_5.addWidget(self.constantSearchEdit)


        self.vertLytLearnTab.addLayout(self.horizontalLayout_5)

        self.horizontalLayout = QHBoxLayout()
        self.horizontalLayout.setObjectName(u"horizontalLayout")
        self.functionList = QListWidget(self.learnTab)
        self.functionList.setObjectName(u"functionList")

        self.horizontalLayout.addWidget(self.functionList)

        self.constantList = QListWidget(self.learnTab)
        self.constantList.setObjectName(u"constantList")

        self.horizontalLayout.addWidget(self.constantList)


        self.vertLytLearnTab.addLayout(self.horizontalLayout)

        self.panelTabs.addTab(self.learnTab, "")

        self.vboxlytCentralWidget.addWidget(self.panelTabs)

        self.progressBar = QProgressBar(self.centralwidget)
        self.progressBar.setObjectName(u"progressBar")
        self.progressBar.setMaximum(1)
        self.progressBar.setTextVisible(False)

        self.vboxlytCentralWidget.addWidget(self.progressBar)

        self.vboxlytCentralWidget.setStretch(2, 1)
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QStatusBar(MainWindow)
        self.statusbar.setObjectName(u"statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.fileExplorerDock = QDockWidget(MainWindow)
        self.fileExplorerDock.setObjectName(u"fileExplorerDock")
        self.fileExplorerContents = QWidget()
        self.fileExplorerContents.setObjectName(u"fileExplorerContents")
        self.fileExplorerLayout = QVBoxLayout(self.fileExplorerContents)
        self.fileExplorerLayout.setObjectName(u"fileExplorerLayout")
        self.lineEdit = QLineEdit(self.fileExplorerContents)
        self.lineEdit.setObjectName(u"lineEdit")

        self.fileExplorerLayout.addWidget(self.lineEdit)

        self.fileExplorerView = RobustTreeView(self.fileExplorerContents)
        self.fileExplorerView.setObjectName(u"fileExplorerView")

        self.fileExplorerLayout.addWidget(self.fileExplorerView)

        self.fileSearchEdit = QLineEdit(self.fileExplorerContents)
        self.fileSearchEdit.setObjectName(u"fileSearchEdit")

        self.fileExplorerLayout.addWidget(self.fileSearchEdit)

        self.refreshFileExplorerButton = QPushButton(self.fileExplorerContents)
        self.refreshFileExplorerButton.setObjectName(u"refreshFileExplorerButton")

        self.fileExplorerLayout.addWidget(self.refreshFileExplorerButton)

        self.fileExplorerDock.setWidget(self.fileExplorerContents)
        MainWindow.addDockWidget(Qt.LeftDockWidgetArea, self.fileExplorerDock)
        self.bookmarksDock = QDockWidget(MainWindow)
        self.bookmarksDock.setObjectName(u"bookmarksDock")
        self.bookmarksDock.setAcceptDrops(True)
        self.dockWidgetContents_2 = QWidget()
        self.dockWidgetContents_2.setObjectName(u"dockWidgetContents_2")
        self.verticalLayout_14 = QVBoxLayout(self.dockWidgetContents_2)
        self.verticalLayout_14.setObjectName(u"verticalLayout_14")
        self.bookmarkTree = QTreeWidget(self.dockWidgetContents_2)
        self.bookmarkTree.setObjectName(u"bookmarkTree")

        self.verticalLayout_14.addWidget(self.bookmarkTree)

        self.addBookmarkButton = QPushButton(self.dockWidgetContents_2)
        self.addBookmarkButton.setObjectName(u"addBookmarkButton")

        self.verticalLayout_14.addWidget(self.addBookmarkButton)

        self.removeBookmarkButton = QPushButton(self.dockWidgetContents_2)
        self.removeBookmarkButton.setObjectName(u"removeBookmarkButton")

        self.verticalLayout_14.addWidget(self.removeBookmarkButton)

        self.bookmarksDock.setWidget(self.dockWidgetContents_2)
        MainWindow.addDockWidget(Qt.RightDockWidgetArea, self.bookmarksDock)
        self.snippetsDock = QDockWidget(MainWindow)
        self.snippetsDock.setObjectName(u"snippetsDock")
        self.snippetsDock.setAcceptDrops(True)
        self.snippetsDockContents = QWidget()
        self.snippetsDockContents.setObjectName(u"snippetsDockContents")
        self.snippetsLayout = QVBoxLayout(self.snippetsDockContents)
        self.snippetsLayout.setObjectName(u"snippetsLayout")
        self.snippetSearchEdit = QLineEdit(self.snippetsDockContents)
        self.snippetSearchEdit.setObjectName(u"snippetSearchEdit")

        self.snippetsLayout.addWidget(self.snippetSearchEdit)

        self.snippetList = QListWidget(self.snippetsDockContents)
        self.snippetList.setObjectName(u"snippetList")

        self.snippetsLayout.addWidget(self.snippetList)

        self.snippetButtonsLayout = QHBoxLayout()
        self.snippetButtonsLayout.setObjectName(u"snippetButtonsLayout")
        self.snippetAddButton = QPushButton(self.snippetsDockContents)
        self.snippetAddButton.setObjectName(u"snippetAddButton")

        self.snippetButtonsLayout.addWidget(self.snippetAddButton)

        self.snippetDelButton = QPushButton(self.snippetsDockContents)
        self.snippetDelButton.setObjectName(u"snippetDelButton")

        self.snippetButtonsLayout.addWidget(self.snippetDelButton)


        self.snippetsLayout.addLayout(self.snippetButtonsLayout)

        self.snippetReloadButton = QPushButton(self.snippetsDockContents)
        self.snippetReloadButton.setObjectName(u"snippetReloadButton")

        self.snippetsLayout.addWidget(self.snippetReloadButton)

        self.snippetsDock.setWidget(self.snippetsDockContents)
        MainWindow.addDockWidget(Qt.RightDockWidgetArea, self.snippetsDock)
        self.menubar = QMenuBar(MainWindow)
        self.menubar.setObjectName(u"menubar")
        self.menubar.setGeometry(QRect(0, 0, 1180, 22))
        self.menuFile = QMenu(self.menubar)
        self.menuFile.setObjectName(u"menuFile")
        self.menuEdit = QMenu(self.menubar)
        self.menuEdit.setObjectName(u"menuEdit")
        self.menuView = QMenu(self.menubar)
        self.menuView.setObjectName(u"menuView")
        self.menuTools = QMenu(self.menubar)
        self.menuTools.setObjectName(u"menuTools")
        self.menuDebug = QMenu(self.menubar)
        self.menuDebug.setObjectName(u"menuDebug")
        self.menuHelp = QMenu(self.menubar)
        self.menuHelp.setObjectName(u"menuHelp")
        MainWindow.setMenuBar(self.menubar)

        self.menubar.addAction(self.menuFile.menuAction())
        self.menubar.addAction(self.menuEdit.menuAction())
        self.menubar.addAction(self.menuView.menuAction())
        self.menubar.addAction(self.menuTools.menuAction())
        self.menubar.addAction(self.menuDebug.menuAction())
        self.menubar.addAction(self.menuHelp.menuAction())
        self.menuFile.addAction(self.actionNew)
        self.menuFile.addAction(self.actionOpen)
        self.menuFile.addAction(self.actionSave)
        self.menuFile.addAction(self.actionSave_As)
        self.menuFile.addAction(self.actionSave_All)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionClose)
        self.menuFile.addAction(self.actionClose_All)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionCompile)
        self.menuFile.addAction(self.actionRun)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionPrint)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionExit)
        self.menuEdit.addAction(self.actionUndo)
        self.menuEdit.addAction(self.actionRedo)
        self.menuEdit.addSeparator()
        self.menuEdit.addAction(self.actionCut)
        self.menuEdit.addAction(self.actionCopy)
        self.menuEdit.addAction(self.actionPaste)
        self.menuEdit.addSeparator()
        self.menuEdit.addAction(self.actionFind)
        self.menuEdit.addAction(self.actionReplace)
        self.menuEdit.addAction(self.actionFind_in_Files)
        self.menuEdit.addAction(self.actionGo_to_Line)
        self.menuEdit.addSeparator()
        self.menuEdit.addAction(self.actionToggle_Comment)
        self.menuEdit.addAction(self.actionIndent)
        self.menuEdit.addAction(self.actionUnindent)
        self.menuView.addAction(self.actionToggleFileExplorer)
        self.menuView.addAction(self.actionToggleTerminal)
        self.menuView.addAction(self.actionToggle_Output_Panel)
        self.menuView.addSeparator()
        self.menuView.addAction(self.actionZoom_In)
        self.menuView.addAction(self.actionZoom_Out)
        self.menuView.addAction(self.actionReset_Zoom)
        self.menuView.addSeparator()
        self.menuView.addAction(self.actionToggle_Line_Numbers)
        self.menuView.addAction(self.actionToggle_Wrap_Lines)
        self.menuTools.addAction(self.actionManage_Snippets)
        self.menuTools.addAction(self.actionManage_Plugins)
        self.menuTools.addSeparator()
        self.menuTools.addAction(self.actionFormat_Code)
        self.menuTools.addAction(self.actionAnalyze_Code)
        self.menuTools.addSeparator()
        self.menuDebug.addAction(self.actionStart_Debugging)
        self.menuDebug.addAction(self.actionStop_Debugging)
        self.menuDebug.addAction(self.actionStep_Over)
        self.menuDebug.addAction(self.actionStep_Into)
        self.menuDebug.addAction(self.actionStep_Out)
        self.menuDebug.addSeparator()
        self.menuDebug.addAction(self.actionToggle_Breakpoint)
        self.menuDebug.addAction(self.actionClear_All_Breakpoints)
        self.menuHelp.addAction(self.actionDocumentation)
        self.menuHelp.addAction(self.actionKeyboard_Shortcuts)
        self.menuHelp.addSeparator()
        self.menuHelp.addAction(self.actionCheck_for_Updates)
        self.menuHelp.addAction(self.actionAbout)

        self.retranslateUi(MainWindow)

        self.panelTabs.setCurrentIndex(2)


        QMetaObject.connectSlotsByName(MainWindow)
    # setupUi

    def retranslateUi(self, MainWindow):
        MainWindow.setWindowTitle(QCoreApplication.translate("MainWindow", u"Advanced NSS Editor", None))
        self.actionNew.setText(QCoreApplication.translate("MainWindow", u"New", None))
#if QT_CONFIG(shortcut)
        self.actionNew.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+Shift+B", None))
#endif // QT_CONFIG(shortcut)
        self.actionOpen.setText(QCoreApplication.translate("MainWindow", u"Open", None))
#if QT_CONFIG(shortcut)
        self.actionOpen.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+O", None))
#endif // QT_CONFIG(shortcut)
        self.actionSave.setText(QCoreApplication.translate("MainWindow", u"Save", None))
#if QT_CONFIG(shortcut)
        self.actionSave.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+S", None))
#endif // QT_CONFIG(shortcut)
        self.actionSave_As.setText(QCoreApplication.translate("MainWindow", u"Save As", None))
#if QT_CONFIG(shortcut)
        self.actionSave_As.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+Shift+S", None))
#endif // QT_CONFIG(shortcut)
        self.actionSave_All.setText(QCoreApplication.translate("MainWindow", u"Save All", None))
#if QT_CONFIG(shortcut)
        self.actionSave_All.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+Shift+A", None))
#endif // QT_CONFIG(shortcut)
        self.actionClose.setText(QCoreApplication.translate("MainWindow", u"Close", None))
#if QT_CONFIG(shortcut)
        self.actionClose.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+W", None))
#endif // QT_CONFIG(shortcut)
        self.actionClose_All.setText(QCoreApplication.translate("MainWindow", u"Close All", None))
#if QT_CONFIG(shortcut)
        self.actionClose_All.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+Shift+W", None))
#endif // QT_CONFIG(shortcut)
        self.actionCompile.setText(QCoreApplication.translate("MainWindow", u"Compile", None))
#if QT_CONFIG(shortcut)
        self.actionCompile.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+Shift+B", None))
#endif // QT_CONFIG(shortcut)
        self.actionRun.setText(QCoreApplication.translate("MainWindow", u"Run", None))
#if QT_CONFIG(shortcut)
        self.actionRun.setShortcut(QCoreApplication.translate("MainWindow", u"F6", None))
#endif // QT_CONFIG(shortcut)
        self.actionPrint.setText(QCoreApplication.translate("MainWindow", u"Print", None))
#if QT_CONFIG(shortcut)
        self.actionPrint.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+P", None))
#endif // QT_CONFIG(shortcut)
        self.actionExit.setText(QCoreApplication.translate("MainWindow", u"Exit", None))
#if QT_CONFIG(shortcut)
        self.actionExit.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+Q", None))
#endif // QT_CONFIG(shortcut)
        self.actionUndo.setText(QCoreApplication.translate("MainWindow", u"Undo", None))
#if QT_CONFIG(shortcut)
        self.actionUndo.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+Z", None))
#endif // QT_CONFIG(shortcut)
        self.actionRedo.setText(QCoreApplication.translate("MainWindow", u"Redo", None))
#if QT_CONFIG(shortcut)
        self.actionRedo.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+Y", None))
#endif // QT_CONFIG(shortcut)
        self.actionCut.setText(QCoreApplication.translate("MainWindow", u"Cut", None))
#if QT_CONFIG(shortcut)
        self.actionCut.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+X", None))
#endif // QT_CONFIG(shortcut)
        self.actionCopy.setText(QCoreApplication.translate("MainWindow", u"Copy", None))
#if QT_CONFIG(shortcut)
        self.actionCopy.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+C", None))
#endif // QT_CONFIG(shortcut)
        self.actionPaste.setText(QCoreApplication.translate("MainWindow", u"Paste", None))
#if QT_CONFIG(shortcut)
        self.actionPaste.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+V", None))
#endif // QT_CONFIG(shortcut)
        self.actionFind.setText(QCoreApplication.translate("MainWindow", u"Find", None))
#if QT_CONFIG(shortcut)
        self.actionFind.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+F", None))
#endif // QT_CONFIG(shortcut)
        self.actionReplace.setText(QCoreApplication.translate("MainWindow", u"Replace", None))
#if QT_CONFIG(shortcut)
        self.actionReplace.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+H", None))
#endif // QT_CONFIG(shortcut)
        self.actionFind_in_Files.setText(QCoreApplication.translate("MainWindow", u"Find in Files", None))
#if QT_CONFIG(shortcut)
        self.actionFind_in_Files.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+Shift+F", None))
#endif // QT_CONFIG(shortcut)
        self.actionGo_to_Line.setText(QCoreApplication.translate("MainWindow", u"Go to Line", None))
#if QT_CONFIG(shortcut)
        self.actionGo_to_Line.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+G", None))
#endif // QT_CONFIG(shortcut)
        self.actionGo_to_Function.setText(QCoreApplication.translate("MainWindow", u"Go to Function", None))
#if QT_CONFIG(shortcut)
        self.actionGo_to_Function.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+Shift+G", None))
#endif // QT_CONFIG(shortcut)
        self.actionToggle_Comment.setText(QCoreApplication.translate("MainWindow", u"Block Comment", None))
#if QT_CONFIG(shortcut)
        self.actionToggle_Comment.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+/", None))
#endif // QT_CONFIG(shortcut)
        self.actionIndent.setText(QCoreApplication.translate("MainWindow", u"Indent", None))
#if QT_CONFIG(shortcut)
        self.actionIndent.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+I", None))
#endif // QT_CONFIG(shortcut)
        self.actionUnindent.setText(QCoreApplication.translate("MainWindow", u"Unindent", None))
#if QT_CONFIG(shortcut)
        self.actionUnindent.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+Shift+I", None))
#endif // QT_CONFIG(shortcut)
        self.actionToggleFileExplorer.setText(QCoreApplication.translate("MainWindow", u"Toggle File Explorer", None))
#if QT_CONFIG(shortcut)
        self.actionToggleFileExplorer.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+B", None))
#endif // QT_CONFIG(shortcut)
        self.actionToggleTerminal.setText(QCoreApplication.translate("MainWindow", u"Toggle Snip/Bookmark Panel", None))
#if QT_CONFIG(shortcut)
        self.actionToggleTerminal.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+`", None))
#endif // QT_CONFIG(shortcut)
        self.actionToggle_Output_Panel.setText(QCoreApplication.translate("MainWindow", u"Toggle Output Panel", None))
#if QT_CONFIG(shortcut)
        self.actionToggle_Output_Panel.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+Shift+O", None))
#endif // QT_CONFIG(shortcut)
        self.actionZoom_In.setText(QCoreApplication.translate("MainWindow", u"Zoom In", None))
#if QT_CONFIG(shortcut)
        self.actionZoom_In.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl++", None))
#endif // QT_CONFIG(shortcut)
        self.actionZoom_Out.setText(QCoreApplication.translate("MainWindow", u"Zoom Out", None))
#if QT_CONFIG(shortcut)
        self.actionZoom_Out.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+-", None))
#endif // QT_CONFIG(shortcut)
        self.actionReset_Zoom.setText(QCoreApplication.translate("MainWindow", u"Reset Zoom", None))
#if QT_CONFIG(shortcut)
        self.actionReset_Zoom.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+0", None))
#endif // QT_CONFIG(shortcut)
        self.actionToggle_Line_Numbers.setText(QCoreApplication.translate("MainWindow", u"Toggle Line Numbers", None))
#if QT_CONFIG(shortcut)
        self.actionToggle_Line_Numbers.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+Shift+L", None))
#endif // QT_CONFIG(shortcut)
        self.actionToggle_Minimap.setText(QCoreApplication.translate("MainWindow", u"Toggle Minimap", None))
#if QT_CONFIG(shortcut)
        self.actionToggle_Minimap.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+Shift+M", None))
#endif // QT_CONFIG(shortcut)
        self.actionToggle_Wrap_Lines.setText(QCoreApplication.translate("MainWindow", u"Toggle Wrap Lines", None))
#if QT_CONFIG(shortcut)
        self.actionToggle_Wrap_Lines.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+Shift+W", None))
#endif // QT_CONFIG(shortcut)
        self.actionManage_Snippets.setText(QCoreApplication.translate("MainWindow", u"Manage Snippets", None))
        self.actionManage_Plugins.setText(QCoreApplication.translate("MainWindow", u"Manage Plugins", None))
        self.actionFormat_Code.setText(QCoreApplication.translate("MainWindow", u"Format Code", None))
#if QT_CONFIG(shortcut)
        self.actionFormat_Code.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+Shift+F", None))
#endif // QT_CONFIG(shortcut)
        self.actionAnalyze_Code.setText(QCoreApplication.translate("MainWindow", u"Analyze Code", None))
#if QT_CONFIG(shortcut)
        self.actionAnalyze_Code.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+Shift+A", None))
#endif // QT_CONFIG(shortcut)
        self.actionGenerate_Documentation.setText(QCoreApplication.translate("MainWindow", u"Generate Documentation", None))
#if QT_CONFIG(shortcut)
        self.actionGenerate_Documentation.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+Shift+D", None))
#endif // QT_CONFIG(shortcut)
        self.actionExport_to_HTML.setText(QCoreApplication.translate("MainWindow", u"Export to HTML", None))
#if QT_CONFIG(shortcut)
        self.actionExport_to_HTML.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+Shift+E", None))
#endif // QT_CONFIG(shortcut)
        self.actionStart_Debugging.setText(QCoreApplication.translate("MainWindow", u"Start Debugging", None))
#if QT_CONFIG(shortcut)
        self.actionStart_Debugging.setShortcut(QCoreApplication.translate("MainWindow", u"F9", None))
#endif // QT_CONFIG(shortcut)
        self.actionStop_Debugging.setText(QCoreApplication.translate("MainWindow", u"Stop Debugging", None))
#if QT_CONFIG(shortcut)
        self.actionStop_Debugging.setShortcut(QCoreApplication.translate("MainWindow", u"Shift+F9", None))
#endif // QT_CONFIG(shortcut)
        self.actionStep_Over.setText(QCoreApplication.translate("MainWindow", u"Step Over", None))
#if QT_CONFIG(shortcut)
        self.actionStep_Over.setShortcut(QCoreApplication.translate("MainWindow", u"F10", None))
#endif // QT_CONFIG(shortcut)
        self.actionStep_Into.setText(QCoreApplication.translate("MainWindow", u"Step Into", None))
#if QT_CONFIG(shortcut)
        self.actionStep_Into.setShortcut(QCoreApplication.translate("MainWindow", u"F11", None))
#endif // QT_CONFIG(shortcut)
        self.actionStep_Out.setText(QCoreApplication.translate("MainWindow", u"Step Out", None))
#if QT_CONFIG(shortcut)
        self.actionStep_Out.setShortcut(QCoreApplication.translate("MainWindow", u"Shift+F11", None))
#endif // QT_CONFIG(shortcut)
        self.actionToggle_Breakpoint.setText(QCoreApplication.translate("MainWindow", u"Toggle Breakpoint", None))
#if QT_CONFIG(shortcut)
        self.actionToggle_Breakpoint.setShortcut(QCoreApplication.translate("MainWindow", u"F12", None))
#endif // QT_CONFIG(shortcut)
        self.actionClear_All_Breakpoints.setText(QCoreApplication.translate("MainWindow", u"Clear All Breakpoints", None))
#if QT_CONFIG(shortcut)
        self.actionClear_All_Breakpoints.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+Shift+F12", None))
#endif // QT_CONFIG(shortcut)
        self.actionDocumentation.setText(QCoreApplication.translate("MainWindow", u"Documentation", None))
#if QT_CONFIG(shortcut)
        self.actionDocumentation.setShortcut(QCoreApplication.translate("MainWindow", u"F1", None))
#endif // QT_CONFIG(shortcut)
        self.actionKeyboard_Shortcuts.setText(QCoreApplication.translate("MainWindow", u"Keyboard Shortcuts", None))
#if QT_CONFIG(shortcut)
        self.actionKeyboard_Shortcuts.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+Shift+K", None))
#endif // QT_CONFIG(shortcut)
        self.actionCheck_for_Updates.setText(QCoreApplication.translate("MainWindow", u"Check for Updates", None))
        self.actionAbout.setText(QCoreApplication.translate("MainWindow", u"About", None))
        self.actionK1.setText(QCoreApplication.translate("MainWindow", u"K1", None))
        self.actionTSL.setText(QCoreApplication.translate("MainWindow", u"TSL", None))
        self.gameSelector.setItemText(0, QCoreApplication.translate("MainWindow", u"K1", None))
        self.gameSelector.setItemText(1, QCoreApplication.translate("MainWindow", u"TSL", None))

#if QT_CONFIG(tooltip)
        self.gameSelector.setToolTip(QCoreApplication.translate("MainWindow", u"This determines what constants to use for your IDE and impacts the PyKotor compiler (if used)", None))
#endif // QT_CONFIG(tooltip)
        self.gameSelector.setPlaceholderText("")
#if QT_CONFIG(whatsthis)
        self.editorTabs.setWhatsThis(QCoreApplication.translate("MainWindow", u"Main Code Area", None))
#endif // QT_CONFIG(whatsthis)
        self.searchBar.setPlaceholderText(QCoreApplication.translate("MainWindow", u"Search...", None))
        self.editorTabs.setTabText(self.editorTabs.indexOf(self.tab), QCoreApplication.translate("MainWindow", u"Untitled", None))
#if QT_CONFIG(whatsthis)
        self.outputEdit.setWhatsThis(QCoreApplication.translate("MainWindow", u"Output Window for the NWScript Editor", None))
#endif // QT_CONFIG(whatsthis)
        self.outputEdit.setPlaceholderText(QCoreApplication.translate("MainWindow", u"Important errors and logs will appear here.", None))
        self.panelTabs.setTabText(self.panelTabs.indexOf(self.outputTab), QCoreApplication.translate("MainWindow", u"Output", None))
        self.panelTabs.setTabText(self.panelTabs.indexOf(self.terminalTab), QCoreApplication.translate("MainWindow", u"Terminal", None))
        ___qtablewidgetitem = self.debugTable.horizontalHeaderItem(0)
        ___qtablewidgetitem.setText(QCoreApplication.translate("MainWindow", u"Variable", None));
        ___qtablewidgetitem1 = self.debugTable.horizontalHeaderItem(1)
        ___qtablewidgetitem1.setText(QCoreApplication.translate("MainWindow", u"Value", None));
        ___qtablewidgetitem2 = self.debugTable.horizontalHeaderItem(2)
        ___qtablewidgetitem2.setText(QCoreApplication.translate("MainWindow", u"Type", None));
        self.panelTabs.setTabText(self.panelTabs.indexOf(self.debugTab), QCoreApplication.translate("MainWindow", u"Debug", None))
        ___qtreewidgetitem = self.findResultsTree.headerItem()
        ___qtreewidgetitem.setText(2, QCoreApplication.translate("MainWindow", u"Content", None));
        ___qtreewidgetitem.setText(1, QCoreApplication.translate("MainWindow", u"Line", None));
        ___qtreewidgetitem.setText(0, QCoreApplication.translate("MainWindow", u"File", None));
        self.panelTabs.setTabText(self.panelTabs.indexOf(self.findResultsTab), QCoreApplication.translate("MainWindow", u"Find Results", None))
        self.panelTabs.setTabText(self.panelTabs.indexOf(self.outlineTab), QCoreApplication.translate("MainWindow", u"Outline", None))
        self.functionSearchEdit.setPlaceholderText(QCoreApplication.translate("MainWindow", u"Search functions...", None))
        self.constantSearchEdit.setPlaceholderText(QCoreApplication.translate("MainWindow", u"Search constants...", None))
        self.panelTabs.setTabText(self.panelTabs.indexOf(self.learnTab), QCoreApplication.translate("MainWindow", u"Constants", None))
        self.fileExplorerDock.setWindowTitle(QCoreApplication.translate("MainWindow", u"File Explorer", None))
        self.lineEdit.setPlaceholderText(QCoreApplication.translate("MainWindow", u"Address Bar", None))
        self.fileSearchEdit.setPlaceholderText(QCoreApplication.translate("MainWindow", u"Search files...", None))
        self.refreshFileExplorerButton.setText(QCoreApplication.translate("MainWindow", u"Refresh", None))
        self.bookmarksDock.setWindowTitle(QCoreApplication.translate("MainWindow", u"Bookmarks", None))
        ___qtreewidgetitem1 = self.bookmarkTree.headerItem()
        ___qtreewidgetitem1.setText(1, QCoreApplication.translate("MainWindow", u"Description", None));
        ___qtreewidgetitem1.setText(0, QCoreApplication.translate("MainWindow", u"Line", None));
        self.addBookmarkButton.setText(QCoreApplication.translate("MainWindow", u"Add Bookmark", None))
        self.removeBookmarkButton.setText(QCoreApplication.translate("MainWindow", u"Remove Bookmark", None))
        self.snippetsDock.setWindowTitle(QCoreApplication.translate("MainWindow", u"Snippets", None))
        self.snippetSearchEdit.setPlaceholderText(QCoreApplication.translate("MainWindow", u"Search snippets...", None))
        self.snippetAddButton.setText(QCoreApplication.translate("MainWindow", u"Add", None))
        self.snippetDelButton.setText(QCoreApplication.translate("MainWindow", u"Remove", None))
        self.snippetReloadButton.setText(QCoreApplication.translate("MainWindow", u"Reload", None))
        self.menuFile.setTitle(QCoreApplication.translate("MainWindow", u"File", None))
        self.menuEdit.setTitle(QCoreApplication.translate("MainWindow", u"Edit", None))
        self.menuView.setTitle(QCoreApplication.translate("MainWindow", u"View", None))
        self.menuTools.setTitle(QCoreApplication.translate("MainWindow", u"Tools", None))
        self.menuDebug.setTitle(QCoreApplication.translate("MainWindow", u"Debug", None))
        self.menuHelp.setTitle(QCoreApplication.translate("MainWindow", u"Help", None))
    # retranslateUi


from toolset.rcc import resources_rc_pyside2
