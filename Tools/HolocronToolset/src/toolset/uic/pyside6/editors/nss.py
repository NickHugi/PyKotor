# -*- coding: utf-8 -*-

################################################################################
## Form generated from reading UI file 'nss.ui'
##
## Created by: Qt User Interface Compiler version 6.6.3
##
## WARNING! All changes made in this file will be lost when recompiling UI file!
################################################################################

from PySide6.QtCore import (QCoreApplication, QDate, QDateTime, QLocale,
    QMetaObject, QObject, QPoint, QRect,
    QSize, QTime, QUrl, Qt)
from PySide6.QtGui import (QAction, QBrush, QColor, QConicalGradient,
    QCursor, QFont, QFontDatabase, QGradient,
    QIcon, QImage, QKeySequence, QLinearGradient,
    QPainter, QPalette, QPixmap, QRadialGradient,
    QTransform)
from PySide6.QtWidgets import (QApplication, QComboBox, QDockWidget, QHBoxLayout,
    QHeaderView, QLabel, QLineEdit, QListWidget,
    QListWidgetItem, QMainWindow, QMenu, QMenuBar,
    QPlainTextEdit, QProgressBar, QPushButton, QSizePolicy,
    QSpacerItem, QSplitter, QStackedWidget, QStatusBar,
    QTabWidget, QToolBar, QTreeView, QTreeWidget,
    QTreeWidgetItem, QVBoxLayout, QWidget)

from toolset.gui.common.widgets.code_editor import NSSCodeEditor

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        if not MainWindow.objectName():
            MainWindow.setObjectName(u"MainWindow")
        MainWindow.resize(1280, 720)
        self.actionNew = QAction(MainWindow)
        self.actionNew.setObjectName(u"actionNew")
        self.actionOpen = QAction(MainWindow)
        self.actionOpen.setObjectName(u"actionOpen")
        self.actionSave = QAction(MainWindow)
        self.actionSave.setObjectName(u"actionSave")
        self.actionSave_As = QAction(MainWindow)
        self.actionSave_As.setObjectName(u"actionSave_As")
        self.actionSave_All = QAction(MainWindow)
        self.actionSave_All.setObjectName(u"actionSave_All")
        self.actionClose = QAction(MainWindow)
        self.actionClose.setObjectName(u"actionClose")
        self.actionClose_All = QAction(MainWindow)
        self.actionClose_All.setObjectName(u"actionClose_All")
        self.actionCompile = QAction(MainWindow)
        self.actionCompile.setObjectName(u"actionCompile")
        self.actionRun = QAction(MainWindow)
        self.actionRun.setObjectName(u"actionRun")
        self.actionRun.setVisible(False)
        self.actionPrint = QAction(MainWindow)
        self.actionPrint.setObjectName(u"actionPrint")
        self.actionPrint.setVisible(False)
        self.actionPrint.setIconVisibleInMenu(False)
        self.actionExit = QAction(MainWindow)
        self.actionExit.setObjectName(u"actionExit")
        self.actionUndo = QAction(MainWindow)
        self.actionUndo.setObjectName(u"actionUndo")
        self.actionRedo = QAction(MainWindow)
        self.actionRedo.setObjectName(u"actionRedo")
        self.actionCut = QAction(MainWindow)
        self.actionCut.setObjectName(u"actionCut")
        self.actionCopy = QAction(MainWindow)
        self.actionCopy.setObjectName(u"actionCopy")
        self.actionPaste = QAction(MainWindow)
        self.actionPaste.setObjectName(u"actionPaste")
        self.actionFind = QAction(MainWindow)
        self.actionFind.setObjectName(u"actionFind")
        self.actionReplace = QAction(MainWindow)
        self.actionReplace.setObjectName(u"actionReplace")
        self.actionFind_in_Files = QAction(MainWindow)
        self.actionFind_in_Files.setObjectName(u"actionFind_in_Files")
        self.actionGo_to_Line = QAction(MainWindow)
        self.actionGo_to_Line.setObjectName(u"actionGo_to_Line")
        self.actionGo_to_Function = QAction(MainWindow)
        self.actionGo_to_Function.setObjectName(u"actionGo_to_Function")
        self.actionToggle_Comment = QAction(MainWindow)
        self.actionToggle_Comment.setObjectName(u"actionToggle_Comment")
        self.actionIndent = QAction(MainWindow)
        self.actionIndent.setObjectName(u"actionIndent")
        self.actionUnindent = QAction(MainWindow)
        self.actionUnindent.setObjectName(u"actionUnindent")
        self.actionToggleFileExplorer = QAction(MainWindow)
        self.actionToggleFileExplorer.setObjectName(u"actionToggleFileExplorer")
        self.actionToggleTerminal = QAction(MainWindow)
        self.actionToggleTerminal.setObjectName(u"actionToggleTerminal")
        self.actionToggle_Output_Panel = QAction(MainWindow)
        self.actionToggle_Output_Panel.setObjectName(u"actionToggle_Output_Panel")
        self.actionZoom_In = QAction(MainWindow)
        self.actionZoom_In.setObjectName(u"actionZoom_In")
        self.actionZoom_Out = QAction(MainWindow)
        self.actionZoom_Out.setObjectName(u"actionZoom_Out")
        self.actionReset_Zoom = QAction(MainWindow)
        self.actionReset_Zoom.setObjectName(u"actionReset_Zoom")
        self.actionToggle_Line_Numbers = QAction(MainWindow)
        self.actionToggle_Line_Numbers.setObjectName(u"actionToggle_Line_Numbers")
        self.actionToggle_Minimap = QAction(MainWindow)
        self.actionToggle_Minimap.setObjectName(u"actionToggle_Minimap")
        self.actionToggle_Wrap_Lines = QAction(MainWindow)
        self.actionToggle_Wrap_Lines.setObjectName(u"actionToggle_Wrap_Lines")
        self.actionManage_Snippets = QAction(MainWindow)
        self.actionManage_Snippets.setObjectName(u"actionManage_Snippets")
        self.actionManage_Plugins = QAction(MainWindow)
        self.actionManage_Plugins.setObjectName(u"actionManage_Plugins")
        self.actionManage_Plugins.setVisible(False)
        self.actionFormat_Code = QAction(MainWindow)
        self.actionFormat_Code.setObjectName(u"actionFormat_Code")
        self.actionAnalyze_Code = QAction(MainWindow)
        self.actionAnalyze_Code.setObjectName(u"actionAnalyze_Code")
        self.actionGenerate_Documentation = QAction(MainWindow)
        self.actionGenerate_Documentation.setObjectName(u"actionGenerate_Documentation")
        self.actionExport_to_HTML = QAction(MainWindow)
        self.actionExport_to_HTML.setObjectName(u"actionExport_to_HTML")
        self.actionStart_Debugging = QAction(MainWindow)
        self.actionStart_Debugging.setObjectName(u"actionStart_Debugging")
        self.actionStop_Debugging = QAction(MainWindow)
        self.actionStop_Debugging.setObjectName(u"actionStop_Debugging")
        self.actionStep_Over = QAction(MainWindow)
        self.actionStep_Over.setObjectName(u"actionStep_Over")
        self.actionStep_Into = QAction(MainWindow)
        self.actionStep_Into.setObjectName(u"actionStep_Into")
        self.actionStep_Out = QAction(MainWindow)
        self.actionStep_Out.setObjectName(u"actionStep_Out")
        self.actionToggle_Breakpoint = QAction(MainWindow)
        self.actionToggle_Breakpoint.setObjectName(u"actionToggle_Breakpoint")
        self.actionClear_All_Breakpoints = QAction(MainWindow)
        self.actionClear_All_Breakpoints.setObjectName(u"actionClear_All_Breakpoints")
        self.actionDocumentation = QAction(MainWindow)
        self.actionDocumentation.setObjectName(u"actionDocumentation")
        self.actionKeyboard_Shortcuts = QAction(MainWindow)
        self.actionKeyboard_Shortcuts.setObjectName(u"actionKeyboard_Shortcuts")
        self.actionCheck_for_Updates = QAction(MainWindow)
        self.actionCheck_for_Updates.setObjectName(u"actionCheck_for_Updates")
        self.actionAbout = QAction(MainWindow)
        self.actionAbout.setObjectName(u"actionAbout")
        self.actionK1 = QAction(MainWindow)
        self.actionK1.setObjectName(u"actionK1")
        self.actionK1.setCheckable(True)
        self.actionTSL = QAction(MainWindow)
        self.actionTSL.setObjectName(u"actionTSL")
        self.actionTSL.setCheckable(True)
        self.actionTSL.setChecked(True)
        self.actionDownloadVanillaSource = QAction(MainWindow)
        self.actionDownloadVanillaSource.setObjectName(u"actionDownloadVanillaSource")
        self.centralwidget = QWidget(MainWindow)
        self.centralwidget.setObjectName(u"centralwidget")
        self.verticalLayout = QVBoxLayout(self.centralwidget)
        self.verticalLayout.setObjectName(u"verticalLayout")
        self.middleTopHorizLyt = QHBoxLayout()
        self.middleTopHorizLyt.setObjectName(u"middleTopHorizLyt")
        self.horizontalSpacer = QSpacerItem(320, 20, QSizePolicy.Policy.Expanding, QSizePolicy.Policy.Minimum)

        self.middleTopHorizLyt.addItem(self.horizontalSpacer)

        self.labelGameSelector = QLabel(self.centralwidget)
        self.labelGameSelector.setObjectName(u"labelGameSelector")

        self.middleTopHorizLyt.addWidget(self.labelGameSelector, 0, Qt.AlignmentFlag.AlignHCenter)

        self.gameSelector = QComboBox(self.centralwidget)
        self.gameSelector.addItem("")
        self.gameSelector.addItem("")
        self.gameSelector.setObjectName(u"gameSelector")
        sizePolicy = QSizePolicy(QSizePolicy.Policy.Preferred, QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.gameSelector.sizePolicy().hasHeightForWidth())
        self.gameSelector.setSizePolicy(sizePolicy)

        self.middleTopHorizLyt.addWidget(self.gameSelector)

        self.middleTopHorizLyt.setStretch(1, 1)
        self.middleTopHorizLyt.setStretch(2, 1)

        self.verticalLayout.addLayout(self.middleTopHorizLyt)

        self.searchBar = QLineEdit(self.centralwidget)
        self.searchBar.setObjectName(u"searchBar")

        self.verticalLayout.addWidget(self.searchBar)

        self.mainSplitter = QSplitter(self.centralwidget)
        self.mainSplitter.setObjectName(u"mainSplitter")
        sizePolicy1 = QSizePolicy(QSizePolicy.Policy.Expanding, QSizePolicy.Policy.Preferred)
        sizePolicy1.setHorizontalStretch(0)
        sizePolicy1.setVerticalStretch(0)
        sizePolicy1.setHeightForWidth(self.mainSplitter.sizePolicy().hasHeightForWidth())
        self.mainSplitter.setSizePolicy(sizePolicy1)
        self.mainSplitter.setOrientation(Qt.Horizontal)
        self.leftPanel = QWidget(self.mainSplitter)
        self.leftPanel.setObjectName(u"leftPanel")
        self.leftPanelLayout = QVBoxLayout(self.leftPanel)
        self.leftPanelLayout.setObjectName(u"leftPanelLayout")
        self.leftPanelLayout.setContentsMargins(0, 0, 0, 0)
        self.fileExplorerTabs = QTabWidget(self.leftPanel)
        self.fileExplorerTabs.setObjectName(u"fileExplorerTabs")
        self.fileExplorerTabs.setTabPosition(QTabWidget.North)
        self.fileExplorerTab = QWidget()
        self.fileExplorerTab.setObjectName(u"fileExplorerTab")
        self.fileExplorerLayout = QVBoxLayout(self.fileExplorerTab)
        self.fileExplorerLayout.setObjectName(u"fileExplorerLayout")
        self.fileExplorerPath = QLineEdit(self.fileExplorerTab)
        self.fileExplorerPath.setObjectName(u"fileExplorerPath")

        self.fileExplorerLayout.addWidget(self.fileExplorerPath)

        self.fileExplorerTree = QTreeView(self.fileExplorerTab)
        self.fileExplorerTree.setObjectName(u"fileExplorerTree")

        self.fileExplorerLayout.addWidget(self.fileExplorerTree)

        self.fileExplorerTabs.addTab(self.fileExplorerTab, "")

        self.leftPanelLayout.addWidget(self.fileExplorerTabs)

        self.mainSplitter.addWidget(self.leftPanel)
        self.rightSplitter = QSplitter(self.mainSplitter)
        self.rightSplitter.setObjectName(u"rightSplitter")
        self.rightSplitter.setOrientation(Qt.Vertical)
        self.editorWidget = QWidget(self.rightSplitter)
        self.editorWidget.setObjectName(u"editorWidget")
        self.editorLayout = QVBoxLayout(self.editorWidget)
        self.editorLayout.setObjectName(u"editorLayout")
        self.editorLayout.setContentsMargins(0, 0, 0, 0)
        self.editorStack = QStackedWidget(self.editorWidget)
        self.editorStack.setObjectName(u"editorStack")
        self.nativeEditor = NSSCodeEditor()
        self.nativeEditor.setObjectName(u"nativeEditor")
        self.editorStack.addWidget(self.nativeEditor)
        self.webEditor = WebViewEditor()
        self.webEditor.setObjectName(u"webEditor")
        self.editorStack.addWidget(self.webEditor)

        self.editorLayout.addWidget(self.editorStack)

        self.toggleEditorButton = QPushButton(self.editorWidget)
        self.toggleEditorButton.setObjectName(u"toggleEditorButton")

        self.editorLayout.addWidget(self.toggleEditorButton)

        self.rightSplitter.addWidget(self.editorWidget)
        self.editorTabsWidget = QWidget(self.rightSplitter)
        self.editorTabsWidget.setObjectName(u"editorTabsWidget")
        self.editorTabsLayout = QVBoxLayout(self.editorTabsWidget)
        self.editorTabsLayout.setObjectName(u"editorTabsLayout")
        self.editorTabsLayout.setContentsMargins(0, 0, 0, 0)
        self.editorTabs = QTabWidget(self.editorTabsWidget)
        self.editorTabs.setObjectName(u"editorTabs")
        sizePolicy2 = QSizePolicy(QSizePolicy.Policy.Expanding, QSizePolicy.Policy.Expanding)
        sizePolicy2.setHorizontalStretch(0)
        sizePolicy2.setVerticalStretch(0)
        sizePolicy2.setHeightForWidth(self.editorTabs.sizePolicy().hasHeightForWidth())
        self.editorTabs.setSizePolicy(sizePolicy2)
        self.editorTabs.setAcceptDrops(True)
        self.editorTabs.setTabsClosable(True)
        self.editorTabs.setMovable(True)

        self.editorTabsLayout.addWidget(self.editorTabs)

        self.searchReplaceWidget = QWidget(self.editorTabsWidget)
        self.searchReplaceWidget.setObjectName(u"searchReplaceWidget")
        self.searchReplaceLayout = QHBoxLayout(self.searchReplaceWidget)
        self.searchReplaceLayout.setObjectName(u"searchReplaceLayout")
        self.searchLineEdit = QLineEdit(self.searchReplaceWidget)
        self.searchLineEdit.setObjectName(u"searchLineEdit")

        self.searchReplaceLayout.addWidget(self.searchLineEdit)

        self.replaceLineEdit = QLineEdit(self.searchReplaceWidget)
        self.replaceLineEdit.setObjectName(u"replaceLineEdit")

        self.searchReplaceLayout.addWidget(self.replaceLineEdit)


        self.editorTabsLayout.addWidget(self.searchReplaceWidget)

        self.rightSplitter.addWidget(self.editorTabsWidget)
        self.bottomTabs = QTabWidget(self.rightSplitter)
        self.bottomTabs.setObjectName(u"bottomTabs")
        self.bottomTabs.setTabPosition(QTabWidget.South)
        self.outputTab = QWidget()
        self.outputTab.setObjectName(u"outputTab")
        self.outputLayout = QVBoxLayout(self.outputTab)
        self.outputLayout.setObjectName(u"outputLayout")
        self.outputEdit = QPlainTextEdit(self.outputTab)
        self.outputEdit.setObjectName(u"outputEdit")
        self.outputEdit.setReadOnly(True)

        self.outputLayout.addWidget(self.outputEdit)

        self.bottomTabs.addTab(self.outputTab, "")
        self.problemsTab = QWidget()
        self.problemsTab.setObjectName(u"problemsTab")
        self.problemsLayout = QVBoxLayout(self.problemsTab)
        self.problemsLayout.setObjectName(u"problemsLayout")
        self.problemsTree = QTreeWidget(self.problemsTab)
        self.problemsTree.setObjectName(u"problemsTree")

        self.problemsLayout.addWidget(self.problemsTree)

        self.bottomTabs.addTab(self.problemsTab, "")
        self.rightSplitter.addWidget(self.bottomTabs)
        self.mainSplitter.addWidget(self.rightSplitter)

        self.verticalLayout.addWidget(self.mainSplitter)

        self.progressBar = QProgressBar(self.centralwidget)
        self.progressBar.setObjectName(u"progressBar")
        self.progressBar.setMaximum(1)
        self.progressBar.setTextVisible(False)

        self.verticalLayout.addWidget(self.progressBar)

        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QStatusBar(MainWindow)
        self.statusbar.setObjectName(u"statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.toolBar = QToolBar(MainWindow)
        self.toolBar.setObjectName(u"toolBar")
        MainWindow.addToolBar(self.toolBar)
        self.bookmarksDock = QDockWidget(MainWindow)
        self.bookmarksDock.setObjectName(u"bookmarksDock")
        self.bookmarksDock.setAcceptDrops(True)
        self.dockWidgetContents_2 = QWidget()
        self.dockWidgetContents_2.setObjectName(u"dockWidgetContents_2")
        self.verticalLayout_14 = QVBoxLayout(self.dockWidgetContents_2)
        self.verticalLayout_14.setObjectName(u"verticalLayout_14")
        self.bookmarkTree = QTreeWidget(self.dockWidgetContents_2)
        self.bookmarkTree.setObjectName(u"bookmarkTree")

        self.verticalLayout_14.addWidget(self.bookmarkTree)

        self.addBookmarkButton = QPushButton(self.dockWidgetContents_2)
        self.addBookmarkButton.setObjectName(u"addBookmarkButton")

        self.verticalLayout_14.addWidget(self.addBookmarkButton)

        self.removeBookmarkButton = QPushButton(self.dockWidgetContents_2)
        self.removeBookmarkButton.setObjectName(u"removeBookmarkButton")

        self.verticalLayout_14.addWidget(self.removeBookmarkButton)

        self.bookmarksDock.setWidget(self.dockWidgetContents_2)
        MainWindow.addDockWidget(Qt.RightDockWidgetArea, self.bookmarksDock)
        self.snippetsDock = QDockWidget(MainWindow)
        self.snippetsDock.setObjectName(u"snippetsDock")
        self.snippetsDock.setAcceptDrops(True)
        self.snippetsDockContents = QWidget()
        self.snippetsDockContents.setObjectName(u"snippetsDockContents")
        self.snippetsLayout = QVBoxLayout(self.snippetsDockContents)
        self.snippetsLayout.setObjectName(u"snippetsLayout")
        self.snippetSearchEdit = QLineEdit(self.snippetsDockContents)
        self.snippetSearchEdit.setObjectName(u"snippetSearchEdit")

        self.snippetsLayout.addWidget(self.snippetSearchEdit)

        self.snippetList = QListWidget(self.snippetsDockContents)
        self.snippetList.setObjectName(u"snippetList")

        self.snippetsLayout.addWidget(self.snippetList)

        self.snippetButtonsLayout = QHBoxLayout()
        self.snippetButtonsLayout.setObjectName(u"snippetButtonsLayout")
        self.snippetAddButton = QPushButton(self.snippetsDockContents)
        self.snippetAddButton.setObjectName(u"snippetAddButton")

        self.snippetButtonsLayout.addWidget(self.snippetAddButton)

        self.snippetDelButton = QPushButton(self.snippetsDockContents)
        self.snippetDelButton.setObjectName(u"snippetDelButton")

        self.snippetButtonsLayout.addWidget(self.snippetDelButton)


        self.snippetsLayout.addLayout(self.snippetButtonsLayout)

        self.snippetReloadButton = QPushButton(self.snippetsDockContents)
        self.snippetReloadButton.setObjectName(u"snippetReloadButton")

        self.snippetsLayout.addWidget(self.snippetReloadButton)

        self.snippetsDock.setWidget(self.snippetsDockContents)
        MainWindow.addDockWidget(Qt.RightDockWidgetArea, self.snippetsDock)
        self.menubar = QMenuBar(MainWindow)
        self.menubar.setObjectName(u"menubar")
        self.menubar.setGeometry(QRect(0, 0, 1280, 21))
        self.menuFile = QMenu(self.menubar)
        self.menuFile.setObjectName(u"menuFile")
        self.menuEdit = QMenu(self.menubar)
        self.menuEdit.setObjectName(u"menuEdit")
        self.menuView = QMenu(self.menubar)
        self.menuView.setObjectName(u"menuView")
        self.menuTools = QMenu(self.menubar)
        self.menuTools.setObjectName(u"menuTools")
        self.menuHelp = QMenu(self.menubar)
        self.menuHelp.setObjectName(u"menuHelp")
        MainWindow.setMenuBar(self.menubar)

        self.menubar.addAction(self.menuFile.menuAction())
        self.menubar.addAction(self.menuEdit.menuAction())
        self.menubar.addAction(self.menuView.menuAction())
        self.menubar.addAction(self.menuTools.menuAction())
        self.menubar.addAction(self.menuHelp.menuAction())
        self.menuFile.addAction(self.actionNew)
        self.menuFile.addAction(self.actionOpen)
        self.menuFile.addAction(self.actionSave)
        self.menuFile.addAction(self.actionSave_As)
        self.menuFile.addAction(self.actionSave_All)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionClose)
        self.menuFile.addAction(self.actionClose_All)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionCompile)
        self.menuFile.addAction(self.actionRun)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionDownloadVanillaSource)
        self.menuFile.addAction(self.actionPrint)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionExit)
        self.menuEdit.addAction(self.actionUndo)
        self.menuEdit.addAction(self.actionRedo)
        self.menuEdit.addSeparator()
        self.menuEdit.addAction(self.actionCut)
        self.menuEdit.addAction(self.actionCopy)
        self.menuEdit.addAction(self.actionPaste)
        self.menuEdit.addSeparator()
        self.menuEdit.addAction(self.actionFind)
        self.menuEdit.addAction(self.actionReplace)
        self.menuEdit.addAction(self.actionFind_in_Files)
        self.menuEdit.addAction(self.actionGo_to_Line)
        self.menuEdit.addSeparator()
        self.menuEdit.addAction(self.actionToggle_Comment)
        self.menuEdit.addAction(self.actionIndent)
        self.menuEdit.addAction(self.actionUnindent)
        self.menuView.addAction(self.actionToggleFileExplorer)
        self.menuView.addAction(self.actionToggleTerminal)
        self.menuView.addAction(self.actionToggle_Output_Panel)
        self.menuView.addSeparator()
        self.menuView.addAction(self.actionZoom_In)
        self.menuView.addAction(self.actionZoom_Out)
        self.menuView.addAction(self.actionReset_Zoom)
        self.menuView.addSeparator()
        self.menuView.addAction(self.actionToggle_Line_Numbers)
        self.menuView.addAction(self.actionToggle_Wrap_Lines)
        self.menuTools.addAction(self.actionManage_Snippets)
        self.menuTools.addAction(self.actionManage_Plugins)
        self.menuTools.addSeparator()
        self.menuTools.addAction(self.actionFormat_Code)
        self.menuTools.addAction(self.actionAnalyze_Code)
        self.menuTools.addSeparator()
        self.menuHelp.addAction(self.actionDocumentation)
        self.menuHelp.addAction(self.actionKeyboard_Shortcuts)
        self.menuHelp.addSeparator()
        self.menuHelp.addAction(self.actionCheck_for_Updates)
        self.menuHelp.addAction(self.actionAbout)

        self.retranslateUi(MainWindow)

        QMetaObject.connectSlotsByName(MainWindow)
    # setupUi

    def retranslateUi(self, MainWindow):
        MainWindow.setWindowTitle(QCoreApplication.translate("MainWindow", u"Advanced NSS Editor", None))
        self.actionNew.setText(QCoreApplication.translate("MainWindow", u"New", None))
#if QT_CONFIG(shortcut)
        self.actionNew.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+Shift+B", None))
#endif // QT_CONFIG(shortcut)
        self.actionOpen.setText(QCoreApplication.translate("MainWindow", u"Open", None))
#if QT_CONFIG(shortcut)
        self.actionOpen.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+O", None))
#endif // QT_CONFIG(shortcut)
        self.actionSave.setText(QCoreApplication.translate("MainWindow", u"Save", None))
#if QT_CONFIG(shortcut)
        self.actionSave.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+S", None))
#endif // QT_CONFIG(shortcut)
        self.actionSave_As.setText(QCoreApplication.translate("MainWindow", u"Save As", None))
#if QT_CONFIG(shortcut)
        self.actionSave_As.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+Shift+S", None))
#endif // QT_CONFIG(shortcut)
        self.actionSave_All.setText(QCoreApplication.translate("MainWindow", u"Save All", None))
#if QT_CONFIG(shortcut)
        self.actionSave_All.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+Shift+A", None))
#endif // QT_CONFIG(shortcut)
        self.actionClose.setText(QCoreApplication.translate("MainWindow", u"Close", None))
#if QT_CONFIG(shortcut)
        self.actionClose.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+W", None))
#endif // QT_CONFIG(shortcut)
        self.actionClose_All.setText(QCoreApplication.translate("MainWindow", u"Close All", None))
#if QT_CONFIG(shortcut)
        self.actionClose_All.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+Shift+W", None))
#endif // QT_CONFIG(shortcut)
        self.actionCompile.setText(QCoreApplication.translate("MainWindow", u"Compile", None))
#if QT_CONFIG(shortcut)
        self.actionCompile.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+Shift+B", None))
#endif // QT_CONFIG(shortcut)
        self.actionRun.setText(QCoreApplication.translate("MainWindow", u"Run", None))
#if QT_CONFIG(shortcut)
        self.actionRun.setShortcut(QCoreApplication.translate("MainWindow", u"F6", None))
#endif // QT_CONFIG(shortcut)
        self.actionPrint.setText(QCoreApplication.translate("MainWindow", u"Print", None))
#if QT_CONFIG(shortcut)
        self.actionPrint.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+P", None))
#endif // QT_CONFIG(shortcut)
        self.actionExit.setText(QCoreApplication.translate("MainWindow", u"Exit", None))
#if QT_CONFIG(shortcut)
        self.actionExit.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+Q", None))
#endif // QT_CONFIG(shortcut)
        self.actionUndo.setText(QCoreApplication.translate("MainWindow", u"Undo", None))
#if QT_CONFIG(shortcut)
        self.actionUndo.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+Z", None))
#endif // QT_CONFIG(shortcut)
        self.actionRedo.setText(QCoreApplication.translate("MainWindow", u"Redo", None))
#if QT_CONFIG(shortcut)
        self.actionRedo.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+Y", None))
#endif // QT_CONFIG(shortcut)
        self.actionCut.setText(QCoreApplication.translate("MainWindow", u"Cut", None))
#if QT_CONFIG(shortcut)
        self.actionCut.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+X", None))
#endif // QT_CONFIG(shortcut)
        self.actionCopy.setText(QCoreApplication.translate("MainWindow", u"Copy", None))
#if QT_CONFIG(shortcut)
        self.actionCopy.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+C", None))
#endif // QT_CONFIG(shortcut)
        self.actionPaste.setText(QCoreApplication.translate("MainWindow", u"Paste", None))
#if QT_CONFIG(shortcut)
        self.actionPaste.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+V", None))
#endif // QT_CONFIG(shortcut)
        self.actionFind.setText(QCoreApplication.translate("MainWindow", u"Find", None))
#if QT_CONFIG(shortcut)
        self.actionFind.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+F", None))
#endif // QT_CONFIG(shortcut)
        self.actionReplace.setText(QCoreApplication.translate("MainWindow", u"Replace", None))
#if QT_CONFIG(shortcut)
        self.actionReplace.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+H", None))
#endif // QT_CONFIG(shortcut)
        self.actionFind_in_Files.setText(QCoreApplication.translate("MainWindow", u"Find in Files", None))
#if QT_CONFIG(shortcut)
        self.actionFind_in_Files.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+Shift+F", None))
#endif // QT_CONFIG(shortcut)
        self.actionGo_to_Line.setText(QCoreApplication.translate("MainWindow", u"Go to Line", None))
#if QT_CONFIG(shortcut)
        self.actionGo_to_Line.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+G", None))
#endif // QT_CONFIG(shortcut)
        self.actionGo_to_Function.setText(QCoreApplication.translate("MainWindow", u"Go to Function", None))
#if QT_CONFIG(shortcut)
        self.actionGo_to_Function.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+Shift+G", None))
#endif // QT_CONFIG(shortcut)
        self.actionToggle_Comment.setText(QCoreApplication.translate("MainWindow", u"Block Comment", None))
#if QT_CONFIG(shortcut)
        self.actionToggle_Comment.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+/", None))
#endif // QT_CONFIG(shortcut)
        self.actionIndent.setText(QCoreApplication.translate("MainWindow", u"Indent", None))
#if QT_CONFIG(shortcut)
        self.actionIndent.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+I", None))
#endif // QT_CONFIG(shortcut)
        self.actionUnindent.setText(QCoreApplication.translate("MainWindow", u"Unindent", None))
#if QT_CONFIG(shortcut)
        self.actionUnindent.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+Shift+I", None))
#endif // QT_CONFIG(shortcut)
        self.actionToggleFileExplorer.setText(QCoreApplication.translate("MainWindow", u"Toggle File Explorer", None))
#if QT_CONFIG(shortcut)
        self.actionToggleFileExplorer.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+B", None))
#endif // QT_CONFIG(shortcut)
        self.actionToggleTerminal.setText(QCoreApplication.translate("MainWindow", u"Toggle Snip/Bookmark Panel", None))
#if QT_CONFIG(shortcut)
        self.actionToggleTerminal.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+`", None))
#endif // QT_CONFIG(shortcut)
        self.actionToggle_Output_Panel.setText(QCoreApplication.translate("MainWindow", u"Toggle Output Panel", None))
#if QT_CONFIG(shortcut)
        self.actionToggle_Output_Panel.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+Shift+O", None))
#endif // QT_CONFIG(shortcut)
        self.actionZoom_In.setText(QCoreApplication.translate("MainWindow", u"Zoom In", None))
#if QT_CONFIG(shortcut)
        self.actionZoom_In.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl++", None))
#endif // QT_CONFIG(shortcut)
        self.actionZoom_Out.setText(QCoreApplication.translate("MainWindow", u"Zoom Out", None))
#if QT_CONFIG(shortcut)
        self.actionZoom_Out.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+-", None))
#endif // QT_CONFIG(shortcut)
        self.actionReset_Zoom.setText(QCoreApplication.translate("MainWindow", u"Reset Zoom", None))
#if QT_CONFIG(shortcut)
        self.actionReset_Zoom.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+0", None))
#endif // QT_CONFIG(shortcut)
        self.actionToggle_Line_Numbers.setText(QCoreApplication.translate("MainWindow", u"Toggle Line Numbers", None))
#if QT_CONFIG(shortcut)
        self.actionToggle_Line_Numbers.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+Shift+L", None))
#endif // QT_CONFIG(shortcut)
        self.actionToggle_Minimap.setText(QCoreApplication.translate("MainWindow", u"Toggle Minimap", None))
#if QT_CONFIG(shortcut)
        self.actionToggle_Minimap.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+Shift+M", None))
#endif // QT_CONFIG(shortcut)
        self.actionToggle_Wrap_Lines.setText(QCoreApplication.translate("MainWindow", u"Toggle Wrap Lines", None))
#if QT_CONFIG(shortcut)
        self.actionToggle_Wrap_Lines.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+Shift+W", None))
#endif // QT_CONFIG(shortcut)
        self.actionManage_Snippets.setText(QCoreApplication.translate("MainWindow", u"Manage Snippets", None))
        self.actionManage_Plugins.setText(QCoreApplication.translate("MainWindow", u"Manage Plugins", None))
        self.actionFormat_Code.setText(QCoreApplication.translate("MainWindow", u"Format Code", None))
#if QT_CONFIG(shortcut)
        self.actionFormat_Code.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+Shift+F", None))
#endif // QT_CONFIG(shortcut)
        self.actionAnalyze_Code.setText(QCoreApplication.translate("MainWindow", u"Analyze Code", None))
#if QT_CONFIG(shortcut)
        self.actionAnalyze_Code.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+Shift+A", None))
#endif // QT_CONFIG(shortcut)
        self.actionGenerate_Documentation.setText(QCoreApplication.translate("MainWindow", u"Generate Documentation", None))
#if QT_CONFIG(shortcut)
        self.actionGenerate_Documentation.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+Shift+D", None))
#endif // QT_CONFIG(shortcut)
        self.actionExport_to_HTML.setText(QCoreApplication.translate("MainWindow", u"Export to HTML", None))
#if QT_CONFIG(shortcut)
        self.actionExport_to_HTML.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+Shift+E", None))
#endif // QT_CONFIG(shortcut)
        self.actionStart_Debugging.setText(QCoreApplication.translate("MainWindow", u"Start Debugging", None))
#if QT_CONFIG(shortcut)
        self.actionStart_Debugging.setShortcut(QCoreApplication.translate("MainWindow", u"F9", None))
#endif // QT_CONFIG(shortcut)
        self.actionStop_Debugging.setText(QCoreApplication.translate("MainWindow", u"Stop Debugging", None))
#if QT_CONFIG(shortcut)
        self.actionStop_Debugging.setShortcut(QCoreApplication.translate("MainWindow", u"Shift+F9", None))
#endif // QT_CONFIG(shortcut)
        self.actionStep_Over.setText(QCoreApplication.translate("MainWindow", u"Step Over", None))
#if QT_CONFIG(shortcut)
        self.actionStep_Over.setShortcut(QCoreApplication.translate("MainWindow", u"F10", None))
#endif // QT_CONFIG(shortcut)
        self.actionStep_Into.setText(QCoreApplication.translate("MainWindow", u"Step Into", None))
#if QT_CONFIG(shortcut)
        self.actionStep_Into.setShortcut(QCoreApplication.translate("MainWindow", u"F11", None))
#endif // QT_CONFIG(shortcut)
        self.actionStep_Out.setText(QCoreApplication.translate("MainWindow", u"Step Out", None))
#if QT_CONFIG(shortcut)
        self.actionStep_Out.setShortcut(QCoreApplication.translate("MainWindow", u"Shift+F11", None))
#endif // QT_CONFIG(shortcut)
        self.actionToggle_Breakpoint.setText(QCoreApplication.translate("MainWindow", u"Toggle Breakpoint", None))
#if QT_CONFIG(shortcut)
        self.actionToggle_Breakpoint.setShortcut(QCoreApplication.translate("MainWindow", u"F12", None))
#endif // QT_CONFIG(shortcut)
        self.actionClear_All_Breakpoints.setText(QCoreApplication.translate("MainWindow", u"Clear All Breakpoints", None))
#if QT_CONFIG(shortcut)
        self.actionClear_All_Breakpoints.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+Shift+F12", None))
#endif // QT_CONFIG(shortcut)
        self.actionDocumentation.setText(QCoreApplication.translate("MainWindow", u"Documentation", None))
#if QT_CONFIG(shortcut)
        self.actionDocumentation.setShortcut(QCoreApplication.translate("MainWindow", u"F1", None))
#endif // QT_CONFIG(shortcut)
        self.actionKeyboard_Shortcuts.setText(QCoreApplication.translate("MainWindow", u"Keyboard Shortcuts", None))
#if QT_CONFIG(shortcut)
        self.actionKeyboard_Shortcuts.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+Shift+K", None))
#endif // QT_CONFIG(shortcut)
        self.actionCheck_for_Updates.setText(QCoreApplication.translate("MainWindow", u"Check for Updates", None))
        self.actionAbout.setText(QCoreApplication.translate("MainWindow", u"About", None))
        self.actionK1.setText(QCoreApplication.translate("MainWindow", u"K1", None))
        self.actionTSL.setText(QCoreApplication.translate("MainWindow", u"TSL", None))
        self.actionDownloadVanillaSource.setText(QCoreApplication.translate("MainWindow", u"Download from Vanilla Source Repo", None))
#if QT_CONFIG(tooltip)
        self.actionDownloadVanillaSource.setToolTip(QCoreApplication.translate("MainWindow", u"Download script from the vanilla source repository", None))
#endif // QT_CONFIG(tooltip)
        self.labelGameSelector.setText(QCoreApplication.translate("MainWindow", u"Choose a Game", None))
        self.gameSelector.setItemText(0, QCoreApplication.translate("MainWindow", u"K1", None))
        self.gameSelector.setItemText(1, QCoreApplication.translate("MainWindow", u"TSL", None))

#if QT_CONFIG(tooltip)
        self.gameSelector.setToolTip(QCoreApplication.translate("MainWindow", u"This determines what constants to use for your IDE and\n"
"                                        impacts the PyKotor compiler (if used)", None))
#endif // QT_CONFIG(tooltip)
        self.gameSelector.setPlaceholderText("")
        self.searchBar.setPlaceholderText(QCoreApplication.translate("MainWindow", u"Search...", None))
        self.fileExplorerPath.setPlaceholderText(QCoreApplication.translate("MainWindow", u"Path", None))
        self.fileExplorerTabs.setTabText(self.fileExplorerTabs.indexOf(self.fileExplorerTab), QCoreApplication.translate("MainWindow", u"File Explorer", None))
        self.toggleEditorButton.setText(QCoreApplication.translate("MainWindow", u"Toggle Web IDE", None))
        self.searchLineEdit.setPlaceholderText(QCoreApplication.translate("MainWindow", u"Search...", None))
        self.replaceLineEdit.setPlaceholderText(QCoreApplication.translate("MainWindow", u"Replace...", None))
        self.bottomTabs.setTabText(self.bottomTabs.indexOf(self.outputTab), QCoreApplication.translate("MainWindow", u"Output", None))
        ___qtreewidgetitem = self.problemsTree.headerItem()
        ___qtreewidgetitem.setText(2, QCoreApplication.translate("MainWindow", u"Line", None));
        ___qtreewidgetitem.setText(1, QCoreApplication.translate("MainWindow", u"File", None));
        ___qtreewidgetitem.setText(0, QCoreApplication.translate("MainWindow", u"Description", None));
        self.bottomTabs.setTabText(self.bottomTabs.indexOf(self.problemsTab), QCoreApplication.translate("MainWindow", u"Problems", None))
        self.bookmarksDock.setWindowTitle(QCoreApplication.translate("MainWindow", u"Bookmarks", None))
        ___qtreewidgetitem1 = self.bookmarkTree.headerItem()
        ___qtreewidgetitem1.setText(1, QCoreApplication.translate("MainWindow", u"Description", None));
        ___qtreewidgetitem1.setText(0, QCoreApplication.translate("MainWindow", u"Line", None));
        self.addBookmarkButton.setText(QCoreApplication.translate("MainWindow", u"Add Bookmark", None))
        self.removeBookmarkButton.setText(QCoreApplication.translate("MainWindow", u"Remove Bookmark", None))
        self.snippetsDock.setWindowTitle(QCoreApplication.translate("MainWindow", u"Snippets", None))
        self.snippetSearchEdit.setPlaceholderText(QCoreApplication.translate("MainWindow", u"Search snippets...", None))
        self.snippetAddButton.setText(QCoreApplication.translate("MainWindow", u"Add", None))
        self.snippetDelButton.setText(QCoreApplication.translate("MainWindow", u"Remove", None))
        self.snippetReloadButton.setText(QCoreApplication.translate("MainWindow", u"Reload", None))
        self.menuFile.setTitle(QCoreApplication.translate("MainWindow", u"File", None))
        self.menuEdit.setTitle(QCoreApplication.translate("MainWindow", u"Edit", None))
        self.menuView.setTitle(QCoreApplication.translate("MainWindow", u"View", None))
        self.menuTools.setTitle(QCoreApplication.translate("MainWindow", u"Tools", None))
        self.menuHelp.setTitle(QCoreApplication.translate("MainWindow", u"Help", None))
    # retranslateUi


from toolset.rcc import resources_rc_pyside6
