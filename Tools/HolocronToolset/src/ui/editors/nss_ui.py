
################################################################################
## Form generated from reading UI file 'nss.ui'
##
## Created by: Qt User Interface Compiler version 6.6.3
##
## WARNING! All changes made in this file will be lost when recompiling UI file!
################################################################################
from __future__ import annotations

from PySide6.QtCore import QCoreApplication, QMetaObject, QRect, Qt
from PySide6.QtGui import QAction
from PySide6.QtWidgets import (
    QComboBox,
    QDockWidget,
    QHBoxLayout,
    QLabel,
    QLineEdit,
    QListWidget,
    QMenu,
    QMenuBar,
    QPlainTextEdit,
    QProgressBar,
    QPushButton,
    QSizePolicy,
    QSpacerItem,
    QSplitter,
    QStackedWidget,
    QStatusBar,
    QTabWidget,
    QToolBar,
    QTreeView,
    QTreeWidget,
    QVBoxLayout,
    QWidget,
)

from toolset.gui.common.widgets.code_editor import NSSCodeEditor


class Ui_MainWindow:
    def setupUi(self, MainWindow):
        if not MainWindow.objectName():
            MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1280, 720)
        self.actionNew = QAction(MainWindow)
        self.actionNew.setObjectName("actionNew")
        self.actionOpen = QAction(MainWindow)
        self.actionOpen.setObjectName("actionOpen")
        self.actionSave = QAction(MainWindow)
        self.actionSave.setObjectName("actionSave")
        self.actionSave_As = QAction(MainWindow)
        self.actionSave_As.setObjectName("actionSave_As")
        self.actionSave_All = QAction(MainWindow)
        self.actionSave_All.setObjectName("actionSave_All")
        self.actionClose = QAction(MainWindow)
        self.actionClose.setObjectName("actionClose")
        self.actionClose_All = QAction(MainWindow)
        self.actionClose_All.setObjectName("actionClose_All")
        self.actionCompile = QAction(MainWindow)
        self.actionCompile.setObjectName("actionCompile")
        self.actionRun = QAction(MainWindow)
        self.actionRun.setObjectName("actionRun")
        self.actionRun.setVisible(False)
        self.actionPrint = QAction(MainWindow)
        self.actionPrint.setObjectName("actionPrint")
        self.actionPrint.setVisible(False)
        self.actionPrint.setIconVisibleInMenu(False)
        self.actionExit = QAction(MainWindow)
        self.actionExit.setObjectName("actionExit")
        self.actionUndo = QAction(MainWindow)
        self.actionUndo.setObjectName("actionUndo")
        self.actionRedo = QAction(MainWindow)
        self.actionRedo.setObjectName("actionRedo")
        self.actionCut = QAction(MainWindow)
        self.actionCut.setObjectName("actionCut")
        self.actionCopy = QAction(MainWindow)
        self.actionCopy.setObjectName("actionCopy")
        self.actionPaste = QAction(MainWindow)
        self.actionPaste.setObjectName("actionPaste")
        self.actionFind = QAction(MainWindow)
        self.actionFind.setObjectName("actionFind")
        self.actionReplace = QAction(MainWindow)
        self.actionReplace.setObjectName("actionReplace")
        self.actionFind_in_Files = QAction(MainWindow)
        self.actionFind_in_Files.setObjectName("actionFind_in_Files")
        self.actionGo_to_Line = QAction(MainWindow)
        self.actionGo_to_Line.setObjectName("actionGo_to_Line")
        self.actionGo_to_Function = QAction(MainWindow)
        self.actionGo_to_Function.setObjectName("actionGo_to_Function")
        self.actionToggle_Comment = QAction(MainWindow)
        self.actionToggle_Comment.setObjectName("actionToggle_Comment")
        self.actionIndent = QAction(MainWindow)
        self.actionIndent.setObjectName("actionIndent")
        self.actionUnindent = QAction(MainWindow)
        self.actionUnindent.setObjectName("actionUnindent")
        self.actionToggleFileExplorer = QAction(MainWindow)
        self.actionToggleFileExplorer.setObjectName("actionToggleFileExplorer")
        self.actionToggleTerminal = QAction(MainWindow)
        self.actionToggleTerminal.setObjectName("actionToggleTerminal")
        self.actionToggle_Output_Panel = QAction(MainWindow)
        self.actionToggle_Output_Panel.setObjectName("actionToggle_Output_Panel")
        self.actionZoom_In = QAction(MainWindow)
        self.actionZoom_In.setObjectName("actionZoom_In")
        self.actionZoom_Out = QAction(MainWindow)
        self.actionZoom_Out.setObjectName("actionZoom_Out")
        self.actionReset_Zoom = QAction(MainWindow)
        self.actionReset_Zoom.setObjectName("actionReset_Zoom")
        self.actionToggle_Line_Numbers = QAction(MainWindow)
        self.actionToggle_Line_Numbers.setObjectName("actionToggle_Line_Numbers")
        self.actionToggle_Minimap = QAction(MainWindow)
        self.actionToggle_Minimap.setObjectName("actionToggle_Minimap")
        self.actionToggle_Wrap_Lines = QAction(MainWindow)
        self.actionToggle_Wrap_Lines.setObjectName("actionToggle_Wrap_Lines")
        self.actionManage_Snippets = QAction(MainWindow)
        self.actionManage_Snippets.setObjectName("actionManage_Snippets")
        self.actionManage_Plugins = QAction(MainWindow)
        self.actionManage_Plugins.setObjectName("actionManage_Plugins")
        self.actionManage_Plugins.setVisible(False)
        self.actionFormat_Code = QAction(MainWindow)
        self.actionFormat_Code.setObjectName("actionFormat_Code")
        self.actionAnalyze_Code = QAction(MainWindow)
        self.actionAnalyze_Code.setObjectName("actionAnalyze_Code")
        self.actionGenerate_Documentation = QAction(MainWindow)
        self.actionGenerate_Documentation.setObjectName("actionGenerate_Documentation")
        self.actionExport_to_HTML = QAction(MainWindow)
        self.actionExport_to_HTML.setObjectName("actionExport_to_HTML")
        self.actionStart_Debugging = QAction(MainWindow)
        self.actionStart_Debugging.setObjectName("actionStart_Debugging")
        self.actionStop_Debugging = QAction(MainWindow)
        self.actionStop_Debugging.setObjectName("actionStop_Debugging")
        self.actionStep_Over = QAction(MainWindow)
        self.actionStep_Over.setObjectName("actionStep_Over")
        self.actionStep_Into = QAction(MainWindow)
        self.actionStep_Into.setObjectName("actionStep_Into")
        self.actionStep_Out = QAction(MainWindow)
        self.actionStep_Out.setObjectName("actionStep_Out")
        self.actionToggle_Breakpoint = QAction(MainWindow)
        self.actionToggle_Breakpoint.setObjectName("actionToggle_Breakpoint")
        self.actionClear_All_Breakpoints = QAction(MainWindow)
        self.actionClear_All_Breakpoints.setObjectName("actionClear_All_Breakpoints")
        self.actionDocumentation = QAction(MainWindow)
        self.actionDocumentation.setObjectName("actionDocumentation")
        self.actionKeyboard_Shortcuts = QAction(MainWindow)
        self.actionKeyboard_Shortcuts.setObjectName("actionKeyboard_Shortcuts")
        self.actionCheck_for_Updates = QAction(MainWindow)
        self.actionCheck_for_Updates.setObjectName("actionCheck_for_Updates")
        self.actionAbout = QAction(MainWindow)
        self.actionAbout.setObjectName("actionAbout")
        self.actionK1 = QAction(MainWindow)
        self.actionK1.setObjectName("actionK1")
        self.actionK1.setCheckable(True)
        self.actionTSL = QAction(MainWindow)
        self.actionTSL.setObjectName("actionTSL")
        self.actionTSL.setCheckable(True)
        self.actionTSL.setChecked(True)
        self.actionDownloadVanillaSource = QAction(MainWindow)
        self.actionDownloadVanillaSource.setObjectName("actionDownloadVanillaSource")
        self.centralwidget = QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout = QVBoxLayout(self.centralwidget)
        self.verticalLayout.setObjectName("verticalLayout")
        self.middleTopHorizLyt = QHBoxLayout()
        self.middleTopHorizLyt.setObjectName("middleTopHorizLyt")
        self.horizontalSpacer = QSpacerItem(320, 20, QSizePolicy.Policy.Expanding, QSizePolicy.Policy.Minimum)

        self.middleTopHorizLyt.addItem(self.horizontalSpacer)

        self.labelGameSelector = QLabel(self.centralwidget)
        self.labelGameSelector.setObjectName("labelGameSelector")

        self.middleTopHorizLyt.addWidget(self.labelGameSelector, 0, Qt.AlignmentFlag.AlignHCenter)

        self.gameSelector = QComboBox(self.centralwidget)
        self.gameSelector.addItem("")
        self.gameSelector.addItem("")
        self.gameSelector.setObjectName("gameSelector")
        sizePolicy = QSizePolicy(QSizePolicy.Policy.Preferred, QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.gameSelector.sizePolicy().hasHeightForWidth())
        self.gameSelector.setSizePolicy(sizePolicy)

        self.middleTopHorizLyt.addWidget(self.gameSelector)

        self.middleTopHorizLyt.setStretch(1, 1)
        self.middleTopHorizLyt.setStretch(2, 1)

        self.verticalLayout.addLayout(self.middleTopHorizLyt)

        self.searchBar = QLineEdit(self.centralwidget)
        self.searchBar.setObjectName("searchBar")

        self.verticalLayout.addWidget(self.searchBar)

        self.mainSplitter = QSplitter(self.centralwidget)
        self.mainSplitter.setObjectName("mainSplitter")
        sizePolicy1 = QSizePolicy(QSizePolicy.Policy.Expanding, QSizePolicy.Policy.Preferred)
        sizePolicy1.setHorizontalStretch(0)
        sizePolicy1.setVerticalStretch(0)
        sizePolicy1.setHeightForWidth(self.mainSplitter.sizePolicy().hasHeightForWidth())
        self.mainSplitter.setSizePolicy(sizePolicy1)
        self.mainSplitter.setOrientation(Qt.Horizontal)
        self.leftPanel = QWidget(self.mainSplitter)
        self.leftPanel.setObjectName("leftPanel")
        self.leftPanelLayout = QVBoxLayout(self.leftPanel)
        self.leftPanelLayout.setObjectName("leftPanelLayout")
        self.leftPanelLayout.setContentsMargins(0, 0, 0, 0)
        self.fileExplorerTabs = QTabWidget(self.leftPanel)
        self.fileExplorerTabs.setObjectName("fileExplorerTabs")
        self.fileExplorerTabs.setTabPosition(QTabWidget.North)
        self.fileExplorerTab = QWidget()
        self.fileExplorerTab.setObjectName("fileExplorerTab")
        self.fileExplorerLayout = QVBoxLayout(self.fileExplorerTab)
        self.fileExplorerLayout.setObjectName("fileExplorerLayout")
        self.fileExplorerPath = QLineEdit(self.fileExplorerTab)
        self.fileExplorerPath.setObjectName("fileExplorerPath")

        self.fileExplorerLayout.addWidget(self.fileExplorerPath)

        self.fileExplorerTree = QTreeView(self.fileExplorerTab)
        self.fileExplorerTree.setObjectName("fileExplorerTree")

        self.fileExplorerLayout.addWidget(self.fileExplorerTree)

        self.fileExplorerTabs.addTab(self.fileExplorerTab, "")

        self.leftPanelLayout.addWidget(self.fileExplorerTabs)

        self.mainSplitter.addWidget(self.leftPanel)
        self.rightSplitter = QSplitter(self.mainSplitter)
        self.rightSplitter.setObjectName("rightSplitter")
        self.rightSplitter.setOrientation(Qt.Vertical)
        self.editorWidget = QWidget(self.rightSplitter)
        self.editorWidget.setObjectName("editorWidget")
        self.editorLayout = QVBoxLayout(self.editorWidget)
        self.editorLayout.setObjectName("editorLayout")
        self.editorLayout.setContentsMargins(0, 0, 0, 0)
        self.editorStack = QStackedWidget(self.editorWidget)
        self.editorStack.setObjectName("editorStack")
        self.nativeEditor = NSSCodeEditor()
        self.nativeEditor.setObjectName("nativeEditor")
        self.editorStack.addWidget(self.nativeEditor)
        self.webEditor = WebViewEditor()
        self.webEditor.setObjectName("webEditor")
        self.editorStack.addWidget(self.webEditor)

        self.editorLayout.addWidget(self.editorStack)

        self.toggleEditorButton = QPushButton(self.editorWidget)
        self.toggleEditorButton.setObjectName("toggleEditorButton")

        self.editorLayout.addWidget(self.toggleEditorButton)

        self.rightSplitter.addWidget(self.editorWidget)
        self.editorTabsWidget = QWidget(self.rightSplitter)
        self.editorTabsWidget.setObjectName("editorTabsWidget")
        self.editorTabsLayout = QVBoxLayout(self.editorTabsWidget)
        self.editorTabsLayout.setObjectName("editorTabsLayout")
        self.editorTabsLayout.setContentsMargins(0, 0, 0, 0)
        self.editorTabs = QTabWidget(self.editorTabsWidget)
        self.editorTabs.setObjectName("editorTabs")
        sizePolicy2 = QSizePolicy(QSizePolicy.Policy.Expanding, QSizePolicy.Policy.Expanding)
        sizePolicy2.setHorizontalStretch(0)
        sizePolicy2.setVerticalStretch(0)
        sizePolicy2.setHeightForWidth(self.editorTabs.sizePolicy().hasHeightForWidth())
        self.editorTabs.setSizePolicy(sizePolicy2)
        self.editorTabs.setAcceptDrops(True)
        self.editorTabs.setTabsClosable(True)
        self.editorTabs.setMovable(True)

        self.editorTabsLayout.addWidget(self.editorTabs)

        self.searchReplaceWidget = QWidget(self.editorTabsWidget)
        self.searchReplaceWidget.setObjectName("searchReplaceWidget")
        self.searchReplaceLayout = QHBoxLayout(self.searchReplaceWidget)
        self.searchReplaceLayout.setObjectName("searchReplaceLayout")
        self.searchLineEdit = QLineEdit(self.searchReplaceWidget)
        self.searchLineEdit.setObjectName("searchLineEdit")

        self.searchReplaceLayout.addWidget(self.searchLineEdit)

        self.replaceLineEdit = QLineEdit(self.searchReplaceWidget)
        self.replaceLineEdit.setObjectName("replaceLineEdit")

        self.searchReplaceLayout.addWidget(self.replaceLineEdit)


        self.editorTabsLayout.addWidget(self.searchReplaceWidget)

        self.rightSplitter.addWidget(self.editorTabsWidget)
        self.bottomTabs = QTabWidget(self.rightSplitter)
        self.bottomTabs.setObjectName("bottomTabs")
        self.bottomTabs.setTabPosition(QTabWidget.South)
        self.outputTab = QWidget()
        self.outputTab.setObjectName("outputTab")
        self.outputLayout = QVBoxLayout(self.outputTab)
        self.outputLayout.setObjectName("outputLayout")
        self.outputEdit = QPlainTextEdit(self.outputTab)
        self.outputEdit.setObjectName("outputEdit")
        self.outputEdit.setReadOnly(True)

        self.outputLayout.addWidget(self.outputEdit)

        self.bottomTabs.addTab(self.outputTab, "")
        self.problemsTab = QWidget()
        self.problemsTab.setObjectName("problemsTab")
        self.problemsLayout = QVBoxLayout(self.problemsTab)
        self.problemsLayout.setObjectName("problemsLayout")
        self.problemsTree = QTreeWidget(self.problemsTab)
        self.problemsTree.setObjectName("problemsTree")

        self.problemsLayout.addWidget(self.problemsTree)

        self.bottomTabs.addTab(self.problemsTab, "")
        self.rightSplitter.addWidget(self.bottomTabs)
        self.mainSplitter.addWidget(self.rightSplitter)

        self.verticalLayout.addWidget(self.mainSplitter)

        self.progressBar = QProgressBar(self.centralwidget)
        self.progressBar.setObjectName("progressBar")
        self.progressBar.setMaximum(1)
        self.progressBar.setTextVisible(False)

        self.verticalLayout.addWidget(self.progressBar)

        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.toolBar = QToolBar(MainWindow)
        self.toolBar.setObjectName("toolBar")
        MainWindow.addToolBar(self.toolBar)
        self.bookmarksDock = QDockWidget(MainWindow)
        self.bookmarksDock.setObjectName("bookmarksDock")
        self.bookmarksDock.setAcceptDrops(True)
        self.dockWidgetContents_2 = QWidget()
        self.dockWidgetContents_2.setObjectName("dockWidgetContents_2")
        self.verticalLayout_14 = QVBoxLayout(self.dockWidgetContents_2)
        self.verticalLayout_14.setObjectName("verticalLayout_14")
        self.bookmarkTree = QTreeWidget(self.dockWidgetContents_2)
        self.bookmarkTree.setObjectName("bookmarkTree")

        self.verticalLayout_14.addWidget(self.bookmarkTree)

        self.addBookmarkButton = QPushButton(self.dockWidgetContents_2)
        self.addBookmarkButton.setObjectName("addBookmarkButton")

        self.verticalLayout_14.addWidget(self.addBookmarkButton)

        self.removeBookmarkButton = QPushButton(self.dockWidgetContents_2)
        self.removeBookmarkButton.setObjectName("removeBookmarkButton")

        self.verticalLayout_14.addWidget(self.removeBookmarkButton)

        self.bookmarksDock.setWidget(self.dockWidgetContents_2)
        MainWindow.addDockWidget(Qt.RightDockWidgetArea, self.bookmarksDock)
        self.snippetsDock = QDockWidget(MainWindow)
        self.snippetsDock.setObjectName("snippetsDock")
        self.snippetsDock.setAcceptDrops(True)
        self.snippetsDockContents = QWidget()
        self.snippetsDockContents.setObjectName("snippetsDockContents")
        self.snippetsLayout = QVBoxLayout(self.snippetsDockContents)
        self.snippetsLayout.setObjectName("snippetsLayout")
        self.snippetSearchEdit = QLineEdit(self.snippetsDockContents)
        self.snippetSearchEdit.setObjectName("snippetSearchEdit")

        self.snippetsLayout.addWidget(self.snippetSearchEdit)

        self.snippetList = QListWidget(self.snippetsDockContents)
        self.snippetList.setObjectName("snippetList")

        self.snippetsLayout.addWidget(self.snippetList)

        self.snippetButtonsLayout = QHBoxLayout()
        self.snippetButtonsLayout.setObjectName("snippetButtonsLayout")
        self.snippetAddButton = QPushButton(self.snippetsDockContents)
        self.snippetAddButton.setObjectName("snippetAddButton")

        self.snippetButtonsLayout.addWidget(self.snippetAddButton)

        self.snippetDelButton = QPushButton(self.snippetsDockContents)
        self.snippetDelButton.setObjectName("snippetDelButton")

        self.snippetButtonsLayout.addWidget(self.snippetDelButton)


        self.snippetsLayout.addLayout(self.snippetButtonsLayout)

        self.snippetReloadButton = QPushButton(self.snippetsDockContents)
        self.snippetReloadButton.setObjectName("snippetReloadButton")

        self.snippetsLayout.addWidget(self.snippetReloadButton)

        self.snippetsDock.setWidget(self.snippetsDockContents)
        MainWindow.addDockWidget(Qt.RightDockWidgetArea, self.snippetsDock)
        self.menubar = QMenuBar(MainWindow)
        self.menubar.setObjectName("menubar")
        self.menubar.setGeometry(QRect(0, 0, 1280, 21))
        self.menuFile = QMenu(self.menubar)
        self.menuFile.setObjectName("menuFile")
        self.menuEdit = QMenu(self.menubar)
        self.menuEdit.setObjectName("menuEdit")
        self.menuView = QMenu(self.menubar)
        self.menuView.setObjectName("menuView")
        self.menuTools = QMenu(self.menubar)
        self.menuTools.setObjectName("menuTools")
        self.menuHelp = QMenu(self.menubar)
        self.menuHelp.setObjectName("menuHelp")
        MainWindow.setMenuBar(self.menubar)

        self.menubar.addAction(self.menuFile.menuAction())
        self.menubar.addAction(self.menuEdit.menuAction())
        self.menubar.addAction(self.menuView.menuAction())
        self.menubar.addAction(self.menuTools.menuAction())
        self.menubar.addAction(self.menuHelp.menuAction())
        self.menuFile.addAction(self.actionNew)
        self.menuFile.addAction(self.actionOpen)
        self.menuFile.addAction(self.actionSave)
        self.menuFile.addAction(self.actionSave_As)
        self.menuFile.addAction(self.actionSave_All)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionClose)
        self.menuFile.addAction(self.actionClose_All)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionCompile)
        self.menuFile.addAction(self.actionRun)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionDownloadVanillaSource)
        self.menuFile.addAction(self.actionPrint)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionExit)
        self.menuEdit.addAction(self.actionUndo)
        self.menuEdit.addAction(self.actionRedo)
        self.menuEdit.addSeparator()
        self.menuEdit.addAction(self.actionCut)
        self.menuEdit.addAction(self.actionCopy)
        self.menuEdit.addAction(self.actionPaste)
        self.menuEdit.addSeparator()
        self.menuEdit.addAction(self.actionFind)
        self.menuEdit.addAction(self.actionReplace)
        self.menuEdit.addAction(self.actionFind_in_Files)
        self.menuEdit.addAction(self.actionGo_to_Line)
        self.menuEdit.addSeparator()
        self.menuEdit.addAction(self.actionToggle_Comment)
        self.menuEdit.addAction(self.actionIndent)
        self.menuEdit.addAction(self.actionUnindent)
        self.menuView.addAction(self.actionToggleFileExplorer)
        self.menuView.addAction(self.actionToggleTerminal)
        self.menuView.addAction(self.actionToggle_Output_Panel)
        self.menuView.addSeparator()
        self.menuView.addAction(self.actionZoom_In)
        self.menuView.addAction(self.actionZoom_Out)
        self.menuView.addAction(self.actionReset_Zoom)
        self.menuView.addSeparator()
        self.menuView.addAction(self.actionToggle_Line_Numbers)
        self.menuView.addAction(self.actionToggle_Wrap_Lines)
        self.menuTools.addAction(self.actionManage_Snippets)
        self.menuTools.addAction(self.actionManage_Plugins)
        self.menuTools.addSeparator()
        self.menuTools.addAction(self.actionFormat_Code)
        self.menuTools.addAction(self.actionAnalyze_Code)
        self.menuTools.addSeparator()
        self.menuHelp.addAction(self.actionDocumentation)
        self.menuHelp.addAction(self.actionKeyboard_Shortcuts)
        self.menuHelp.addSeparator()
        self.menuHelp.addAction(self.actionCheck_for_Updates)
        self.menuHelp.addAction(self.actionAbout)

        self.retranslateUi(MainWindow)

        QMetaObject.connectSlotsByName(MainWindow)
    # setupUi

    def retranslateUi(self, MainWindow):
        MainWindow.setWindowTitle(QCoreApplication.translate("MainWindow", "Advanced NSS Editor", None))
        self.actionNew.setText(QCoreApplication.translate("MainWindow", "New", None))
#if QT_CONFIG(shortcut)
        self.actionNew.setShortcut(QCoreApplication.translate("MainWindow", "Ctrl+Shift+B", None))
#endif // QT_CONFIG(shortcut)
        self.actionOpen.setText(QCoreApplication.translate("MainWindow", "Open", None))
#if QT_CONFIG(shortcut)
        self.actionOpen.setShortcut(QCoreApplication.translate("MainWindow", "Ctrl+O", None))
#endif // QT_CONFIG(shortcut)
        self.actionSave.setText(QCoreApplication.translate("MainWindow", "Save", None))
#if QT_CONFIG(shortcut)
        self.actionSave.setShortcut(QCoreApplication.translate("MainWindow", "Ctrl+S", None))
#endif // QT_CONFIG(shortcut)
        self.actionSave_As.setText(QCoreApplication.translate("MainWindow", "Save As", None))
#if QT_CONFIG(shortcut)
        self.actionSave_As.setShortcut(QCoreApplication.translate("MainWindow", "Ctrl+Shift+S", None))
#endif // QT_CONFIG(shortcut)
        self.actionSave_All.setText(QCoreApplication.translate("MainWindow", "Save All", None))
#if QT_CONFIG(shortcut)
        self.actionSave_All.setShortcut(QCoreApplication.translate("MainWindow", "Ctrl+Shift+A", None))
#endif // QT_CONFIG(shortcut)
        self.actionClose.setText(QCoreApplication.translate("MainWindow", "Close", None))
#if QT_CONFIG(shortcut)
        self.actionClose.setShortcut(QCoreApplication.translate("MainWindow", "Ctrl+W", None))
#endif // QT_CONFIG(shortcut)
        self.actionClose_All.setText(QCoreApplication.translate("MainWindow", "Close All", None))
#if QT_CONFIG(shortcut)
        self.actionClose_All.setShortcut(QCoreApplication.translate("MainWindow", "Ctrl+Shift+W", None))
#endif // QT_CONFIG(shortcut)
        self.actionCompile.setText(QCoreApplication.translate("MainWindow", "Compile", None))
#if QT_CONFIG(shortcut)
        self.actionCompile.setShortcut(QCoreApplication.translate("MainWindow", "Ctrl+Shift+B", None))
#endif // QT_CONFIG(shortcut)
        self.actionRun.setText(QCoreApplication.translate("MainWindow", "Run", None))
#if QT_CONFIG(shortcut)
        self.actionRun.setShortcut(QCoreApplication.translate("MainWindow", "F6", None))
#endif // QT_CONFIG(shortcut)
        self.actionPrint.setText(QCoreApplication.translate("MainWindow", "Print", None))
#if QT_CONFIG(shortcut)
        self.actionPrint.setShortcut(QCoreApplication.translate("MainWindow", "Ctrl+P", None))
#endif // QT_CONFIG(shortcut)
        self.actionExit.setText(QCoreApplication.translate("MainWindow", "Exit", None))
#if QT_CONFIG(shortcut)
        self.actionExit.setShortcut(QCoreApplication.translate("MainWindow", "Ctrl+Q", None))
#endif // QT_CONFIG(shortcut)
        self.actionUndo.setText(QCoreApplication.translate("MainWindow", "Undo", None))
#if QT_CONFIG(shortcut)
        self.actionUndo.setShortcut(QCoreApplication.translate("MainWindow", "Ctrl+Z", None))
#endif // QT_CONFIG(shortcut)
        self.actionRedo.setText(QCoreApplication.translate("MainWindow", "Redo", None))
#if QT_CONFIG(shortcut)
        self.actionRedo.setShortcut(QCoreApplication.translate("MainWindow", "Ctrl+Y", None))
#endif // QT_CONFIG(shortcut)
        self.actionCut.setText(QCoreApplication.translate("MainWindow", "Cut", None))
#if QT_CONFIG(shortcut)
        self.actionCut.setShortcut(QCoreApplication.translate("MainWindow", "Ctrl+X", None))
#endif // QT_CONFIG(shortcut)
        self.actionCopy.setText(QCoreApplication.translate("MainWindow", "Copy", None))
#if QT_CONFIG(shortcut)
        self.actionCopy.setShortcut(QCoreApplication.translate("MainWindow", "Ctrl+C", None))
#endif // QT_CONFIG(shortcut)
        self.actionPaste.setText(QCoreApplication.translate("MainWindow", "Paste", None))
#if QT_CONFIG(shortcut)
        self.actionPaste.setShortcut(QCoreApplication.translate("MainWindow", "Ctrl+V", None))
#endif // QT_CONFIG(shortcut)
        self.actionFind.setText(QCoreApplication.translate("MainWindow", "Find", None))
#if QT_CONFIG(shortcut)
        self.actionFind.setShortcut(QCoreApplication.translate("MainWindow", "Ctrl+F", None))
#endif // QT_CONFIG(shortcut)
        self.actionReplace.setText(QCoreApplication.translate("MainWindow", "Replace", None))
#if QT_CONFIG(shortcut)
        self.actionReplace.setShortcut(QCoreApplication.translate("MainWindow", "Ctrl+H", None))
#endif // QT_CONFIG(shortcut)
        self.actionFind_in_Files.setText(QCoreApplication.translate("MainWindow", "Find in Files", None))
#if QT_CONFIG(shortcut)
        self.actionFind_in_Files.setShortcut(QCoreApplication.translate("MainWindow", "Ctrl+Shift+F", None))
#endif // QT_CONFIG(shortcut)
        self.actionGo_to_Line.setText(QCoreApplication.translate("MainWindow", "Go to Line", None))
#if QT_CONFIG(shortcut)
        self.actionGo_to_Line.setShortcut(QCoreApplication.translate("MainWindow", "Ctrl+G", None))
#endif // QT_CONFIG(shortcut)
        self.actionGo_to_Function.setText(QCoreApplication.translate("MainWindow", "Go to Function", None))
#if QT_CONFIG(shortcut)
        self.actionGo_to_Function.setShortcut(QCoreApplication.translate("MainWindow", "Ctrl+Shift+G", None))
#endif // QT_CONFIG(shortcut)
        self.actionToggle_Comment.setText(QCoreApplication.translate("MainWindow", "Block Comment", None))
#if QT_CONFIG(shortcut)
        self.actionToggle_Comment.setShortcut(QCoreApplication.translate("MainWindow", "Ctrl+/", None))
#endif // QT_CONFIG(shortcut)
        self.actionIndent.setText(QCoreApplication.translate("MainWindow", "Indent", None))
#if QT_CONFIG(shortcut)
        self.actionIndent.setShortcut(QCoreApplication.translate("MainWindow", "Ctrl+I", None))
#endif // QT_CONFIG(shortcut)
        self.actionUnindent.setText(QCoreApplication.translate("MainWindow", "Unindent", None))
#if QT_CONFIG(shortcut)
        self.actionUnindent.setShortcut(QCoreApplication.translate("MainWindow", "Ctrl+Shift+I", None))
#endif // QT_CONFIG(shortcut)
        self.actionToggleFileExplorer.setText(QCoreApplication.translate("MainWindow", "Toggle File Explorer", None))
#if QT_CONFIG(shortcut)
        self.actionToggleFileExplorer.setShortcut(QCoreApplication.translate("MainWindow", "Ctrl+B", None))
#endif // QT_CONFIG(shortcut)
        self.actionToggleTerminal.setText(QCoreApplication.translate("MainWindow", "Toggle Snip/Bookmark Panel", None))
#if QT_CONFIG(shortcut)
        self.actionToggleTerminal.setShortcut(QCoreApplication.translate("MainWindow", "Ctrl+`", None))
#endif // QT_CONFIG(shortcut)
        self.actionToggle_Output_Panel.setText(QCoreApplication.translate("MainWindow", "Toggle Output Panel", None))
#if QT_CONFIG(shortcut)
        self.actionToggle_Output_Panel.setShortcut(QCoreApplication.translate("MainWindow", "Ctrl+Shift+O", None))
#endif // QT_CONFIG(shortcut)
        self.actionZoom_In.setText(QCoreApplication.translate("MainWindow", "Zoom In", None))
#if QT_CONFIG(shortcut)
        self.actionZoom_In.setShortcut(QCoreApplication.translate("MainWindow", "Ctrl++", None))
#endif // QT_CONFIG(shortcut)
        self.actionZoom_Out.setText(QCoreApplication.translate("MainWindow", "Zoom Out", None))
#if QT_CONFIG(shortcut)
        self.actionZoom_Out.setShortcut(QCoreApplication.translate("MainWindow", "Ctrl+-", None))
#endif // QT_CONFIG(shortcut)
        self.actionReset_Zoom.setText(QCoreApplication.translate("MainWindow", "Reset Zoom", None))
#if QT_CONFIG(shortcut)
        self.actionReset_Zoom.setShortcut(QCoreApplication.translate("MainWindow", "Ctrl+0", None))
#endif // QT_CONFIG(shortcut)
        self.actionToggle_Line_Numbers.setText(QCoreApplication.translate("MainWindow", "Toggle Line Numbers", None))
#if QT_CONFIG(shortcut)
        self.actionToggle_Line_Numbers.setShortcut(QCoreApplication.translate("MainWindow", "Ctrl+Shift+L", None))
#endif // QT_CONFIG(shortcut)
        self.actionToggle_Minimap.setText(QCoreApplication.translate("MainWindow", "Toggle Minimap", None))
#if QT_CONFIG(shortcut)
        self.actionToggle_Minimap.setShortcut(QCoreApplication.translate("MainWindow", "Ctrl+Shift+M", None))
#endif // QT_CONFIG(shortcut)
        self.actionToggle_Wrap_Lines.setText(QCoreApplication.translate("MainWindow", "Toggle Wrap Lines", None))
#if QT_CONFIG(shortcut)
        self.actionToggle_Wrap_Lines.setShortcut(QCoreApplication.translate("MainWindow", "Ctrl+Shift+W", None))
#endif // QT_CONFIG(shortcut)
        self.actionManage_Snippets.setText(QCoreApplication.translate("MainWindow", "Manage Snippets", None))
        self.actionManage_Plugins.setText(QCoreApplication.translate("MainWindow", "Manage Plugins", None))
        self.actionFormat_Code.setText(QCoreApplication.translate("MainWindow", "Format Code", None))
#if QT_CONFIG(shortcut)
        self.actionFormat_Code.setShortcut(QCoreApplication.translate("MainWindow", "Ctrl+Shift+F", None))
#endif // QT_CONFIG(shortcut)
        self.actionAnalyze_Code.setText(QCoreApplication.translate("MainWindow", "Analyze Code", None))
#if QT_CONFIG(shortcut)
        self.actionAnalyze_Code.setShortcut(QCoreApplication.translate("MainWindow", "Ctrl+Shift+A", None))
#endif // QT_CONFIG(shortcut)
        self.actionGenerate_Documentation.setText(QCoreApplication.translate("MainWindow", "Generate Documentation", None))
#if QT_CONFIG(shortcut)
        self.actionGenerate_Documentation.setShortcut(QCoreApplication.translate("MainWindow", "Ctrl+Shift+D", None))
#endif // QT_CONFIG(shortcut)
        self.actionExport_to_HTML.setText(QCoreApplication.translate("MainWindow", "Export to HTML", None))
#if QT_CONFIG(shortcut)
        self.actionExport_to_HTML.setShortcut(QCoreApplication.translate("MainWindow", "Ctrl+Shift+E", None))
#endif // QT_CONFIG(shortcut)
        self.actionStart_Debugging.setText(QCoreApplication.translate("MainWindow", "Start Debugging", None))
#if QT_CONFIG(shortcut)
        self.actionStart_Debugging.setShortcut(QCoreApplication.translate("MainWindow", "F9", None))
#endif // QT_CONFIG(shortcut)
        self.actionStop_Debugging.setText(QCoreApplication.translate("MainWindow", "Stop Debugging", None))
#if QT_CONFIG(shortcut)
        self.actionStop_Debugging.setShortcut(QCoreApplication.translate("MainWindow", "Shift+F9", None))
#endif // QT_CONFIG(shortcut)
        self.actionStep_Over.setText(QCoreApplication.translate("MainWindow", "Step Over", None))
#if QT_CONFIG(shortcut)
        self.actionStep_Over.setShortcut(QCoreApplication.translate("MainWindow", "F10", None))
#endif // QT_CONFIG(shortcut)
        self.actionStep_Into.setText(QCoreApplication.translate("MainWindow", "Step Into", None))
#if QT_CONFIG(shortcut)
        self.actionStep_Into.setShortcut(QCoreApplication.translate("MainWindow", "F11", None))
#endif // QT_CONFIG(shortcut)
        self.actionStep_Out.setText(QCoreApplication.translate("MainWindow", "Step Out", None))
#if QT_CONFIG(shortcut)
        self.actionStep_Out.setShortcut(QCoreApplication.translate("MainWindow", "Shift+F11", None))
#endif // QT_CONFIG(shortcut)
        self.actionToggle_Breakpoint.setText(QCoreApplication.translate("MainWindow", "Toggle Breakpoint", None))
#if QT_CONFIG(shortcut)
        self.actionToggle_Breakpoint.setShortcut(QCoreApplication.translate("MainWindow", "F12", None))
#endif // QT_CONFIG(shortcut)
        self.actionClear_All_Breakpoints.setText(QCoreApplication.translate("MainWindow", "Clear All Breakpoints", None))
#if QT_CONFIG(shortcut)
        self.actionClear_All_Breakpoints.setShortcut(QCoreApplication.translate("MainWindow", "Ctrl+Shift+F12", None))
#endif // QT_CONFIG(shortcut)
        self.actionDocumentation.setText(QCoreApplication.translate("MainWindow", "Documentation", None))
#if QT_CONFIG(shortcut)
        self.actionDocumentation.setShortcut(QCoreApplication.translate("MainWindow", "F1", None))
#endif // QT_CONFIG(shortcut)
        self.actionKeyboard_Shortcuts.setText(QCoreApplication.translate("MainWindow", "Keyboard Shortcuts", None))
#if QT_CONFIG(shortcut)
        self.actionKeyboard_Shortcuts.setShortcut(QCoreApplication.translate("MainWindow", "Ctrl+Shift+K", None))
#endif // QT_CONFIG(shortcut)
        self.actionCheck_for_Updates.setText(QCoreApplication.translate("MainWindow", "Check for Updates", None))
        self.actionAbout.setText(QCoreApplication.translate("MainWindow", "About", None))
        self.actionK1.setText(QCoreApplication.translate("MainWindow", "K1", None))
        self.actionTSL.setText(QCoreApplication.translate("MainWindow", "TSL", None))
        self.actionDownloadVanillaSource.setText(QCoreApplication.translate("MainWindow", "Download from Vanilla Source Repo", None))
#if QT_CONFIG(tooltip)
        self.actionDownloadVanillaSource.setToolTip(QCoreApplication.translate("MainWindow", "Download script from the vanilla source repository", None))
#endif // QT_CONFIG(tooltip)
        self.labelGameSelector.setText(QCoreApplication.translate("MainWindow", "Choose a Game", None))
        self.gameSelector.setItemText(0, QCoreApplication.translate("MainWindow", "K1", None))
        self.gameSelector.setItemText(1, QCoreApplication.translate("MainWindow", "TSL", None))

#if QT_CONFIG(tooltip)
        self.gameSelector.setToolTip(QCoreApplication.translate("MainWindow", "This determines what constants to use for your IDE and\n"
"                                        impacts the PyKotor compiler (if used)", None))
#endif // QT_CONFIG(tooltip)
        self.gameSelector.setPlaceholderText("")
        self.searchBar.setPlaceholderText(QCoreApplication.translate("MainWindow", "Search...", None))
        self.fileExplorerPath.setPlaceholderText(QCoreApplication.translate("MainWindow", "Path", None))
        self.fileExplorerTabs.setTabText(self.fileExplorerTabs.indexOf(self.fileExplorerTab), QCoreApplication.translate("MainWindow", "File Explorer", None))
        self.toggleEditorButton.setText(QCoreApplication.translate("MainWindow", "Toggle Web IDE", None))
        self.searchLineEdit.setPlaceholderText(QCoreApplication.translate("MainWindow", "Search...", None))
        self.replaceLineEdit.setPlaceholderText(QCoreApplication.translate("MainWindow", "Replace...", None))
        self.bottomTabs.setTabText(self.bottomTabs.indexOf(self.outputTab), QCoreApplication.translate("MainWindow", "Output", None))
        ___qtreewidgetitem = self.problemsTree.headerItem()
        ___qtreewidgetitem.setText(2, QCoreApplication.translate("MainWindow", "Line", None));
        ___qtreewidgetitem.setText(1, QCoreApplication.translate("MainWindow", "File", None));
        ___qtreewidgetitem.setText(0, QCoreApplication.translate("MainWindow", "Description", None));
        self.bottomTabs.setTabText(self.bottomTabs.indexOf(self.problemsTab), QCoreApplication.translate("MainWindow", "Problems", None))
        self.bookmarksDock.setWindowTitle(QCoreApplication.translate("MainWindow", "Bookmarks", None))
        ___qtreewidgetitem1 = self.bookmarkTree.headerItem()
        ___qtreewidgetitem1.setText(1, QCoreApplication.translate("MainWindow", "Description", None));
        ___qtreewidgetitem1.setText(0, QCoreApplication.translate("MainWindow", "Line", None));
        self.addBookmarkButton.setText(QCoreApplication.translate("MainWindow", "Add Bookmark", None))
        self.removeBookmarkButton.setText(QCoreApplication.translate("MainWindow", "Remove Bookmark", None))
        self.snippetsDock.setWindowTitle(QCoreApplication.translate("MainWindow", "Snippets", None))
        self.snippetSearchEdit.setPlaceholderText(QCoreApplication.translate("MainWindow", "Search snippets...", None))
        self.snippetAddButton.setText(QCoreApplication.translate("MainWindow", "Add", None))
        self.snippetDelButton.setText(QCoreApplication.translate("MainWindow", "Remove", None))
        self.snippetReloadButton.setText(QCoreApplication.translate("MainWindow", "Reload", None))
        self.menuFile.setTitle(QCoreApplication.translate("MainWindow", "File", None))
        self.menuEdit.setTitle(QCoreApplication.translate("MainWindow", "Edit", None))
        self.menuView.setTitle(QCoreApplication.translate("MainWindow", "View", None))
        self.menuTools.setTitle(QCoreApplication.translate("MainWindow", "Tools", None))
        self.menuHelp.setTitle(QCoreApplication.translate("MainWindow", "Help", None))
    # retranslateUi

