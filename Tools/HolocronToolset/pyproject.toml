[build-system]
requires = [
    "setuptools>=67.8.0,<70",
    "wheel"
]
build-backend = "setuptools.build_meta"

[project]
name="HolocronToolset"
description="A PyQt5-backed program with a collection of tools and editors that make it easy to work with kotor files"
version="3.1.1"
requires-python = ">= 3.7"
dependencies = [
    "idna",  # Tested with 3.3
    "PyQt5~=5.15",
    "PyQt5-Qt5~=5.15",
    "PyQt5-sip~=12.10",
    "urllib3~=1.26",
    "watchdog>=2.1,<3.1",
    "Markdown>=3.3,<3.6",
    "jsmin~=3.0",
    "requests>=2.27,<2.32",
    "certifi==2021.10.8",
    "qtpy",
#    "pykotor>=1.7",
#    "pykotor[gl]>=1.7"
]
authors = [
  {name = "NickHugi"},
]
maintainers = [
  {name = "th3w1zard1", email = "halomastar@gmail.com"},
]
readme = {file = "README.md", content-type = "text/markdown"}
license = {text = "LGPL-3.0-or-later License"}
keywords = ["kotor", "pyqt5", "holocron", "toolset", "pykotor", "star", "wars", "starwars", "toolset", "toolkit", "opengl", "designer", "module", "modding", "dlgeditor", "AIO", "editor", "GFF"]

[project.urls]
Homepage = "https://github.com/NickHugi/PyKotor"
Documentation = "https://github.com/NickHugi/PyKotor/blob/master/README.md"
Repository = "https://github.com/NickHugi/PyKotor.git"
Issues = "https://github.com/NickHugi/PyKotor/issues"
#Changelog = "https://github.com/NickHugi/PyKotor/blob/master/CHANGELOG.md"

########################################################
## define only linter configurations below this point ##
########################################################

[tool.pyright.defineConstant]
PYQT5 = true
PYSIDE2 = false
PYQT6 = true
PYSIDE6 = false

[tool.ruff]
extend = "../../pyproject.toml"

[tool.ruff.lint]
external = ["V"]
task-tags = ["TODO", "FIXME", "HACK"]
select = ["ALL"]
exclude = [".venv", ".venv*"]
unfixable = [
    "F841",
    "ERA001",
    "N815",
    "RUF100",   # Unused `noqa` directive
    #"UP035",  # replaces deprecated/outdated imports (we want to support older versions of python in the future)
    #"UP038",  # non-pep604-isinstance (python 3.10 syntax)
]
ignore = [
# The following rules are too strict to be realistically used by ruff:
    "ANN002",   # Checks that function *args arguments have type annotations.
    "ANN003",   # Checks that function **kwargs arguments have type annotations.
    "ANN101",   # Checks that instance method self arguments have type annotations.
    "ANN102",   # Checks that class method cls arguments have type annotations.
    "ANN401",   # Dynamically typed expressions (typing.Any) are disallowed in {name}
    "ANN204",   # Missing return type annotation for special method
    "ARG002",   # Unused method argument: `method`
    "COM812",   # missing-trailing-comma
    "ERA001",   # Found commented out code.
#    "FBT001",   # Boolean positional arg in function definition
#    "FBT002",   # Boolean default value in function definition
    "D100",     # Missing docstring in public module
    "D101",     # Missing docstring in public class
    "D102",     # Missing docstring in public method
    "D103",     # Missing docstring in public function
    "D104",     # Missing docstring in public package
    "D105",     # Missing docstring in magic method
    "D107",     # Missing docstring in __init__
    "D205",     # 1 blank line required between summary line and description
#    "D213",     # Multi-line docstring summary should start at the second line
#    "D400",     # First line should end with a period
    "D401",     # First line of docstring should be in imperative mood
    "D413",     # Missing blank line after last section 'xyz'
#    "D403",     # First word of the first line should be capitalized: {} -> {}
#    "D404",     # First word of the docstring should not be "This"
    "D417",     # Missing argument description in the docstring for {definition}: {name}
    "G004",     # Logging statement uses f'' string.
    "N802",     # Function name `screenToWorld` should be lowercase
    "N806",     # Variable `jumpToOffset` in function should be lowercase
    "N815",     # Variable `var` in class scope should not be mixedCase
    "PLR0904",  # Too many public methods
    "RET504",   # Unnecessary assignment to `varname` before `return` statement
    "RUF100",   # Unused `noqa` directive (non-enabled: `PLC0415`)
    "T201",     # 'print' detected
    "TD001",    # Invalid TODO tag: `FIXME`
    "TRY003",   # Avoid specifying long messages outside the exception class
    "EM101",    # Exception must not use a string literal, assign to variable first
    "EM102",    # Exception must not use an f-string literal, assign to variable first
    "SIM108",   # Use ternary operator instead of 'if' 'else' block
    "SIM114",   # Combine `if` branches using logical `or` operator
    "S101",     # Use of `assert` detected.

# The following are currently violated by the codebase.
#    "D205",     # 1 blank line required between summary line and description
#    "E402",     # Module level import not at top of file
#    "FIX004",   # Line contains HACK, consider resolving the issue
#    "PD901",    # df is a bad variable name. Be kinder to your future self.
#    "PERF203",  # `try`-`except` within a loop incurs performance overhead
#    "PLR0913",  # Too many arguments to function call (N > 5)
#    "PLR2004",  # Magic value used in comparison, consider replacing X with a constant variable
#    "S101",     # Use of assert detected
#    "S314",     # Using `xml` to parse untrusted data is known to be vulnerable to XML attacks; use `defusedxml` equivalents
#    "S605",     # Starting a process with a shell, possible injection detected
#    "SLF001",   # Private member accessed
#
# According to ruff documentation, the following rules should be avoided when using its formatter:
#
#    "W191",     # tab-indentation
#    "E111",     # indentation-with-invalid-multiple
#    "E114",     # indentation-with-invalid-multiple-comment
#    "E117",     # over-indented
#    "D206",     # indent-with-spaces
#    "D300",     # triple-single-quotes
#    "Q000",     # bad-quotes-inline-string
#    "Q001",     # bad-quotes-multiline-string
#    "Q002",     # bad-quotes-docstring
#    "Q003",     # avoidable-escaped-quote
#    "COM812",   # missing-trailing-comma
#    "COM819",   # prohibited-trailing-comma
    "ISC001",
    "N",     # disable snake_case vs PascalCase/camelCase checks for pyqt5
]

[tool.ruff.lint.per-file-ignores]
"tests/*.py" = ["ALL"]
".github/*py" = ["INP001"]
"__init__.py" = ["I001", "F401"]
"globalsettings.py" = ["I001", "F401"]
"./src/toolset/*.py" = ["FBT003", "N802", "N803", "N806", "A001"]
"./src/toolset/uic/*.py" = ["ALL"]  # uic's are auto-generated
"resources_rc.py" = ["ALL"]
".mdx" = ["ALL"]
".mdl" = ["ALL"]
"pykotor/resource/formats/ncs/compiler/*.py" = ["ALL"]

[tool.ruff.lint.flake8-pytest-style]
fixture-parentheses = false

[tool.ruff.lint.isort]
required-imports = ["from __future__ import annotations"]

[tool.ruff.lint.pyupgrade]
keep-runtime-typing = true

[tool.mccabe]
max-complexity = 25

[tool.style]
based_on_style = "pep8"
split_before_named_assigns = true
split_complex_comprehension = true
split_arguments_when_comma_terminated = true

[tool.pylintrc]
max-line-length = 175

[tool.ruff.lint.flake8-annotations]
ignore-fully-untyped = true
mypy-init-return = true
suppress-none-returning = true

[tool.ruff.lint.flake8-bandit]
check-typed-exception = true

[tool.ruff.lint.flake8-quotes]
docstring-quotes = "double"
inline-quotes = "double"
multiline-quotes = "double"

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"  # Disallow all relative imports.

[tool.ruff.lint.flake8-type-checking]
# Add quotes around type annotations, if doing so would allow an import to be moved into a type-checking block.
quote-annotations = true  # Does nothing when from __future__ import annotations is used
exempt-modules = ["typing", "typing_extensions"]
strict = true

[tool.ruff.lint.flake8-unused-arguments]
ignore-variadic-names = true

[tool.ruff.format]
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
preview = false

[tool.bandit]
exclude_dirs = ["tests"]
tests = ["B201", "B301"]
skips = ["B101", "B601"]

[tool.ruff.lint.pycodestyle]
max-doc-length = 200

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.pytest.ini_options]
log_cli = true
log_cli_level = "CRITICAL"
log_cli_format = "%(message)s"

log_file = "pytest.log"
log_file_level = "DEBUG"
log_file_format = "%(asctime)s [%(levelname)8s] %(message)s (%(filename)s:%(lineno)s)"
log_file_date_format = "%Y-%m-%d %H:%M:%S"
